[
    {
        "reqid": "TEST-NEVER",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "In drivingMode the system shall never satisfy cellPhoneOn & !cellPhoneHandsFree",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "never",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "cellPhoneOn",
                    "cellPhoneHandsFree"
                ],
                "modes": [
                    "drivingMode"
                ]
            },
            "scope_mode": "drivingMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "system",
            "componentTextRange": [
                15,
                24
            ],
            "timingTextRange": [
                32,
                36
            ],
            "post_condition": "(cellPhoneOn & ! cellPhoneHandsFree)",
            "responseTextRange": [
                38,
                78
            ],
            "ft": "(LAST V (<b><i>drivingMode</i></b> -> (! <b><i>(cellPhoneOn & ! cellPhoneHandsFree)</i></b>)))",
            "pt": "(H (<b><i>drivingMode</i></b> -> (! <b><i>(cellPhoneOn & ! cellPhoneHandsFree)</i></b>)))",
            "ftExpanded": "(LAST V (<b><i>drivingMode</i></b> -> (! <b><i>(cellPhoneOn & ! cellPhoneHandsFree)</i></b>)))",
            "ptExpanded": "(H (<b><i>drivingMode</i></b> -> (! <b><i>(cellPhoneOn & ! cellPhoneHandsFree)</i></b>)))",
            "component": "<b><i>system</i></b>",
            "CoCoSpecCode": "(H(drivingMode => ( not (cellPhoneOn and not cellPhoneHandsFree))))",
            "diagramVariables": "M = <b><i>drivingMode</i></b>, Response = <b><i>(cellPhoneOn & ! cellPhoneHandsFree)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>drivingMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_never_satisfaction.svg"
        },
        "_id": "0f998bc0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-IMPLIES",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "the sw shall always satisfy if occurred(7,persisted(2,fault)) then persisted(2,lightOn)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "occurred",
                    "persisted",
                    "fault",
                    "lightOn"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                18
            ],
            "post_condition": "(occurred ( 7 , persisted ( 2 , fault ) ) => persisted ( 2 , lightOn ))",
            "responseTextRange": [
                20,
                86
            ],
            "diagramVariables": "Response = <b><i>(occurred ( 7 , persisted ( 2 , fault ) ) => persisted ( 2 , lightOn ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "post_condition_unexp_pt": "((((! FTP) S ((H[<=2] fault) & (H[<2] (! FTP)))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! FTP))))) -> ((H[<=2] lightOn) & (H[<2] (! FTP))))",
            "post_condition_unexp_ft": "(occurred(7,persisted(2,fault)) -> persisted(2,lightOn))",
            "post_condition_SMV_pt": "((((! (!(Y TRUE))) S ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! (!(Y TRUE))))))) -> ((H[<=2] lightOn) & (H[<2] (! (!(Y TRUE))))))",
            "post_condition_SMV_ft": "(occurred(7,persisted(2,fault)) -> persisted(2,lightOn))",
            "post_condition_coco": "(((S( ((HT(2,0,fault)) and (HT(1,0,( not FTP)))), ( not FTP) )) and (OT(7,0,((HT(2,0,fault)) and (HT(1,0,( not FTP))))))) => ((HT(2,0,lightOn)) and (HT(1,0,( not FTP)))))",
            "ft": "(LAST V <b><i>(occurred(7,persisted(2,fault)) -> persisted(2,lightOn))</i></b>)",
            "pt": "(H <b><i>((((! FTP) S ((H[<=2] fault) & (H[<2] (! FTP)))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! FTP))))) -> ((H[<=2] lightOn) & (H[<2] (! FTP))))</i></b>)",
            "ptExpanded": "(H ((((! (!(Y TRUE))) S ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! (!(Y TRUE))))))) -> ((H[<=2] lightOn) & (H[<2] (! (!(Y TRUE)))))))",
            "ftExpanded": "(LAST V (occurred(7,persisted(2,fault)) -> persisted(2,lightOn)))",
            "CoCoSpecCode": "(H((((S( ((HT(2,0,fault)) and (HT(1,0,( not FTP)))), ( not FTP) )) and (OT(7,0,((HT(2,0,fault)) and (HT(1,0,( not FTP))))))) => ((HT(2,0,lightOn)) and (HT(1,0,( not FTP)))))))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0f99b2d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-UNLESS-ALWAYS",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "after m mode, unless p, the sw shall always satisfy r",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "scope_mode": "m",
            "regular_condition": "(!(p))",
            "qualifier_word": "unless",
            "pre_condition": "(p)",
            "component_name": "sw",
            "post_condition": "r",
            "ltlTemplate": "G ((!$scope_mode$) | ($scope_mode$ & ($regular_condition$ -> (G $post_condition$))))",
            "ltlFormula": "G ((!<b><i>m</i></b>) | (<b><i>m</i></b> & (<b><i>(!(p))</i></b> -> (G <b><i>r</i></b>))))",
            "ltlDescription": "If the condition <b><i>(!(p))</i></b> holds,  component <b><i>sw</i></b> shall , always thereafter,  satisfy <b><i>r</i></b>. \nNote that this requirement is only relevant and imposed after the first time that <b><i>sw</i></b> exits mode <b><i>m</i></b> for the first time."
        },
        "input": {
            "scopeField": "after m mode",
            "conditionsField": "unless p",
            "componentField": "the sw",
            "timingField": "always",
            "responsesField": "satisfy r"
        },
        "_id": "0f9a2800-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-REGULAR-IMMEDIATELY",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when x > 0 the sw shall immediately satisfy y > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "y"
                ],
                "modes": []
            },
            "regular_condition": "(x > 0)",
            "qualifier_word": "when",
            "pre_condition": "(x > 0)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "sw",
            "componentTextRange": [
                11,
                16
            ],
            "timingTextRange": [
                24,
                34
            ],
            "post_condition": "(y > 0)",
            "responseTextRange": [
                36,
                48
            ],
            "ft": "((LAST V (((! <b><i>(x > 0)</i></b>) & ((! LAST) & (X <b><i>(x > 0)</i></b>))) -> (X <b><i>(y > 0)</i></b>))) & (<b><i>(x > 0)</i></b> -> <b><i>(y > 0)</i></b>))",
            "pt": "(H ((<b><i>(x > 0)</i></b> & ((Y (! <b><i>(x > 0)</i></b>)) | FTP)) -> <b><i>(y > 0)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(x > 0)</i></b>) & ((! LAST) & (X <b><i>(x > 0)</i></b>))) -> (X <b><i>(y > 0)</i></b>))) & (<b><i>(x > 0)</i></b> -> <b><i>(y > 0)</i></b>))",
            "ptExpanded": "(H ((<b><i>(x > 0)</i></b> & ((Y (! <b><i>(x > 0)</i></b>)) | (! (Y TRUE)))) -> <b><i>(y > 0)</i></b>))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H(((x > 0) and ((pre ( not (x > 0))) or FTP)) => (y > 0)))",
            "diagramVariables": "TC = <b><i>(x > 0)</i></b>, Response = <b><i>(y > 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(x > 0)</i></b> is true and any point in the interval where <b><i>(x > 0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "0f9a4f10-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-FOR",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "fulltext": "after TurnOn the sw shall for 10 minutes satisfy preheat",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "preheat"
                ],
                "modes": [
                    "TurnOn"
                ]
            },
            "scope_mode": "TurnOn",
            "scopeTextRange": [
                0,
                11
            ],
            "component_name": "sw",
            "componentTextRange": [
                13,
                18
            ],
            "duration": [
                "10"
            ],
            "timingTextRange": [
                26,
                39
            ],
            "post_condition": "(preheat)",
            "responseTextRange": [
                41,
                55
            ],
            "ft": "(((! FLin_<b><i>TurnOn</i></b>) U (FLin_<b><i>TurnOn</i></b> & (X ((G[<=<b><i>10</i></b>] <b><i>(preheat)</i></b>) | (LAST V <b><i>(preheat)</i></b>))))) | (LAST V (! FLin_<b><i>TurnOn</i></b>)))",
            "pt": "((O FLin_<b><i>TurnOn</i></b>) -> (((O[<=<b><i>10</i></b>] FLin_<b><i>TurnOn</i></b>) -> <b><i>(preheat)</i></b>) S (((O[<=<b><i>10</i></b>] FLin_<b><i>TurnOn</i></b>) -> <b><i>(preheat)</i></b>) & FLin_<b><i>TurnOn</i></b>)))",
            "ftExpanded": "(((! ((<b><i>TurnOn</i></b> & (! LAST)) & (X (! <b><i>TurnOn</i></b>)))) U (((<b><i>TurnOn</i></b> & (! LAST)) & (X (! <b><i>TurnOn</i></b>))) & (X ((G[<=<b><i>10</i></b>] <b><i>(preheat)</i></b>) | (LAST V <b><i>(preheat)</i></b>))))) | (LAST V (! ((<b><i>TurnOn</i></b> & (! LAST)) & (X (! <b><i>TurnOn</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>TurnOn</i></b>) & (Y <b><i>TurnOn</i></b>)) & (Y (H (! ((! <b><i>TurnOn</i></b>) & (Y <b><i>TurnOn</i></b>))))))) -> (((O[<=<b><i>10</i></b>] (((! <b><i>TurnOn</i></b>) & (Y <b><i>TurnOn</i></b>)) & (Y (H (! ((! <b><i>TurnOn</i></b>) & (Y <b><i>TurnOn</i></b>))))))) -> <b><i>(preheat)</i></b>) S (((O[<=<b><i>10</i></b>] (((! <b><i>TurnOn</i></b>) & (Y <b><i>TurnOn</i></b>)) & (Y (H (! ((! <b><i>TurnOn</i></b>) & (Y <b><i>TurnOn</i></b>))))))) -> <b><i>(preheat)</i></b>) & (((! <b><i>TurnOn</i></b>) & (Y <b><i>TurnOn</i></b>)) & (Y (H (! ((! <b><i>TurnOn</i></b>) & (Y <b><i>TurnOn</i></b>)))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((O((( not TurnOn) and (pre (TurnOn))) and pre (H( not (( not TurnOn) and (pre (TurnOn))))))) => (SI( ((( not TurnOn) and (pre (TurnOn))) and pre (H( not (( not TurnOn) and (pre (TurnOn)))))), ((OT(10,0,( ( ( not TurnOn ) and ( Y TurnOn ) ) and Y ( H ( not ( ( not TurnOn ) and ( Y TurnOn ) ) ) ) ))) => (preheat)) )))",
            "diagramVariables": "M = <b><i>TurnOn</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(preheat)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>TurnOn</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>10</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>10</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>10</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_for_satisfaction.svg"
        },
        "_id": "0f9ac440-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-MODE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "after initialization the sw shall satisfy ready",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "initialization",
                    "ready"
                ],
                "modes": []
            },
            "scope_mode": "(initialization)",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "sw",
            "componentTextRange": [
                21,
                26
            ],
            "post_condition": "(ready)",
            "responseTextRange": [
                34,
                46
            ],
            "ft": "(((! FLin_<b><i>(initialization)</i></b>) U (FLin_<b><i>(initialization)</i></b> & (X ((! LAST) U <b><i>(ready)</i></b>)))) | (LAST V (! FLin_<b><i>(initialization)</i></b>)))",
            "pt": "((O FLin_<b><i>(initialization)</i></b>) -> (! ((! <b><i>(ready)</i></b>) S ((! <b><i>(ready)</i></b>) & FLin_<b><i>(initialization)</i></b>))))",
            "ftExpanded": "(((! ((<b><i>(initialization)</i></b> & (! LAST)) & (X (! <b><i>(initialization)</i></b>)))) U (((<b><i>(initialization)</i></b> & (! LAST)) & (X (! <b><i>(initialization)</i></b>))) & (X ((! LAST) U <b><i>(ready)</i></b>)))) | (LAST V (! ((<b><i>(initialization)</i></b> & (! LAST)) & (X (! <b><i>(initialization)</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>(initialization)</i></b>) & (Y <b><i>(initialization)</i></b>)) & (Y (H (! ((! <b><i>(initialization)</i></b>) & (Y <b><i>(initialization)</i></b>))))))) -> (! ((! <b><i>(ready)</i></b>) S ((! <b><i>(ready)</i></b>) & (((! <b><i>(initialization)</i></b>) & (Y <b><i>(initialization)</i></b>)) & (Y (H (! ((! <b><i>(initialization)</i></b>) & (Y <b><i>(initialization)</i></b>))))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((O((( not (initialization)) and (pre ((initialization)))) and pre (H( not (( not (initialization)) and (pre ((initialization)))))))) => ( not (SI( ((( not (initialization)) and (pre ((initialization)))) and pre (H( not (( not (initialization)) and (pre ((initialization))))))), ( not (ready)) ))))",
            "diagramVariables": "M = <b><i>(initialization)</i></b>, Response = <b><i>(ready)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>(initialization)</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_null_satisfaction.svg"
        },
        "_id": "0f9aeb50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-BEFORE-REG-IMMEDIATELY",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "before M when P the sw shall immediately satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P",
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                7
            ],
            "regular_condition": "(P)",
            "qualifier_word": "when",
            "pre_condition": "(P)",
            "conditionTextRange": [
                9,
                14
            ],
            "component_name": "sw",
            "componentTextRange": [
                16,
                21
            ],
            "timingTextRange": [
                29,
                39
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                41,
                49
            ],
            "ft": "No meaning assigned.",
            "pt": "No meaning assigned.",
            "ftExpanded": "No meaning assigned.",
            "ptExpanded": "No meaning assigned.",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "No meaning assigned.",
            "diagramVariables": "M = <b><i>M</i></b>, TC = <b><i>(P)</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "Unclear requirement. We are not sure how to interpret this requirement.",
            "diagram": "Undefined svg."
        },
        "_id": "0f9b3970-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-P2",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "if P the sw shall within 3 ticks satisfy persists(5,R)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P",
                    "persists",
                    "R"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(P)",
            "regular_condition": "(P)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "sw",
            "componentTextRange": [
                5,
                10
            ],
            "duration": "3",
            "timingTextRange": [
                18,
                31
            ],
            "post_condition": "(persists ( 5 , R ))",
            "responseTextRange": [
                33,
                53
            ],
            "diagramVariables": "TC = <b><i>(P)</i></b>,  n = <b><i>3</i></b>, Response = <b><i>(persists ( 5 , R ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(P)</i></b> is true and any point in the interval where <b><i>(P)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3</i></b>). If the interval ends sooner than trigger+<b><i>3</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "regular_condition_unexp_pt": "P",
            "regular_condition_unexp_ft": "P",
            "regular_condition_SMV_pt": "P",
            "regular_condition_SMV_ft": "P",
            "regular_condition_coco": "P",
            "post_condition_unexp_pt": "persists(5,R)",
            "post_condition_unexp_ft": "((G[<=5] R) & (G[<5] (! LAST)))",
            "post_condition_SMV_pt": "persists(5,R)",
            "post_condition_SMV_ft": "((G[<=5] R) & (G[<5] (! LAST)))",
            "post_condition_coco": "(5R)",
            "ft": "((LAST V (((! <b><i>P</i></b>) & ((! LAST) & (X <b><i>P</i></b>))) -> (X ((F[<=<b><i>3</i></b>] <b><i>((G[<=5] R) & (G[<5] (! LAST)))</i></b>) | (F[<<b><i>3</i></b>] LAST))))) & (<b><i>P</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>((G[<=5] R) & (G[<5] (! LAST)))</i></b>) | (F[<<b><i>3</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>3</i></b>] ((<b><i>P</i></b> & ((Y (! <b><i>P</i></b>)) | FTP)) & (! <b><i>persists(5,R)</i></b>))) -> (O[<<b><i>3</i></b>] (FTP | <b><i>persists(5,R)</i></b>))))",
            "ptExpanded": "(H ((O[=3] ((P & ((Y (! P)) | (! (Y TRUE)))) & (! persists(5,R)))) -> (O[<3] ((! (Y TRUE)) | persists(5,R)))))",
            "ftExpanded": "((LAST V (((! P) & ((! LAST) & (X P))) -> (X ((F[<=3] ((G[<=5] R) & (G[<5] (! LAST)))) | (F[<3] LAST))))) & (P -> ((F[<=3] ((G[<=5] R) & (G[<5] (! LAST)))) | (F[<3] LAST))))",
            "CoCoSpecCode": "(H((OT(3,3,( ( P and ( ( Y ( not P ) ) or FTP ) ) and ( not (5R) ) ))) => (OT(3-1,0,( FTP or (5R) )))))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0f9b8790-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-R2",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "the sw shall always satisfy if occurred(7,persisted(2,fault)) then persists(2,lightOn)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "occurred",
                    "persisted",
                    "fault",
                    "persists",
                    "lightOn"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                18
            ],
            "post_condition": "(occurred ( 7 , persisted ( 2 , fault ) ) => persists ( 2 , lightOn ))",
            "responseTextRange": [
                20,
                85
            ],
            "diagramVariables": "Response = <b><i>(occurred ( 7 , persisted ( 2 , fault ) ) => persists ( 2 , lightOn ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "post_condition_unexp_pt": "((((! FTP) S ((H[<=2] fault) & (H[<2] (! FTP)))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! FTP))))) -> persists(2,lightOn))",
            "post_condition_unexp_ft": "(occurred(7,persisted(2,fault)) -> ((G[<=2] lightOn) & (G[<2] (! LAST))))",
            "post_condition_SMV_pt": "((((! (!(Y TRUE))) S ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! (!(Y TRUE))))))) -> persists(2,lightOn))",
            "post_condition_SMV_ft": "(occurred(7,persisted(2,fault)) -> ((G[<=2] lightOn) & (G[<2] (! LAST))))",
            "post_condition_coco": "(((S( ((HT(2,0,fault)) and (HT(1,0,( not FTP)))), ( not FTP) )) and (OT(7,0,((HT(2,0,fault)) and (HT(1,0,( not FTP))))))) => (2lightOn))",
            "ft": "(LAST V <b><i>(occurred(7,persisted(2,fault)) -> ((G[<=2] lightOn) & (G[<2] (! LAST))))</i></b>)",
            "pt": "(H <b><i>((((! FTP) S ((H[<=2] fault) & (H[<2] (! FTP)))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! FTP))))) -> persists(2,lightOn))</i></b>)",
            "ptExpanded": "(H ((((! (!(Y TRUE))) S ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! (!(Y TRUE))))))) -> persists(2,lightOn)))",
            "ftExpanded": "(LAST V (occurred(7,persisted(2,fault)) -> ((G[<=2] lightOn) & (G[<2] (! LAST)))))",
            "CoCoSpecCode": "(H((((S( ((HT(2,0,fault)) and (HT(1,0,( not FTP)))), ( not FTP) )) and (OT(7,0,((HT(2,0,fault)) and (HT(1,0,( not FTP))))))) => (2lightOn))))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0f9bd5b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-AFTER",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "only after m, shall the fsw  satisfy q",
        "semantics": {
            "scope": {
                "type": "onlyAfter",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "m",
            "component_name": "fsw",
            "post_condition": "q",
            "ltlTemplate": "G ($post_condition$ -> (O $scope_mode$))",
            "ltlFormula": "G (<b><i>q</i></b> -> (O <b><i>m</i></b>))",
            "ltlDescription": "Component <b><i>fsw</i></b> shall  satisfy <b><i>q</i></b>. \nNote that this requirement can only be true after the first time that <b><i>fsw</i></b> exits mode <b><i>m</i></b> for the first time."
        },
        "input": {
            "scopeField": "only after m",
            "conditionsField": "",
            "componentField": "the fsw",
            "timingField": "",
            "responsesField": "satisfy q"
        },
        "_id": "0f9bfcc0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-SCOPE-Condition",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "while flight_mode = 3 the sw shall always satisfy x^2>=0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flight_mode",
                    "x"
                ],
                "modes": []
            },
            "scope_mode": "(flight_mode = 3)",
            "scopeTextRange": [
                0,
                20
            ],
            "component_name": "sw",
            "componentTextRange": [
                22,
                27
            ],
            "timingTextRange": [
                35,
                40
            ],
            "post_condition": "(x ^ 2 >= 0)",
            "responseTextRange": [
                42,
                55
            ],
            "ft": "(LAST V (<b><i>(flight_mode = 3)</i></b> -> <b><i>(x ^ 2 >= 0)</i></b>))",
            "pt": "(H (<b><i>(flight_mode = 3)</i></b> -> <b><i>(x ^ 2 >= 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>(flight_mode = 3)</i></b> -> <b><i>(x ^ 2 >= 0)</i></b>))",
            "ptExpanded": "(H (<b><i>(flight_mode = 3)</i></b> -> <b><i>(x ^ 2 >= 0)</i></b>))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((flight_mode = 3) => (x ^ 2 >= 0)))",
            "diagramVariables": "M = <b><i>(flight_mode = 3)</i></b>, Response = <b><i>(x ^ 2 >= 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(flight_mode = 3)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0f9c4ae0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-AFTER-2",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "only after safeguard mode shall the tool satisfy energized",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyAfter",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "energized"
                ],
                "modes": [
                    "safeguard"
                ]
            },
            "scope_mode": "safeguard",
            "scopeTextRange": [
                0,
                24
            ],
            "component_name": "tool",
            "componentTextRange": [
                32,
                39
            ],
            "post_condition": "(energized)",
            "responseTextRange": [
                41,
                57
            ],
            "ft": "((FLin_<b><i>safeguard</i></b> | LAST) V (! <b><i>(energized)</i></b>))",
            "pt": "((H ((FLin_<b><i>safeguard</i></b> & (! FTP)) -> (Y (H (! <b><i>(energized)</i></b>))))) & ((H (! FLin_<b><i>safeguard</i></b>)) -> (H (! <b><i>(energized)</i></b>))))",
            "ftExpanded": "((((<b><i>safeguard</i></b> & (! LAST)) & (X (! <b><i>safeguard</i></b>))) | LAST) V (! <b><i>(energized)</i></b>))",
            "ptExpanded": "((H (((((! <b><i>safeguard</i></b>) & (Y <b><i>safeguard</i></b>)) & (Y (H (! ((! <b><i>safeguard</i></b>) & (Y <b><i>safeguard</i></b>)))))) & (Y TRUE)) -> (Y (H (! <b><i>(energized)</i></b>))))) & ((H (! (((! <b><i>safeguard</i></b>) & (Y <b><i>safeguard</i></b>)) & (Y (H (! ((! <b><i>safeguard</i></b>) & (Y <b><i>safeguard</i></b>)))))))) -> (H (! <b><i>(energized)</i></b>))))",
            "component": "<b><i>tool</i></b>",
            "CoCoSpecCode": "((H((((( not safeguard) and (pre (safeguard))) and pre (H( not (( not safeguard) and (pre (safeguard)))))) and ( not FTP)) => (pre (H( not (energized)))))) and ((H( not ((( not safeguard) and (pre (safeguard))) and pre (H( not (( not safeguard) and (pre (safeguard)))))))) => (H( not (energized)))))",
            "diagramVariables": "M = <b><i>safeguard</i></b>, Response = <b><i>(energized)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and including) the first interval where <b><i>safeguard</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyAfter_null_null_satisfaction.svg"
        },
        "_id": "0f9cc010-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-FLOATING-POINT",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when x <= 0.0 the sw shall satisfy y > -3.2e1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "y"
                ],
                "modes": []
            },
            "regular_condition": "(x <= 0.0)",
            "qualifier_word": "when",
            "pre_condition": "(x <= 0.0)",
            "conditionTextRange": [
                0,
                12
            ],
            "component_name": "sw",
            "componentTextRange": [
                14,
                19
            ],
            "post_condition": "(y > -3.2e1)",
            "responseTextRange": [
                27,
                44
            ],
            "ft": "((LAST V (((! <b><i>(x <= 0.0)</i></b>) & ((! LAST) & (X <b><i>(x <= 0.0)</i></b>))) -> (X ((! LAST) U <b><i>(y > -3.2e1)</i></b>)))) & (<b><i>(x <= 0.0)</i></b> -> ((! LAST) U <b><i>(y > -3.2e1)</i></b>)))",
            "pt": "((H (! <b><i>(x <= 0.0)</i></b>)) | (! ((! <b><i>(y > -3.2e1)</i></b>) S ((! <b><i>(y > -3.2e1)</i></b>) & (<b><i>(x <= 0.0)</i></b> & ((Y (! <b><i>(x <= 0.0)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(x <= 0.0)</i></b>) & ((! LAST) & (X <b><i>(x <= 0.0)</i></b>))) -> (X ((! LAST) U <b><i>(y > -3.2e1)</i></b>)))) & (<b><i>(x <= 0.0)</i></b> -> ((! LAST) U <b><i>(y > -3.2e1)</i></b>)))",
            "ptExpanded": "((H (! <b><i>(x <= 0.0)</i></b>)) | (! ((! <b><i>(y > -3.2e1)</i></b>) S ((! <b><i>(y > -3.2e1)</i></b>) & (<b><i>(x <= 0.0)</i></b> & ((Y (! <b><i>(x <= 0.0)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H( not (x <= 0.0))) or ( not (SI( ((x <= 0.0) and ((pre ( not (x <= 0.0))) or FTP)), ( not (y > -3.2e1)) ))))",
            "diagramVariables": "TC = <b><i>(x <= 0.0)</i></b>, Response = <b><i>(y > -3.2e1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(x <= 0.0)</i></b> is true and any point in the interval where <b><i>(x <= 0.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "0f9ce720-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-004",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when liquid_level_2 the liquid_mixer shall at the next timepoint satisfy ! valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "valve_1"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "liquid_level_2",
            "regular_condition": "liquid_level_2",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                63
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                65,
                81
            ],
            "regular_condition_coco": "liquid_level_2",
            "ft": "((LAST V (((! <b><i>liquid_level_2</i></b>) & ((! LAST) & (X <b><i>liquid_level_2</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>liquid_level_2</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "pt": "(H ((Y (<b><i>liquid_level_2</i></b> & ((Y (! <b><i>liquid_level_2</i></b>)) | FTP))) -> (<b><i>(! valve_1)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>liquid_level_2</i></b>) & ((! LAST) & (X <b><i>liquid_level_2</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>liquid_level_2</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>liquid_level_2</i></b> & ((Y (! <b><i>liquid_level_2</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_1)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre (liquid_level_2 and ((pre ( not liquid_level_2)) or FTP))) => ((! valve_1) or FTP)))",
            "diagramVariables": "TC = <b><i>liquid_level_2</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>liquid_level_2</i></b> is true and any point in the interval where <b><i>liquid_level_2</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0f9d3540-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "ARBITER-2",
        "parent_reqid": "ARBITER-1",
        "project": "ARBITER",
        "rationale": "",
        "comments": "",
        "fulltext": "before grant the arbiter shall satisfy ! request",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "request"
                ],
                "modes": [
                    "grant"
                ]
            },
            "scope_mode": "grant",
            "scopeTextRange": [
                0,
                11
            ],
            "component_name": "arbiter",
            "componentTextRange": [
                13,
                23
            ],
            "post_condition": "(! request)",
            "responseTextRange": [
                31,
                47
            ],
            "ft": "(((F (FFin_<b><i>grant</i></b> | LAST)) -> (((! LAST) & (! (FFin_<b><i>grant</i></b> | LAST))) U <b><i>(! request)</i></b>)) | <b><i>grant</i></b>)",
            "pt": "((H ((FFin_<b><i>grant</i></b> & (! FTP)) -> (Y (O <b><i>(! request)</i></b>)))) & ((H (! FFin_<b><i>grant</i></b>)) -> (O <b><i>(! request)</i></b>)))",
            "ftExpanded": "(((F (((! <b><i>grant</i></b>) & (X <b><i>grant</i></b>)) | LAST)) -> (((! LAST) & (! (((! <b><i>grant</i></b>) & (X <b><i>grant</i></b>)) | LAST))) U <b><i>(! request)</i></b>)) | <b><i>grant</i></b>)",
            "ptExpanded": "((H ((((<b><i>grant</i></b> & ((! (Y TRUE)) | (Y (! <b><i>grant</i></b>)))) & ((Y (H (! <b><i>grant</i></b>))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O <b><i>(! request)</i></b>)))) & ((H (! ((<b><i>grant</i></b> & ((! (Y TRUE)) | (Y (! <b><i>grant</i></b>)))) & ((Y (H (! <b><i>grant</i></b>))) | (! (Y TRUE)))))) -> (O <b><i>(! request)</i></b>)))",
            "component": "<b><i>arbiter</i></b>",
            "CoCoSpecCode": "((H((((grant and (FTP or (pre ( not grant)))) and ((pre (H( not grant))) or FTP)) and ( not FTP)) -> (pre (O((not request)))))) and ((H( not ((grant and (FTP or (pre ( not grant)))) and ((pre (H( not grant))) or FTP)))) -> (O((not request)))))",
            "diagramVariables": "M = <b><i>grant</i></b>, Response = <b><i>(! request)</i></b>.",
            "description": "At some future point, the component \"<b><i>arbiter</i></b>\" shall satisfy <b><i>(! request)</i></b>. This is only enforced strictly before the first occurence of <b><i>grant</i></b> (if <b><i>grant</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/before_null_null_satisfaction.svg"
        },
        "_id": "0f9d8360-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-AFTER-FOR",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "only after M shall the sw for 2 ticks satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyAfter",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "M",
                    "r"
                ],
                "modes": []
            },
            "scope_mode": "(M)",
            "scopeTextRange": [
                0,
                11
            ],
            "component_name": "sw",
            "componentTextRange": [
                19,
                24
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                26,
                36
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                38,
                46
            ],
            "ft": "((F[<=<b><i>2</i></b>] (! <b><i>(r)</i></b>)) | (F[<<b><i>2</i></b>] (FLin_<b><i>(M)</i></b> | LAST)))",
            "pt": "((H ((FLin_<b><i>(M)</i></b> & (! FTP)) -> (Y (H ((H <b><i>(r)</i></b>) -> (O[<<b><i>2</i></b>] FTP)))))) & ((H (! FLin_<b><i>(M)</i></b>)) -> (H ((H <b><i>(r)</i></b>) -> (O[<<b><i>2</i></b>] FTP)))))",
            "ftExpanded": "((F[<=<b><i>2</i></b>] (! <b><i>(r)</i></b>)) | (F[<<b><i>2</i></b>] (((<b><i>(M)</i></b> & (! LAST)) & (X (! <b><i>(M)</i></b>))) | LAST)))",
            "ptExpanded": "((H (((((! <b><i>(M)</i></b>) & (Y <b><i>(M)</i></b>)) & (Y (H (! ((! <b><i>(M)</i></b>) & (Y <b><i>(M)</i></b>)))))) & (Y TRUE)) -> (Y (H ((H <b><i>(r)</i></b>) -> (O[<<b><i>2</i></b>] (! (Y TRUE)))))))) & ((H (! (((! <b><i>(M)</i></b>) & (Y <b><i>(M)</i></b>)) & (Y (H (! ((! <b><i>(M)</i></b>) & (Y <b><i>(M)</i></b>)))))))) -> (H ((H <b><i>(r)</i></b>) -> (O[<<b><i>2</i></b>] (! (Y TRUE)))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H((((( not (M)) and (pre ((M)))) and pre (H( not (( not (M)) and (pre ((M))))))) and ( not FTP)) => (pre (H((H((r))) => (OT(2-1,0,FTP))))))) and ((H( not ((( not (M)) and (pre ((M)))) and pre (H( not (( not (M)) and (pre ((M))))))))) => (H((H((r))) => (OT(2-1,0,FTP))))))",
            "diagramVariables": "M = <b><i>(M)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and including) the first interval where <b><i>(M)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at some point with distance <=<b><i>2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2</i></b>), except if the end of the interval occurs sooner.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyAfter_null_for_satisfaction.svg"
        },
        "_id": "0f9dd180-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REQT-FOR",
        "parent_reqid": "",
        "project": "TEST-REALIZABILITY",
        "rationale": "",
        "comments": "",
        "fulltext": "if P the sw shall for 5 ticks satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P",
                    "r"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(P)",
            "regular_condition": "(P)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "sw",
            "componentTextRange": [
                5,
                10
            ],
            "duration": [
                "5"
            ],
            "timingTextRange": [
                18,
                28
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                30,
                38
            ],
            "ft": "((LAST V (((! <b><i>(P)</i></b>) & ((! LAST) & (X <b><i>(P)</i></b>))) -> (X ((G[<=<b><i>5</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))))) & (<b><i>(P)</i></b> -> ((G[<=<b><i>5</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))))",
            "pt": "(H ((O[<=<b><i>5</i></b>] (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | FTP))) -> ((H (! <b><i>(P)</i></b>)) | <b><i>(r)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(P)</i></b>) & ((! LAST) & (X <b><i>(P)</i></b>))) -> (X ((G[<=<b><i>5</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))))) & (<b><i>(P)</i></b> -> ((G[<=<b><i>5</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))))",
            "ptExpanded": "(H ((O[<=<b><i>5</i></b>] (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (! (Y TRUE))))) -> ((H (! <b><i>(P)</i></b>)) | <b><i>(r)</i></b>)))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((OT(5,0,((P) and ((pre ( not (P))) or FTP)))) => ((H( not (P))) or (r))))",
            "diagramVariables": "TC = <b><i>(P)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(P)</i></b> is true and any point in the interval where <b><i>(P)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>5</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>5</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>5</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg"
        },
        "_id": "0f9e1fa0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REQ-02",
        "parent_reqid": "",
        "project": "InfusionManager",
        "rationale": "",
        "comments": "",
        "fulltext": "after FTP mode the sw shall always satisfy if p then q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "q"
                ],
                "modes": [
                    "FTP"
                ]
            },
            "scope_mode": "FTP",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "sw",
            "componentTextRange": [
                15,
                20
            ],
            "timingTextRange": [
                28,
                33
            ],
            "post_condition": "(p => q)",
            "responseTextRange": [
                35,
                53
            ],
            "ft": "(((! FLin_<b><i>FTP</i></b>) U (FLin_<b><i>FTP</i></b> & (X (LAST V <b><i>(p -> q)</i></b>)))) | (LAST V (! FLin_<b><i>FTP</i></b>)))",
            "pt": "((O FLin_<b><i>FTP</i></b>) -> (<b><i>(p -> q)</i></b> S (<b><i>(p -> q)</i></b> & FLin_<b><i>FTP</i></b>)))",
            "ftExpanded": "(((! ((<b><i>FTP</i></b> & (! LAST)) & (X (! <b><i>FTP</i></b>)))) U (((<b><i>FTP</i></b> & (! LAST)) & (X (! <b><i>FTP</i></b>))) & (X (LAST V <b><i>(p -> q)</i></b>)))) | (LAST V (! ((<b><i>FTP</i></b> & (! LAST)) & (X (! <b><i>FTP</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>FTP</i></b>) & (Y <b><i>FTP</i></b>)) & (Y (H (! ((! <b><i>FTP</i></b>) & (Y <b><i>FTP</i></b>))))))) -> (<b><i>(p -> q)</i></b> S (<b><i>(p -> q)</i></b> & (((! <b><i>FTP</i></b>) & (Y <b><i>FTP</i></b>)) & (Y (H (! ((! <b><i>FTP</i></b>) & (Y <b><i>FTP</i></b>)))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((O((( not FTP) and (pre (FTP))) and pre (H( not (( not FTP) and (pre (FTP))))))) => (SI( ((( not FTP) and (pre (FTP))) and pre (H( not (( not FTP) and (pre (FTP)))))), (p => q) )))",
            "diagramVariables": "M = <b><i>FTP</i></b>, Response = <b><i>(p => q)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>FTP</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "0f9e1fa1-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-AFTER-WITHIN",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "only after M mode shall the sw within 2 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyAfter",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "sw",
            "componentTextRange": [
                24,
                29
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                31,
                44
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                46,
                54
            ],
            "ft": "((G[<=<b><i>2</i></b>] (! <b><i>(R)</i></b>)) | ((FLin_<b><i>M</i></b> | LAST) V (! <b><i>(R)</i></b>)))",
            "pt": "((H ((FLin_<b><i>M</i></b> & (! FTP)) -> (Y (H ((O[<=<b><i>2</i></b>] FTP) -> (! <b><i>(R)</i></b>)))))) & ((H (! FLin_<b><i>M</i></b>)) -> (H ((O[<=<b><i>2</i></b>] FTP) -> (! <b><i>(R)</i></b>)))))",
            "ftExpanded": "((G[<=<b><i>2</i></b>] (! <b><i>(R)</i></b>)) | ((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (! <b><i>(R)</i></b>)))",
            "ptExpanded": "((H (((((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)))))) & (Y TRUE)) -> (Y (H ((O[<=<b><i>2</i></b>] (! (Y TRUE))) -> (! <b><i>(R)</i></b>)))))) & ((H (! (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)))))))) -> (H ((O[<=<b><i>2</i></b>] (! (Y TRUE))) -> (! <b><i>(R)</i></b>)))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H((((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M)))))) and ( not FTP)) => (pre (H((OT(2,0,FTP)) => ( not (R))))))) and ((H( not ((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M)))))))) => (H((OT(2,0,FTP)) => ( not (R))))))",
            "diagramVariables": "M = <b><i>M</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and including) the first interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>2</i></b> from the trigger, or until the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyAfter_null_within_satisfaction.svg"
        },
        "_id": "0f9e6dc0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-SIM",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in flight mode upon timestamp <= 5  component shall always satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "timestamp",
                    "r"
                ],
                "modes": [
                    "flight"
                ]
            },
            "scope_mode": "flight",
            "scopeTextRange": [
                0,
                13
            ],
            "regular_condition": "(timestamp <= 5)",
            "qualifier_word": "upon",
            "pre_condition": "(timestamp <= 5)",
            "conditionTextRange": [
                15,
                33
            ],
            "component_name": "component",
            "componentTextRange": [
                36,
                44
            ],
            "timingTextRange": [
                52,
                57
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                59,
                67
            ],
            "ft": "((LAST V ((! (Fin_<b><i>flight</i></b> & (! LAST))) | (X (((Lin_<b><i>flight</i></b> | LAST) V (((! <b><i>(timestamp <= 5)</i></b>) & ((! LAST) & ((X <b><i>(timestamp <= 5)</i></b>) & (! (Lin_<b><i>flight</i></b> | LAST))))) -> ((X ((Lin_<b><i>flight</i></b> | LAST) V <b><i>(r)</i></b>)) & (! (Lin_<b><i>flight</i></b> | LAST))))) & (<b><i>(timestamp <= 5)</i></b> -> ((Lin_<b><i>flight</i></b> | LAST) V <b><i>(r)</i></b>)))))) & (<b><i>flight</i></b> -> (((Lin_<b><i>flight</i></b> | LAST) V (((! <b><i>(timestamp <= 5)</i></b>) & ((! LAST) & ((X <b><i>(timestamp <= 5)</i></b>) & (! (Lin_<b><i>flight</i></b> | LAST))))) -> ((X ((Lin_<b><i>flight</i></b> | LAST) V <b><i>(r)</i></b>)) & (! (Lin_<b><i>flight</i></b> | LAST))))) & (<b><i>(timestamp <= 5)</i></b> -> ((Lin_<b><i>flight</i></b> | LAST) V <b><i>(r)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>flight</i></b> & (! FTP)) -> (Y ((((! <b><i>(timestamp <= 5)</i></b>) S ((! <b><i>(timestamp <= 5)</i></b>) & Fin_<b><i>flight</i></b>)) | <b><i>(r)</i></b>) S ((((! <b><i>(timestamp <= 5)</i></b>) S ((! <b><i>(timestamp <= 5)</i></b>) & Fin_<b><i>flight</i></b>)) | <b><i>(r)</i></b>) & Fin_<b><i>flight</i></b>))))) & (((! Lin_<b><i>flight</i></b>) S ((! Lin_<b><i>flight</i></b>) & Fin_<b><i>flight</i></b>)) -> ((((! <b><i>(timestamp <= 5)</i></b>) S ((! <b><i>(timestamp <= 5)</i></b>) & Fin_<b><i>flight</i></b>)) | <b><i>(r)</i></b>) S ((((! <b><i>(timestamp <= 5)</i></b>) S ((! <b><i>(timestamp <= 5)</i></b>) & Fin_<b><i>flight</i></b>)) | <b><i>(r)</i></b>) & Fin_<b><i>flight</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>flight</i></b>) & (! LAST)) & (X <b><i>flight</i></b>)) & (! LAST))) | (X (((((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST) V (((! <b><i>(timestamp <= 5)</i></b>) & ((! LAST) & ((X <b><i>(timestamp <= 5)</i></b>) & (! (((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST))))) -> ((X ((((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST) V <b><i>(r)</i></b>)) & (! (((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST))))) & (<b><i>(timestamp <= 5)</i></b> -> ((((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST) V <b><i>(r)</i></b>)))))) & (<b><i>flight</i></b> -> (((((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST) V (((! <b><i>(timestamp <= 5)</i></b>) & ((! LAST) & ((X <b><i>(timestamp <= 5)</i></b>) & (! (((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST))))) -> ((X ((((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST) V <b><i>(r)</i></b>)) & (! (((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST))))) & (<b><i>(timestamp <= 5)</i></b> -> ((((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST) V <b><i>(r)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>flight</i></b>) & (Y <b><i>flight</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(timestamp <= 5)</i></b>) S ((! <b><i>(timestamp <= 5)</i></b>) & (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))))) | <b><i>(r)</i></b>) S ((((! <b><i>(timestamp <= 5)</i></b>) S ((! <b><i>(timestamp <= 5)</i></b>) & (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))))) | <b><i>(r)</i></b>) & (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>))))))))) & (((! ((! <b><i>flight</i></b>) & (Y <b><i>flight</i></b>))) S ((! ((! <b><i>flight</i></b>) & (Y <b><i>flight</i></b>))) & (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))))) -> ((((! <b><i>(timestamp <= 5)</i></b>) S ((! <b><i>(timestamp <= 5)</i></b>) & (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))))) | <b><i>(r)</i></b>) S ((((! <b><i>(timestamp <= 5)</i></b>) S ((! <b><i>(timestamp <= 5)</i></b>) & (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))))) | <b><i>(r)</i></b>) & (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>))))))))",
            "component": "<b><i>component</i></b>",
            "CoCoSpecCode": "((H(((( not flight) and (pre (flight))) and ( not FTP)) => (pre (SI( (flight and (FTP or (pre ( not flight)))), ((SI( (flight and (FTP or (pre ( not flight)))), ( not (timestamp <= 5)) )) or (r)) ))))) and ((SI( (flight and (FTP or (pre ( not flight)))), ( not (( not flight) and (pre (flight)))) )) => (SI( (flight and (FTP or (pre ( not flight)))), ((SI( (flight and (FTP or (pre ( not flight)))), ( not (timestamp <= 5)) )) or (r)) ))))",
            "diagramVariables": "M = <b><i>flight</i></b>, TC = <b><i>(timestamp <= 5)</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>flight</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(timestamp <= 5)</i></b> is true and any point in the interval where <b><i>(timestamp <= 5)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "0f9e94d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-NOTIN-REG-Eventually",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when not in m mode and when pre the sw shall eventually satisfy post",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "notin"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pre",
                    "post"
                ],
                "modes": [
                    "m"
                ]
            },
            "scope_mode": "m",
            "scopeTextRange": [
                0,
                17
            ],
            "regular_condition": "(pre)",
            "qualifier_word": "when",
            "pre_condition": "(pre)",
            "conditionTextRange": [
                19,
                30
            ],
            "component_name": "sw",
            "componentTextRange": [
                32,
                37
            ],
            "timingTextRange": [
                45,
                54
            ],
            "post_condition": "(post)",
            "responseTextRange": [
                56,
                67
            ],
            "ft": "((LAST V ((! (FNin_<b><i>m</i></b> & (! LAST))) | (X (((LNin_<b><i>m</i></b> | LAST) V (((! <b><i>(pre)</i></b>) & ((! LAST) & ((X <b><i>(pre)</i></b>) & (! (LNin_<b><i>m</i></b> | LAST))))) -> ((X ((! (LNin_<b><i>m</i></b> | LAST)) U <b><i>(post)</i></b>)) & (! (LNin_<b><i>m</i></b> | LAST))))) & (<b><i>(pre)</i></b> -> ((! (LNin_<b><i>m</i></b> | LAST)) U <b><i>(post)</i></b>)))))) & ((! <b><i>m</i></b>) -> (((LNin_<b><i>m</i></b> | LAST) V (((! <b><i>(pre)</i></b>) & ((! LAST) & ((X <b><i>(pre)</i></b>) & (! (LNin_<b><i>m</i></b> | LAST))))) -> ((X ((! (LNin_<b><i>m</i></b> | LAST)) U <b><i>(post)</i></b>)) & (! (LNin_<b><i>m</i></b> | LAST))))) & (<b><i>(pre)</i></b> -> ((! (LNin_<b><i>m</i></b> | LAST)) U <b><i>(post)</i></b>)))))",
            "pt": "((H ((LNin_<b><i>m</i></b> & (! FTP)) -> (Y (((! <b><i>(pre)</i></b>) S ((! <b><i>(pre)</i></b>) & FNin_<b><i>m</i></b>)) | (! ((! <b><i>(post)</i></b>) S ((! <b><i>(post)</i></b>) & (<b><i>(pre)</i></b> & ((Y (! <b><i>(pre)</i></b>)) | FNin_<b><i>m</i></b>))))))))) & (((! LNin_<b><i>m</i></b>) S ((! LNin_<b><i>m</i></b>) & FNin_<b><i>m</i></b>)) -> (((! <b><i>(pre)</i></b>) S ((! <b><i>(pre)</i></b>) & FNin_<b><i>m</i></b>)) | (! ((! <b><i>(post)</i></b>) S ((! <b><i>(post)</i></b>) & (<b><i>(pre)</i></b> & ((Y (! <b><i>(pre)</i></b>)) | FNin_<b><i>m</i></b>))))))))",
            "ftExpanded": "((LAST V ((! (((<b><i>m</i></b> & (! LAST)) & (X (! <b><i>m</i></b>))) & (! LAST))) | (X ((((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST) V (((! <b><i>(pre)</i></b>) & ((! LAST) & ((X <b><i>(pre)</i></b>) & (! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST))))) -> ((X ((! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST)) U <b><i>(post)</i></b>)) & (! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST))))) & (<b><i>(pre)</i></b> -> ((! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST)) U <b><i>(post)</i></b>)))))) & ((! <b><i>m</i></b>) -> ((((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST) V (((! <b><i>(pre)</i></b>) & ((! LAST) & ((X <b><i>(pre)</i></b>) & (! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST))))) -> ((X ((! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST)) U <b><i>(post)</i></b>)) & (! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST))))) & (<b><i>(pre)</i></b> -> ((! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST)) U <b><i>(post)</i></b>)))))",
            "ptExpanded": "((H (((<b><i>m</i></b> & (Y (! <b><i>m</i></b>))) & (Y TRUE)) -> (Y (((! <b><i>(pre)</i></b>) S ((! <b><i>(pre)</i></b>) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>))))) | (! ((! <b><i>(post)</i></b>) S ((! <b><i>(post)</i></b>) & (<b><i>(pre)</i></b> & ((Y (! <b><i>(pre)</i></b>)) | ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>)))))))))))) & (((! (<b><i>m</i></b> & (Y (! <b><i>m</i></b>)))) S ((! (<b><i>m</i></b> & (Y (! <b><i>m</i></b>)))) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>))))) -> (((! <b><i>(pre)</i></b>) S ((! <b><i>(pre)</i></b>) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>))))) | (! ((! <b><i>(post)</i></b>) S ((! <b><i>(post)</i></b>) & (<b><i>(pre)</i></b> & ((Y (! <b><i>(pre)</i></b>)) | ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>)))))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((m and (pre ( not m))) and ( not FTP)) => (pre ((SI( (( not m) and (FTP or (pre (m)))), ( not (pre)) )) or ( not (SI( ((pre) and ((pre ( not (pre))) or (( not m) and (FTP or (pre (m)))))), ( not (post)) ))))))) and ((SI( (( not m) and (FTP or (pre (m)))), ( not (m and (pre ( not m)))) )) => ((SI( (( not m) and (FTP or (pre (m)))), ( not (pre)) )) or ( not (SI( ((pre) and ((pre ( not (pre))) or (( not m) and (FTP or (pre (m)))))), ( not (post)) ))))))",
            "diagramVariables": "M = <b><i>m</i></b>, TC = <b><i>(pre)</i></b>, Response = <b><i>(post)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>m</i></b> does NOT hold.\nTRIGGER: first point in the interval if <b><i>(pre)</i></b> is true and any point in the interval where <b><i>(pre)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/notin_regular_eventually_satisfaction.svg"
        },
        "_id": "0f9ee2f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "comments": "",
        "fulltext": "In roll_hold mode RollAutopilot shall immediately satisfy if abs(roll_angle) < 6.0 then roll_hold_reference = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs",
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                112
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "(H (Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "(H ((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0f9f3110-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-002",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when liquid_level_1 the liquid_mixer shall at the next timepoint satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1",
                    "valve_0"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "liquid_level_1",
            "regular_condition": "liquid_level_1",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                63
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                65,
                81
            ],
            "regular_condition_coco": "liquid_level_1",
            "ft": "((LAST V (((! <b><i>liquid_level_1</i></b>) & ((! LAST) & (X <b><i>liquid_level_1</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>liquid_level_1</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "pt": "(H ((Y (<b><i>liquid_level_1</i></b> & ((Y (! <b><i>liquid_level_1</i></b>)) | FTP))) -> (<b><i>(! valve_0)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>liquid_level_1</i></b>) & ((! LAST) & (X <b><i>liquid_level_1</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>liquid_level_1</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>liquid_level_1</i></b> & ((Y (! <b><i>liquid_level_1</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_0)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre (liquid_level_1 and ((pre ( not liquid_level_1)) or FTP))) => ((! valve_0) or FTP)))",
            "diagramVariables": "TC = <b><i>liquid_level_1</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>liquid_level_1</i></b> is true and any point in the interval where <b><i>liquid_level_1</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0f9f7f30-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-IN-WITHIN",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in mode M the sw shall within 3 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                8
            ],
            "component_name": "sw",
            "componentTextRange": [
                10,
                15
            ],
            "duration": [
                "3"
            ],
            "timingTextRange": [
                23,
                36
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                38,
                46
            ],
            "ft": "((LAST V ((! (Fin_<b><i>M</i></b> & (! LAST))) | (X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))))) & (<b><i>M</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))))",
            "pt": "((H ((Lin_<b><i>M</i></b> & (! FTP)) -> (Y ((((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & Fin_<b><i>M</i></b>)) -> (O[<<b><i>3</i></b>] Fin_<b><i>M</i></b>)) S ((((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & Fin_<b><i>M</i></b>)) -> (O[<<b><i>3</i></b>] Fin_<b><i>M</i></b>)) & Fin_<b><i>M</i></b>))))) & (((! Lin_<b><i>M</i></b>) S ((! Lin_<b><i>M</i></b>) & Fin_<b><i>M</i></b>)) -> ((((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & Fin_<b><i>M</i></b>)) -> (O[<<b><i>3</i></b>] Fin_<b><i>M</i></b>)) S ((((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & Fin_<b><i>M</i></b>)) -> (O[<<b><i>3</i></b>] Fin_<b><i>M</i></b>)) & Fin_<b><i>M</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) & (! LAST))) | (X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))))) & (<b><i>M</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))))",
            "ptExpanded": "((H ((((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (O[<<b><i>3</i></b>] (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) S ((((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (O[<<b><i>3</i></b>] (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))) & (((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) S ((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> ((((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (O[<<b><i>3</i></b>] (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) S ((((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (O[<<b><i>3</i></b>] (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((( not M) and (pre (M))) and ( not FTP)) => (pre (SI( (M and (FTP or (pre ( not M)))), ((SI( (M and (FTP or (pre ( not M)))), ( not (R)) )) => (OT(3-1,0,( M and ( FTP or ( Y not M ) ) )))) ))))) and ((SI( (M and (FTP or (pre ( not M)))), ( not (( not M) and (pre (M)))) )) => (SI( (M and (FTP or (pre ( not M)))), ((SI( (M and (FTP or (pre ( not M)))), ( not (R)) )) => (OT(3-1,0,( M and ( FTP or ( Y not M ) ) )))) ))))",
            "diagramVariables": "M = <b><i>M</i></b>,  n = <b><i>3</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3</i></b>). If the interval ends sooner than trigger+<b><i>3</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_within_satisfaction.svg"
        },
        "_id": "0f9fcd50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-BEFORE-Timing",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "The sw shall before TakeOff satisfy CheckListTasksCompleted",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "before",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "TakeOff",
                    "CheckListTasksCompleted"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "stop_condition": "(TakeOff)",
            "timingTextRange": [
                13,
                26
            ],
            "post_condition": "(CheckListTasksCompleted)",
            "responseTextRange": [
                28,
                58
            ],
            "ft": "((<b><i>(CheckListTasksCompleted)</i></b> | LAST) V (! <b><i>(TakeOff)</i></b>))",
            "pt": "(H (<b><i>(TakeOff)</i></b> -> ((! FTP) & (Y (O <b><i>(CheckListTasksCompleted)</i></b>)))))",
            "ftExpanded": "((<b><i>(CheckListTasksCompleted)</i></b> | LAST) V (! <b><i>(TakeOff)</i></b>))",
            "ptExpanded": "(H (<b><i>(TakeOff)</i></b> -> ((Y TRUE) & (Y (O <b><i>(CheckListTasksCompleted)</i></b>)))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((TakeOff) => (( not FTP) and (pre (O((CheckListTasksCompleted)))))))",
            "diagramVariables": "SC = <b><i>(TakeOff)</i></b>, Response = <b><i>(CheckListTasksCompleted)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisified.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg"
        },
        "_id": "0fa01b70-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "test_regular_null_",
        "parent_reqid": "",
        "project": "AOS",
        "rationale": "",
        "comments": "",
        "fulltext": "after PackageInstallation, the system shall eventually satisfy (indicationLight = orange)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "indicationLight",
                    "orange"
                ],
                "modes": [
                    "PackageInstallation"
                ]
            },
            "scope_mode": "PackageInstallation",
            "scopeTextRange": [
                0,
                25
            ],
            "component_name": "system",
            "componentTextRange": [
                27,
                36
            ],
            "timingTextRange": [
                44,
                53
            ],
            "post_condition": "(( indicationLight = orange ))",
            "responseTextRange": [
                55,
                88
            ],
            "ft": "(((! FLin_<b><i>PackageInstallation</i></b>) U (FLin_<b><i>PackageInstallation</i></b> & (X ((! LAST) U <b><i>(( indicationLight = orange ))</i></b>)))) | (G (! FLin_<b><i>PackageInstallation</i></b>)))",
            "pt": "((O FLin_<b><i>PackageInstallation</i></b>) -> (! ((! <b><i>(( indicationLight = orange ))</i></b>) S ((! <b><i>(( indicationLight = orange ))</i></b>) & FLin_<b><i>PackageInstallation</i></b>))))",
            "ftExpanded": "(((! ((<b><i>PackageInstallation</i></b> & (! LAST)) & (X (! <b><i>PackageInstallation</i></b>)))) U (((<b><i>PackageInstallation</i></b> & (! LAST)) & (X (! <b><i>PackageInstallation</i></b>))) & (X ((! LAST) U <b><i>(( indicationLight = orange ))</i></b>)))) | (G (! ((<b><i>PackageInstallation</i></b> & (! LAST)) & (X (! <b><i>PackageInstallation</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>PackageInstallation</i></b>) & (Y <b><i>PackageInstallation</i></b>)) & (Y (H (! ((! <b><i>PackageInstallation</i></b>) & (Y <b><i>PackageInstallation</i></b>))))))) -> (! ((! <b><i>(( indicationLight = orange ))</i></b>) S ((! <b><i>(( indicationLight = orange ))</i></b>) & (((! <b><i>PackageInstallation</i></b>) & (Y <b><i>PackageInstallation</i></b>)) & (Y (H (! ((! <b><i>PackageInstallation</i></b>) & (Y <b><i>PackageInstallation</i></b>))))))))))",
            "component": "<b><i>system</i></b>",
            "CoCoSpecCode": "((O((( not PackageInstallation) and (pre (PackageInstallation))) and pre (H( not (( not PackageInstallation) and (pre (PackageInstallation))))))) -> ( not (SI( ((( not PackageInstallation) and (pre (PackageInstallation))) and pre (H( not (( not PackageInstallation) and (pre (PackageInstallation)))))), ( not (( indicationLight = orange ))) ))))",
            "diagramVariables": "M = <b><i>PackageInstallation</i></b>, Response = <b><i>(( indicationLight = orange ))</i></b>.",
            "description": "At some future point, the component \"<b><i>system</i></b>\" shall satisfy <b><i>(( indicationLight = orange ))</i></b>. This is only enforced strictly after the first occurence of <b><i>PackageInstallation</i></b> (if <b><i>PackageInstallation</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_eventually_satisfaction.svg"
        },
        "_id": "0fa04280-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-AFTER-MODE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "only after initialization shall the sw satisfy ready",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyAfter",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "ready"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                24
            ],
            "component_name": "sw",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(ready)",
            "responseTextRange": [
                39,
                51
            ],
            "ft": "((FLin_<b><i>initialization</i></b> | LAST) V (! <b><i>(ready)</i></b>))",
            "pt": "((H ((FLin_<b><i>initialization</i></b> & (! FTP)) -> (Y (H (! <b><i>(ready)</i></b>))))) & ((H (! FLin_<b><i>initialization</i></b>)) -> (H (! <b><i>(ready)</i></b>))))",
            "ftExpanded": "((((<b><i>initialization</i></b> & (! LAST)) & (X (! <b><i>initialization</i></b>))) | LAST) V (! <b><i>(ready)</i></b>))",
            "ptExpanded": "((H (((((! <b><i>initialization</i></b>) & (Y <b><i>initialization</i></b>)) & (Y (H (! ((! <b><i>initialization</i></b>) & (Y <b><i>initialization</i></b>)))))) & (Y TRUE)) -> (Y (H (! <b><i>(ready)</i></b>))))) & ((H (! (((! <b><i>initialization</i></b>) & (Y <b><i>initialization</i></b>)) & (Y (H (! ((! <b><i>initialization</i></b>) & (Y <b><i>initialization</i></b>)))))))) -> (H (! <b><i>(ready)</i></b>))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H((((( not initialization) and (pre (initialization))) and pre (H( not (( not initialization) and (pre (initialization)))))) and ( not FTP)) => (pre (H( not (ready)))))) and ((H( not ((( not initialization) and (pre (initialization))) and pre (H( not (( not initialization) and (pre (initialization)))))))) => (H( not (ready)))))",
            "diagramVariables": "M = <b><i>initialization</i></b>, Response = <b><i>(ready)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and including) the first interval where <b><i>initialization</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyAfter_null_null_satisfaction.svg"
        },
        "_id": "0fa06990-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-IF-THEN-LM",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "In roll_hold mode RollAutopilot shall immediately satisfy if (roll_angle  < 6.0 & roll_angle > -6.0) then roll_hold_reference = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                130
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "(H (Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "(H ((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0fa0dec0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-CONDITION-UNLESS2",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "unless p and unless q, the sw shall  satisfy r",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "regular_condition": "! (p) & ! (q)",
            "qualifier_word": "unless",
            "pre_condition": "q",
            "component_name": "sw",
            "post_condition": "r",
            "ltlTemplate": "G ($regular_condition$ -> $post_condition$)",
            "ltlFormula": "G (<b><i>! (p) & ! (q)</i></b> -> <b><i>r</i></b>)",
            "ltlDescription": "If the condition <b><i>! (p) & ! (q)</i></b> holds,  component <b><i>sw</i></b> shall  satisfy <b><i>r</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "unless p and unless q",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy r"
        },
        "_id": "0fa105d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-D",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "while flight_mode = 3 the sw shall at the next timepoint satisfy flight_mode = 4",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flight_mode"
                ],
                "modes": []
            },
            "scope_mode": "(flight_mode = 3)",
            "scopeTextRange": [
                0,
                20
            ],
            "component_name": "sw",
            "componentTextRange": [
                22,
                27
            ],
            "timingTextRange": [
                35,
                55
            ],
            "post_condition": "(flight_mode = 4)",
            "responseTextRange": [
                57,
                79
            ],
            "ft": "((LAST V ((! (Fin_<b><i>(flight_mode = 3)</i></b> & (! LAST))) | (X ((Lin_<b><i>(flight_mode = 3)</i></b> | LAST) | ((X <b><i>(flight_mode = 4)</i></b>) & (! (Lin_<b><i>(flight_mode = 3)</i></b> | LAST))))))) & (<b><i>(flight_mode = 3)</i></b> -> ((Lin_<b><i>(flight_mode = 3)</i></b> | LAST) | ((X <b><i>(flight_mode = 4)</i></b>) & (! (Lin_<b><i>(flight_mode = 3)</i></b> | LAST))))))",
            "pt": "((H ((Lin_<b><i>(flight_mode = 3)</i></b> & (! FTP)) -> (Y (((Y Fin_<b><i>(flight_mode = 3)</i></b>) -> <b><i>(flight_mode = 4)</i></b>) S (((Y Fin_<b><i>(flight_mode = 3)</i></b>) -> <b><i>(flight_mode = 4)</i></b>) & Fin_<b><i>(flight_mode = 3)</i></b>))))) & (((! Lin_<b><i>(flight_mode = 3)</i></b>) S ((! Lin_<b><i>(flight_mode = 3)</i></b>) & Fin_<b><i>(flight_mode = 3)</i></b>)) -> (((Y Fin_<b><i>(flight_mode = 3)</i></b>) -> <b><i>(flight_mode = 4)</i></b>) S (((Y Fin_<b><i>(flight_mode = 3)</i></b>) -> <b><i>(flight_mode = 4)</i></b>) & Fin_<b><i>(flight_mode = 3)</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>(flight_mode = 3)</i></b>) & (! LAST)) & (X <b><i>(flight_mode = 3)</i></b>)) & (! LAST))) | (X ((((<b><i>(flight_mode = 3)</i></b> & (! LAST)) & (X (! <b><i>(flight_mode = 3)</i></b>))) | LAST) | ((X <b><i>(flight_mode = 4)</i></b>) & (! (((<b><i>(flight_mode = 3)</i></b> & (! LAST)) & (X (! <b><i>(flight_mode = 3)</i></b>))) | LAST))))))) & (<b><i>(flight_mode = 3)</i></b> -> ((((<b><i>(flight_mode = 3)</i></b> & (! LAST)) & (X (! <b><i>(flight_mode = 3)</i></b>))) | LAST) | ((X <b><i>(flight_mode = 4)</i></b>) & (! (((<b><i>(flight_mode = 3)</i></b> & (! LAST)) & (X (! <b><i>(flight_mode = 3)</i></b>))) | LAST))))))",
            "ptExpanded": "((H ((((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)) & (Y TRUE)) -> (Y (((Y (<b><i>(flight_mode = 3)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flight_mode = 3)</i></b>))))) -> <b><i>(flight_mode = 4)</i></b>) S (((Y (<b><i>(flight_mode = 3)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flight_mode = 3)</i></b>))))) -> <b><i>(flight_mode = 4)</i></b>) & (<b><i>(flight_mode = 3)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flight_mode = 3)</i></b>))))))))) & (((! ((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>))) S ((! ((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>))) & (<b><i>(flight_mode = 3)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flight_mode = 3)</i></b>)))))) -> (((Y (<b><i>(flight_mode = 3)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flight_mode = 3)</i></b>))))) -> <b><i>(flight_mode = 4)</i></b>) S (((Y (<b><i>(flight_mode = 3)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flight_mode = 3)</i></b>))))) -> <b><i>(flight_mode = 4)</i></b>) & (<b><i>(flight_mode = 3)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flight_mode = 3)</i></b>))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((( not (flight_mode = 3)) and (pre ((flight_mode = 3)))) and ( not FTP)) => (pre (SI( ((flight_mode = 3) and (FTP or (pre ( not (flight_mode = 3))))), ((pre ((flight_mode = 3) and (FTP or (pre ( not (flight_mode = 3)))))) => (flight_mode = 4)) ))))) and ((SI( ((flight_mode = 3) and (FTP or (pre ( not (flight_mode = 3))))), ( not (( not (flight_mode = 3)) and (pre ((flight_mode = 3))))) )) => (SI( ((flight_mode = 3) and (FTP or (pre ( not (flight_mode = 3))))), ((pre ((flight_mode = 3) and (FTP or (pre ( not (flight_mode = 3)))))) => (flight_mode = 4)) ))))",
            "diagramVariables": "M = <b><i>(flight_mode = 3)</i></b>, Response = <b><i>(flight_mode = 4)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(flight_mode = 3)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg"
        },
        "_id": "0fa153f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-EVENTUALLY",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "after M the sw shall eventually satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                6
            ],
            "component_name": "sw",
            "componentTextRange": [
                8,
                13
            ],
            "timingTextRange": [
                21,
                30
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                32,
                40
            ],
            "ft": "(((! FLin_<b><i>M</i></b>) U (FLin_<b><i>M</i></b> & (X ((! LAST) U <b><i>(R)</i></b>)))) | (LAST V (! FLin_<b><i>M</i></b>)))",
            "pt": "((O FLin_<b><i>M</i></b>) -> (! ((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & FLin_<b><i>M</i></b>))))",
            "ftExpanded": "(((! ((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>)))) U (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) & (X ((! LAST) U <b><i>(R)</i></b>)))) | (LAST V (! ((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))))))) -> (! ((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((O((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M))))))) => ( not (SI( ((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M)))))), ( not (R)) ))))",
            "diagramVariables": "M = <b><i>M</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>M</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_eventually_satisfaction.svg"
        },
        "_id": "0fa1a210-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-UNTIL-1",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "The sw shall, until CountDown = 0, satisfy CountDown > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "CountDown"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "stop_condition": "(CountDown = 0)",
            "timingTextRange": [
                12,
                33
            ],
            "post_condition": "(CountDown > 0)",
            "responseTextRange": [
                35,
                55
            ],
            "ft": "((<b><i>(CountDown = 0)</i></b> V (<b><i>(CountDown > 0)</i></b> | <b><i>(CountDown = 0)</i></b>)) | (LAST V <b><i>(CountDown > 0)</i></b>))",
            "pt": "(H ((H (! <b><i>(CountDown = 0)</i></b>)) -> <b><i>(CountDown > 0)</i></b>))",
            "ftExpanded": "((<b><i>(CountDown = 0)</i></b> V (<b><i>(CountDown > 0)</i></b> | <b><i>(CountDown = 0)</i></b>)) | (LAST V <b><i>(CountDown > 0)</i></b>))",
            "ptExpanded": "(H ((H (! <b><i>(CountDown = 0)</i></b>)) -> <b><i>(CountDown > 0)</i></b>))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((H( not (CountDown = 0))) => (CountDown > 0)))",
            "diagramVariables": "Response = <b><i>(CountDown > 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "Undefined svg."
        },
        "_id": "0fa1f030-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN-2",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "when RESET &  BL <= IC and IC <= TL the tustin_integrator shall  satisfy YOUT = IC",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "regular_condition": "RESET & BL <= IC&IC <= TL",
            "qualifier_word": "when",
            "pre_condition": "IC <= TL",
            "qualifier_word_optional": "",
            "component_name": "tustin_integrator",
            "post_condition": "YOUT = IC",
            "ltlTemplate": "G ($regular_condition$ -> $post_condition$)",
            "ltlFormula": "G (<b><i>RESET & BL <= IC&IC <= TL</i></b> -> <b><i>YOUT = IC</i></b>)",
            "ltlDescription": "If the condition <b><i>RESET & BL <= IC&IC <= TL</i></b> holds,  component <b><i>tustin_integrator</i></b> shall  satisfy <b><i>YOUT = IC</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when RESET &  BL <= IC and IC <= TL",
            "componentField": "the tustin_integrator",
            "timingField": "",
            "responsesField": "satisfy YOUT = IC"
        },
        "_id": "0fa23e50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003b",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "The roll hold reference shall be set to zero if the actual roll angle is less than 6 degrees, at the time of roll hold engagement.",
        "fulltext": "In rollhold mode RollHoldReference shall immediately satisfy abs(rollangle)<6 => rollholdreference=0",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs",
                    "rollangle",
                    "rollholdreference"
                ],
                "modes": [
                    "rollhold"
                ]
            },
            "scope_mode": "rollhold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollHoldReference",
            "componentTextRange": [
                17,
                33
            ],
            "timingTextRange": [
                41,
                51
            ],
            "post_condition": "(abs ( rollangle ) < 6 => rollholdreference = 0)",
            "responseTextRange": [
                53,
                99
            ],
            "ft": "(G ((!Fin_<b><i>rollhold</i></b>) | (Fin_<b><i>rollhold</i></b> & (X ((F (Lin_<b><i>rollhold</i></b> | LAST)) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>))))) & (<b><i>rollhold</i></b> -> ((F (Lin_<b><i>rollhold</i></b> | LAST)) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>))",
            "pt": "(H ((Lin_<b><i>rollhold</i></b> & (!FTP)) -> (Y ((Fin_<b><i>rollhold</i></b> -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) S ((Fin_<b><i>rollhold</i></b> -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) & Fin_<b><i>rollhold</i></b>))))) & (((!Lin_<b><i>rollhold</i></b>) S ((!Lin_<b><i>rollhold</i></b>) & Fin_<b><i>rollhold</i></b>)) -> ((Fin_<b><i>rollhold</i></b> -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) S ((Fin_<b><i>rollhold</i></b> -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) & Fin_<b><i>rollhold</i></b>)))",
            "ftExpanded": "(G ((!((! <b><i>rollhold</i></b>) & X <b><i>rollhold</i></b>)) | (((! <b><i>rollhold</i></b>) & X <b><i>rollhold</i></b>) & (X ((F ((<b><i>rollhold</i></b> & X (! <b><i>rollhold</i></b>)) | LAST)) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>))))) & (<b><i>rollhold</i></b> -> ((F ((<b><i>rollhold</i></b> & X (! <b><i>rollhold</i></b>)) | LAST)) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>))",
            "ptExpanded": "(H ((((! <b><i>rollhold</i></b>) & (Y <b><i>rollhold</i></b>)) & (!(! Y TRUE))) -> (Y (((<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) S (((<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) & (<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>)))))))) & (((!((! <b><i>rollhold</i></b>) & (Y <b><i>rollhold</i></b>))) S ((!((! <b><i>rollhold</i></b>) & (Y <b><i>rollhold</i></b>))) & (<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))))) -> (((<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) S (((<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) & (<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))))))",
            "component": "<b><i>RollHoldReference</i></b>",
            "CoCoSpecCode": "(H(((( not rollhold) and (pre ( rollhold ))) and ( not FTP())) -> (pre (S( (((rollhold and (FTP() or (pre (  not rollhold )))) -> (abs ( rollangle ) < 6 -> rollholdreference = 0)) and (rollhold and (FTP() or (pre (  not rollhold ))))), ((rollhold and (FTP() or (pre (  not rollhold )))) -> (abs ( rollangle ) < 6 -> rollholdreference = 0)) ))))) and ((S( (( not (( not rollhold) and (pre ( rollhold )))) and (rollhold and (FTP() or (pre (  not rollhold ))))), ( not (( not rollhold) and (pre ( rollhold )))) )) -> (S( (((rollhold and (FTP() or (pre (  not rollhold )))) -> (abs ( rollangle ) < 6 -> rollholdreference = 0)) and (rollhold and (FTP() or (pre (  not rollhold ))))), ((rollhold and (FTP() or (pre (  not rollhold )))) -> (abs ( rollangle ) < 6 -> rollholdreference = 0)) )))",
            "diagramVariables": "M = <b><i>rollhold</i></b>, Response = <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollHoldReference</i></b>\" shall satisfy <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>. This is only enforced when \"<b><i>RollHoldReference</i></b>\" is in mode <b><i>rollhold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0fa28c70-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-FIRE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "if persisted(3,temp>high_limit) & occurred(3,spark) the sw shall immediately satisfy alarm_sounded",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "persisted",
                    "temp",
                    "high_limit",
                    "occurred",
                    "spark",
                    "alarm_sounded"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(persisted ( 3 , temp > high_limit ) & occurred ( 3 , spark ))",
            "regular_condition": "(persisted ( 3 , temp > high_limit ) & occurred ( 3 , spark ))",
            "conditionTextRange": [
                0,
                50
            ],
            "component_name": "sw",
            "componentTextRange": [
                52,
                57
            ],
            "timingTextRange": [
                65,
                75
            ],
            "post_condition": "(alarm_sounded)",
            "responseTextRange": [
                77,
                97
            ],
            "diagramVariables": "TC = <b><i>(persisted ( 3 , temp > high_limit ) & occurred ( 3 , spark ))</i></b>, Response = <b><i>(alarm_sounded)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(persisted ( 3 , temp > high_limit ) & occurred ( 3 , spark ))</i></b> is true and any point in the interval where <b><i>(persisted ( 3 , temp > high_limit ) & occurred ( 3 , spark ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "regular_condition_unexp_pt": "(((H[<=3] (temp > high_limit)) & (H[<3] (! FTP))) & (((! FTP) S spark) & (O[<=3] spark)))",
            "regular_condition_unexp_ft": "(persisted(3,(temp > high_limit)) & occurred(3,spark))",
            "regular_condition_SMV_pt": "(((H[<=3] (temp > high_limit)) & (H[<3] (! (!(Y TRUE))))) & (((! (!(Y TRUE))) S spark) & (O[<=3] spark)))",
            "regular_condition_SMV_ft": "(persisted(3,(temp > high_limit)) & occurred(3,spark))",
            "regular_condition_coco": "(((HT(3,0,(temp>high_limit))) and (HT(2,0,( not FTP)))) and ((S( spark, ( not FTP) )) and (OT(3,0,spark))))",
            "post_condition_unexp_pt": "alarm_sounded",
            "post_condition_unexp_ft": "alarm_sounded",
            "post_condition_SMV_pt": "alarm_sounded",
            "post_condition_SMV_ft": "alarm_sounded",
            "post_condition_coco": "alarm_sounded",
            "ft": "((LAST V (((! <b><i>(persisted(3,(temp > high_limit)) & occurred(3,spark))</i></b>) & ((! LAST) & (X <b><i>(persisted(3,(temp > high_limit)) & occurred(3,spark))</i></b>))) -> (X <b><i>alarm_sounded</i></b>))) & (<b><i>(persisted(3,(temp > high_limit)) & occurred(3,spark))</i></b> -> <b><i>alarm_sounded</i></b>))",
            "pt": "(H ((<b><i>(((H[<=3] (temp > high_limit)) & (H[<3] (! FTP))) & (((! FTP) S spark) & (O[<=3] spark)))</i></b> & ((Y (! <b><i>(((H[<=3] (temp > high_limit)) & (H[<3] (! FTP))) & (((! FTP) S spark) & (O[<=3] spark)))</i></b>)) | FTP)) -> <b><i>alarm_sounded</i></b>))",
            "ptExpanded": "(H (((((H[<=3] (temp > high_limit)) & (H[<3] (! (!(Y TRUE))))) & (((! (!(Y TRUE))) S spark) & (O[<=3] spark))) & ((Y (! (((H[<=3] (temp > high_limit)) & (H[<3] (! (!(Y TRUE))))) & (((! (!(Y TRUE))) S spark) & (O[<=3] spark))))) | (! (Y TRUE)))) -> alarm_sounded))",
            "ftExpanded": "((LAST V (((! (persisted(3,(temp > high_limit)) & occurred(3,spark))) & ((! LAST) & (X (persisted(3,(temp > high_limit)) & occurred(3,spark))))) -> (X alarm_sounded))) & ((persisted(3,(temp > high_limit)) & occurred(3,spark)) -> alarm_sounded))",
            "CoCoSpecCode": "(H(((((HT(3,0,(temp>high_limit))) and (HT(2,0,( not FTP)))) and ((S( spark, ( not FTP) )) and (OT(3,0,spark)))) and ((pre ( not (((HT(3,0,(temp>high_limit))) and (HT(2,0,( not FTP)))) and ((S( spark, ( not FTP) )) and (OT(3,0,spark)))))) or FTP)) => alarm_sounded))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0fa2da90-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-WITHIN",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in M mode when P the sw shall within 3 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P",
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                8
            ],
            "regular_condition": "(P)",
            "qualifier_word": "when",
            "pre_condition": "(P)",
            "conditionTextRange": [
                10,
                15
            ],
            "component_name": "sw",
            "componentTextRange": [
                17,
                22
            ],
            "duration": [
                "3"
            ],
            "timingTextRange": [
                30,
                43
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                45,
                53
            ],
            "ft": "((LAST V ((! (Fin_<b><i>M</i></b> & (! LAST))) | (X (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(P)</i></b>) & ((! LAST) & ((X <b><i>(P)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))))))) & (<b><i>M</i></b> -> (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(P)</i></b>) & ((! LAST) & ((X <b><i>(P)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))))))",
            "pt": "((H ((Lin_<b><i>M</i></b> & (! FTP)) -> (Y (((O[=<b><i>3</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_<b><i>M</i></b> | <b><i>(R)</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_<b><i>M</i></b> | <b><i>(R)</i></b>))) & Fin_<b><i>M</i></b>))))) & (((! Lin_<b><i>M</i></b>) S ((! Lin_<b><i>M</i></b>) & Fin_<b><i>M</i></b>)) -> (((O[=<b><i>3</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_<b><i>M</i></b> | <b><i>(R)</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_<b><i>M</i></b> | <b><i>(R)</i></b>))) & Fin_<b><i>M</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) & (! LAST))) | (X (((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (((! <b><i>(P)</i></b>) & ((! LAST) & ((X <b><i>(P)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))))))) & (<b><i>M</i></b> -> (((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (((! <b><i>(P)</i></b>) & ((! LAST) & ((X <b><i>(P)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))))))",
            "ptExpanded": "((H ((((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y TRUE)) -> (Y (((O[=<b><i>3</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(R)</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(R)</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))) & (((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) S ((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (((O[=<b><i>3</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(R)</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(R)</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((( not M) and (pre (M))) and ( not FTP)) => (pre (SI( (M and (FTP or (pre ( not M)))), ((OT(3,3,( ( (P) and ( ( Y ( not (P) ) ) or ( M and ( FTP or ( Y not M ) ) ) ) ) and ( not (R) ) ))) => (OT(3-1,0,( ( M and ( FTP or ( Y not M ) ) ) or (R) )))) ))))) and ((SI( (M and (FTP or (pre ( not M)))), ( not (( not M) and (pre (M)))) )) => (SI( (M and (FTP or (pre ( not M)))), ((OT(3,3,( ( (P) and ( ( Y ( not (P) ) ) or ( M and ( FTP or ( Y not M ) ) ) ) ) and ( not (R) ) ))) => (OT(3-1,0,( ( M and ( FTP or ( Y not M ) ) ) or (R) )))) ))))",
            "diagramVariables": "M = <b><i>M</i></b>, TC = <b><i>(P)</i></b>,  n = <b><i>3</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(P)</i></b> is true and any point in the interval where <b><i>(P)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3</i></b>). If the interval ends sooner than trigger+<b><i>3</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_within_satisfaction.svg"
        },
        "_id": "0fa328b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REQT-WITHIN",
        "parent_reqid": "",
        "project": "TEST-REALIZABILITY",
        "rationale": "",
        "comments": "",
        "fulltext": "if Q the sw shall within 3 ticks satisfy !r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Q",
                    "r"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(Q)",
            "regular_condition": "(Q)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "sw",
            "componentTextRange": [
                5,
                10
            ],
            "duration": [
                "3"
            ],
            "timingTextRange": [
                18,
                31
            ],
            "post_condition": "(! r)",
            "responseTextRange": [
                33,
                42
            ],
            "ft": "((LAST V (((! <b><i>(Q)</i></b>) & ((! LAST) & (X <b><i>(Q)</i></b>))) -> (X ((F[<=<b><i>3</i></b>] <b><i>(! r)</i></b>) | (F[<<b><i>3</i></b>] LAST))))) & (<b><i>(Q)</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(! r)</i></b>) | (F[<<b><i>3</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>3</i></b>] ((<b><i>(Q)</i></b> & ((Y (! <b><i>(Q)</i></b>)) | FTP)) & (! <b><i>(! r)</i></b>))) -> (O[<<b><i>3</i></b>] (FTP | <b><i>(! r)</i></b>))))",
            "ftExpanded": "((LAST V (((! <b><i>(Q)</i></b>) & ((! LAST) & (X <b><i>(Q)</i></b>))) -> (X ((F[<=<b><i>3</i></b>] <b><i>(! r)</i></b>) | (F[<<b><i>3</i></b>] LAST))))) & (<b><i>(Q)</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(! r)</i></b>) | (F[<<b><i>3</i></b>] LAST))))",
            "ptExpanded": "(H ((O[=<b><i>3</i></b>] ((<b><i>(Q)</i></b> & ((Y (! <b><i>(Q)</i></b>)) | (! (Y TRUE)))) & (! <b><i>(! r)</i></b>))) -> (O[<<b><i>3</i></b>] ((! (Y TRUE)) | <b><i>(! r)</i></b>))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((OT(3,3,(((Q) and ((pre ( not (Q))) or FTP)) and ( not (not r))))) => (OT(3-1,0,(FTP or (not r))))))",
            "diagramVariables": "TC = <b><i>(Q)</i></b>,  n = <b><i>3</i></b>, Response = <b><i>(! r)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(Q)</i></b> is true and any point in the interval where <b><i>(Q)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3</i></b>). If the interval ends sooner than trigger+<b><i>3</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg"
        },
        "_id": "0fa34fc0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-005",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when liquid_level_2 the liquid_mixer shall at the next timepoint satisfy timer_60sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "timer_60sec_start"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "liquid_level_2",
            "regular_condition": "liquid_level_2",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                63
            ],
            "post_condition": "(timer_60sec_start)",
            "responseTextRange": [
                65,
                89
            ],
            "regular_condition_coco": "liquid_level_2",
            "ft": "((LAST V (((! <b><i>liquid_level_2</i></b>) & ((! LAST) & (X <b><i>liquid_level_2</i></b>))) -> (X (LAST | (X <b><i>(timer_60sec_start)</i></b>))))) & (<b><i>liquid_level_2</i></b> -> (LAST | (X <b><i>(timer_60sec_start)</i></b>))))",
            "pt": "(H ((Y (<b><i>liquid_level_2</i></b> & ((Y (! <b><i>liquid_level_2</i></b>)) | FTP))) -> (<b><i>(timer_60sec_start)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>liquid_level_2</i></b>) & ((! LAST) & (X <b><i>liquid_level_2</i></b>))) -> (X (LAST | (X <b><i>(timer_60sec_start)</i></b>))))) & (<b><i>liquid_level_2</i></b> -> (LAST | (X <b><i>(timer_60sec_start)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>liquid_level_2</i></b> & ((Y (! <b><i>liquid_level_2</i></b>)) | (! (Y TRUE))))) -> (<b><i>(timer_60sec_start)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre (liquid_level_2 and ((pre ( not liquid_level_2)) or FTP))) => ((timer_60sec_start) or FTP)))",
            "diagramVariables": "TC = <b><i>liquid_level_2</i></b>, Response = <b><i>(timer_60sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>liquid_level_2</i></b> is true and any point in the interval where <b><i>liquid_level_2</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fa39de0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-BEFORE-REGULAR-AFTER",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "before M when P the sw shall after 2 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P",
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                7
            ],
            "regular_condition": "(P)",
            "qualifier_word": "when",
            "pre_condition": "(P)",
            "conditionTextRange": [
                9,
                14
            ],
            "component_name": "sw",
            "componentTextRange": [
                16,
                21
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                29,
                41
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                43,
                51
            ],
            "ft": "No meaning assigned.",
            "pt": "No meaning assigned.",
            "ftExpanded": "No meaning assigned.",
            "ptExpanded": "No meaning assigned.",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "No meaning assigned.",
            "diagramVariables": "M = <b><i>M</i></b>, TC = <b><i>(P)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "Unclear requirement. We are not sure how to interpret this requirement.",
            "diagram": "Undefined svg."
        },
        "_id": "0fa3c4f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-MODE-VAR",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "after flight_mode = 3, the sw shall within 2 ticks satisfy p",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flight_mode",
                    "p"
                ],
                "modes": []
            },
            "scope_mode": "(flight_mode = 3)",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "sw",
            "componentTextRange": [
                23,
                28
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                36,
                49
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                51,
                59
            ],
            "ft": "(((! FLin_<b><i>(flight_mode = 3)</i></b>) U (FLin_<b><i>(flight_mode = 3)</i></b> & (X ((F[<=<b><i>2</i></b>] <b><i>(p)</i></b>) | (F[<<b><i>2</i></b>] LAST))))) | (LAST V (! FLin_<b><i>(flight_mode = 3)</i></b>)))",
            "pt": "((O FLin_<b><i>(flight_mode = 3)</i></b>) -> ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & FLin_<b><i>(flight_mode = 3)</i></b>)) -> (O[<<b><i>2</i></b>] FLin_<b><i>(flight_mode = 3)</i></b>)) S ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & FLin_<b><i>(flight_mode = 3)</i></b>)) -> (O[<<b><i>2</i></b>] FLin_<b><i>(flight_mode = 3)</i></b>)) & FLin_<b><i>(flight_mode = 3)</i></b>)))",
            "ftExpanded": "(((! ((<b><i>(flight_mode = 3)</i></b> & (! LAST)) & (X (! <b><i>(flight_mode = 3)</i></b>)))) U (((<b><i>(flight_mode = 3)</i></b> & (! LAST)) & (X (! <b><i>(flight_mode = 3)</i></b>))) & (X ((F[<=<b><i>2</i></b>] <b><i>(p)</i></b>) | (F[<<b><i>2</i></b>] LAST))))) | (LAST V (! ((<b><i>(flight_mode = 3)</i></b> & (! LAST)) & (X (! <b><i>(flight_mode = 3)</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)) & (Y (H (! ((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>))))))) -> ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & (((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)) & (Y (H (! ((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)))))))) -> (O[<<b><i>2</i></b>] (((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)) & (Y (H (! ((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)))))))) S ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & (((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)) & (Y (H (! ((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)))))))) -> (O[<<b><i>2</i></b>] (((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)) & (Y (H (! ((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)))))))) & (((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)) & (Y (H (! ((! <b><i>(flight_mode = 3)</i></b>) & (Y <b><i>(flight_mode = 3)</i></b>)))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((O((( not (flight_mode = 3)) and (pre ((flight_mode = 3)))) and pre (H( not (( not (flight_mode = 3)) and (pre ((flight_mode = 3)))))))) => (SI( ((( not (flight_mode = 3)) and (pre ((flight_mode = 3)))) and pre (H( not (( not (flight_mode = 3)) and (pre ((flight_mode = 3))))))), ((SI( ((( not (flight_mode = 3)) and (pre ((flight_mode = 3)))) and pre (H( not (( not (flight_mode = 3)) and (pre ((flight_mode = 3))))))), ( not (p)) )) => (OT(2-1,0,( ( ( not (flight_mode = 3) ) and ( Y (flight_mode = 3) ) ) and Y ( H ( not ( ( not (flight_mode = 3) ) and ( Y (flight_mode = 3) ) ) ) ) )))) )))",
            "diagramVariables": "M = <b><i>(flight_mode = 3)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>(flight_mode = 3)</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2</i></b>). If the interval ends sooner than trigger+<b><i>2</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_within_satisfaction.svg"
        },
        "_id": "0fa41310-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-COND-FOR",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when p the sw shall for 2 ticks satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "r"
                ],
                "modes": []
            },
            "regular_condition": "(p)",
            "qualifier_word": "when",
            "pre_condition": "(p)",
            "conditionTextRange": [
                0,
                5
            ],
            "component_name": "sw",
            "componentTextRange": [
                7,
                12
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                20,
                30
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                32,
                40
            ],
            "ft": "((LAST V (((! <b><i>(p)</i></b>) & ((! LAST) & (X <b><i>(p)</i></b>))) -> (X ((G[<=<b><i>2</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))))) & (<b><i>(p)</i></b> -> ((G[<=<b><i>2</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))))",
            "pt": "(H ((O[<=<b><i>2</i></b>] (<b><i>(p)</i></b> & ((Y (! <b><i>(p)</i></b>)) | FTP))) -> ((H (! <b><i>(p)</i></b>)) | <b><i>(r)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(p)</i></b>) & ((! LAST) & (X <b><i>(p)</i></b>))) -> (X ((G[<=<b><i>2</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))))) & (<b><i>(p)</i></b> -> ((G[<=<b><i>2</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))))",
            "ptExpanded": "(H ((O[<=<b><i>2</i></b>] (<b><i>(p)</i></b> & ((Y (! <b><i>(p)</i></b>)) | (! (Y TRUE))))) -> ((H (! <b><i>(p)</i></b>)) | <b><i>(r)</i></b>)))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((OT(2,0,( (p) and ( ( Y ( not (p) ) ) or FTP ) ))) => ((H( not (p))) or (r))))",
            "diagramVariables": "TC = <b><i>(p)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(p)</i></b> is true and any point in the interval where <b><i>(p)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true for <b><i>2</i></b> time points starting at the trigger, or to the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg"
        },
        "_id": "0fa48840-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-EXCEPT-MODE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "except if in mode M the sw shall satisfy x^2 >= 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "notin"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                18
            ],
            "component_name": "sw",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(x ^ 2 >= 0)",
            "responseTextRange": [
                33,
                48
            ],
            "ft": "((LAST V ((! (FNin_<b><i>M</i></b> & (! LAST))) | (X ((! (LNin_<b><i>M</i></b> | LAST)) U <b><i>(x ^ 2 >= 0)</i></b>)))) & ((! <b><i>M</i></b>) -> ((! (LNin_<b><i>M</i></b> | LAST)) U <b><i>(x ^ 2 >= 0)</i></b>)))",
            "pt": "((H ((LNin_<b><i>M</i></b> & (! FTP)) -> (Y (! ((! <b><i>(x ^ 2 >= 0)</i></b>) S ((! <b><i>(x ^ 2 >= 0)</i></b>) & FNin_<b><i>M</i></b>)))))) & (((! LNin_<b><i>M</i></b>) S ((! LNin_<b><i>M</i></b>) & FNin_<b><i>M</i></b>)) -> (! ((! <b><i>(x ^ 2 >= 0)</i></b>) S ((! <b><i>(x ^ 2 >= 0)</i></b>) & FNin_<b><i>M</i></b>)))))",
            "ftExpanded": "((LAST V ((! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) & (! LAST))) | (X ((! ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) | LAST)) U <b><i>(x ^ 2 >= 0)</i></b>)))) & ((! <b><i>M</i></b>) -> ((! ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) | LAST)) U <b><i>(x ^ 2 >= 0)</i></b>)))",
            "ptExpanded": "((H (((<b><i>M</i></b> & (Y (! <b><i>M</i></b>))) & (Y TRUE)) -> (Y (! ((! <b><i>(x ^ 2 >= 0)</i></b>) S ((! <b><i>(x ^ 2 >= 0)</i></b>) & ((! <b><i>M</i></b>) & ((! (Y TRUE)) | (Y <b><i>M</i></b>))))))))) & (((! (<b><i>M</i></b> & (Y (! <b><i>M</i></b>)))) S ((! (<b><i>M</i></b> & (Y (! <b><i>M</i></b>)))) & ((! <b><i>M</i></b>) & ((! (Y TRUE)) | (Y <b><i>M</i></b>))))) -> (! ((! <b><i>(x ^ 2 >= 0)</i></b>) S ((! <b><i>(x ^ 2 >= 0)</i></b>) & ((! <b><i>M</i></b>) & ((! (Y TRUE)) | (Y <b><i>M</i></b>))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((M and (pre ( not M))) and ( not FTP)) => (pre ( not (SI( (( not M) and (FTP or (pre (M)))), ( not (x ^ 2 >= 0)) )))))) and ((SI( (( not M) and (FTP or (pre (M)))), ( not (M and (pre ( not M)))) )) => ( not (SI( (( not M) and (FTP or (pre (M)))), ( not (x ^ 2 >= 0)) )))))",
            "diagramVariables": "M = <b><i>M</i></b>, Response = <b><i>(x ^ 2 >= 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> does NOT hold.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/notin_null_null_satisfaction.svg"
        },
        "_id": "0fa4af50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-EXCEPT-WHILE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "except while flight_mode = landed the sw shall  satisfy alt > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "notin"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flight_mode",
                    "landed",
                    "alt"
                ],
                "modes": []
            },
            "scope_mode": "(flight_mode = landed)",
            "scopeTextRange": [
                0,
                32
            ],
            "component_name": "sw",
            "componentTextRange": [
                34,
                39
            ],
            "post_condition": "(alt > 0)",
            "responseTextRange": [
                48,
                62
            ],
            "ft": "((LAST V ((! (FNin_<b><i>(flight_mode = landed)</i></b> & (! LAST))) | (X ((! (LNin_<b><i>(flight_mode = landed)</i></b> | LAST)) U <b><i>(alt > 0)</i></b>)))) & ((! <b><i>(flight_mode = landed)</i></b>) -> ((! (LNin_<b><i>(flight_mode = landed)</i></b> | LAST)) U <b><i>(alt > 0)</i></b>)))",
            "pt": "((H ((LNin_<b><i>(flight_mode = landed)</i></b> & (! FTP)) -> (Y (! ((! <b><i>(alt > 0)</i></b>) S ((! <b><i>(alt > 0)</i></b>) & FNin_<b><i>(flight_mode = landed)</i></b>)))))) & (((! LNin_<b><i>(flight_mode = landed)</i></b>) S ((! LNin_<b><i>(flight_mode = landed)</i></b>) & FNin_<b><i>(flight_mode = landed)</i></b>)) -> (! ((! <b><i>(alt > 0)</i></b>) S ((! <b><i>(alt > 0)</i></b>) & FNin_<b><i>(flight_mode = landed)</i></b>)))))",
            "ftExpanded": "((LAST V ((! (((<b><i>(flight_mode = landed)</i></b> & (! LAST)) & (X (! <b><i>(flight_mode = landed)</i></b>))) & (! LAST))) | (X ((! ((((! <b><i>(flight_mode = landed)</i></b>) & (! LAST)) & (X <b><i>(flight_mode = landed)</i></b>)) | LAST)) U <b><i>(alt > 0)</i></b>)))) & ((! <b><i>(flight_mode = landed)</i></b>) -> ((! ((((! <b><i>(flight_mode = landed)</i></b>) & (! LAST)) & (X <b><i>(flight_mode = landed)</i></b>)) | LAST)) U <b><i>(alt > 0)</i></b>)))",
            "ptExpanded": "((H (((<b><i>(flight_mode = landed)</i></b> & (Y (! <b><i>(flight_mode = landed)</i></b>))) & (Y TRUE)) -> (Y (! ((! <b><i>(alt > 0)</i></b>) S ((! <b><i>(alt > 0)</i></b>) & ((! <b><i>(flight_mode = landed)</i></b>) & ((! (Y TRUE)) | (Y <b><i>(flight_mode = landed)</i></b>))))))))) & (((! (<b><i>(flight_mode = landed)</i></b> & (Y (! <b><i>(flight_mode = landed)</i></b>)))) S ((! (<b><i>(flight_mode = landed)</i></b> & (Y (! <b><i>(flight_mode = landed)</i></b>)))) & ((! <b><i>(flight_mode = landed)</i></b>) & ((! (Y TRUE)) | (Y <b><i>(flight_mode = landed)</i></b>))))) -> (! ((! <b><i>(alt > 0)</i></b>) S ((! <b><i>(alt > 0)</i></b>) & ((! <b><i>(flight_mode = landed)</i></b>) & ((! (Y TRUE)) | (Y <b><i>(flight_mode = landed)</i></b>))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H((((flight_mode = landed) and (pre ( not (flight_mode = landed)))) and ( not FTP)) => (pre ( not (SI( (( not (flight_mode = landed)) and (FTP or (pre ((flight_mode = landed))))), ( not (alt > 0)) )))))) and ((SI( (( not (flight_mode = landed)) and (FTP or (pre ((flight_mode = landed))))), ( not ((flight_mode = landed) and (pre ( not (flight_mode = landed))))) )) => ( not (SI( (( not (flight_mode = landed)) and (FTP or (pre ((flight_mode = landed))))), ( not (alt > 0)) )))))",
            "diagramVariables": "M = <b><i>(flight_mode = landed)</i></b>, Response = <b><i>(alt > 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(flight_mode = landed)</i></b> does NOT hold.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/notin_null_null_satisfaction.svg"
        },
        "_id": "0fa4fd70-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-STRICT",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "strictly after M mode, unless p, the sw shall always satisfy q",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": true,
                "required": false
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "scope_mode": "M",
            "regular_condition": "(!(p))",
            "qualifier_word": "unless",
            "pre_condition": "(p)",
            "component_name": "sw",
            "post_condition": "q",
            "ltlTemplate": "G ((!$scope_mode$) | ($scope_mode$ & (X ($regular_condition$ -> (G $post_condition$)))))",
            "ltlFormula": "G ((!<b><i>M</i></b>) | (<b><i>M</i></b> & (X (<b><i>(!(p))</i></b> -> (G <b><i>q</i></b>)))))",
            "ltlDescription": "If the condition <b><i>(!(p))</i></b> holds,  component <b><i>sw</i></b> shall , always thereafter,  satisfy <b><i>q</i></b>. \nNote that this requirement is only relevant and imposed after the first time that <b><i>sw</i></b> exits mode <b><i>M</i></b> for the first time."
        },
        "input": {
            "scopeField": "strictly after M mode",
            "conditionsField": "unless p",
            "componentField": "the sw",
            "timingField": "always",
            "responsesField": "satisfy q"
        },
        "_id": "0fa52480-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-WHILE-SCOPE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "while flt_mode = liftoff the sw shall satisfy (23 < x)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flt_mode",
                    "liftoff",
                    "x"
                ],
                "modes": []
            },
            "scope_mode": "(flt_mode = liftoff)",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "sw",
            "componentTextRange": [
                25,
                30
            ],
            "post_condition": "(( 23 < x ))",
            "responseTextRange": [
                38,
                53
            ],
            "ft": "((LAST V ((! (Fin_<b><i>(flt_mode = liftoff)</i></b> & (! LAST))) | (X ((! (Lin_<b><i>(flt_mode = liftoff)</i></b> | LAST)) U <b><i>(( 23 < x ))</i></b>)))) & (<b><i>(flt_mode = liftoff)</i></b> -> ((! (Lin_<b><i>(flt_mode = liftoff)</i></b> | LAST)) U <b><i>(( 23 < x ))</i></b>)))",
            "pt": "((H ((Lin_<b><i>(flt_mode = liftoff)</i></b> & (! FTP)) -> (Y (! ((! <b><i>(( 23 < x ))</i></b>) S ((! <b><i>(( 23 < x ))</i></b>) & Fin_<b><i>(flt_mode = liftoff)</i></b>)))))) & (((! Lin_<b><i>(flt_mode = liftoff)</i></b>) S ((! Lin_<b><i>(flt_mode = liftoff)</i></b>) & Fin_<b><i>(flt_mode = liftoff)</i></b>)) -> (! ((! <b><i>(( 23 < x ))</i></b>) S ((! <b><i>(( 23 < x ))</i></b>) & Fin_<b><i>(flt_mode = liftoff)</i></b>)))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>(flt_mode = liftoff)</i></b>) & (! LAST)) & (X <b><i>(flt_mode = liftoff)</i></b>)) & (! LAST))) | (X ((! (((<b><i>(flt_mode = liftoff)</i></b> & (! LAST)) & (X (! <b><i>(flt_mode = liftoff)</i></b>))) | LAST)) U <b><i>(( 23 < x ))</i></b>)))) & (<b><i>(flt_mode = liftoff)</i></b> -> ((! (((<b><i>(flt_mode = liftoff)</i></b> & (! LAST)) & (X (! <b><i>(flt_mode = liftoff)</i></b>))) | LAST)) U <b><i>(( 23 < x ))</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>(flt_mode = liftoff)</i></b>) & (Y <b><i>(flt_mode = liftoff)</i></b>)) & (Y TRUE)) -> (Y (! ((! <b><i>(( 23 < x ))</i></b>) S ((! <b><i>(( 23 < x ))</i></b>) & (<b><i>(flt_mode = liftoff)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flt_mode = liftoff)</i></b>)))))))))) & (((! ((! <b><i>(flt_mode = liftoff)</i></b>) & (Y <b><i>(flt_mode = liftoff)</i></b>))) S ((! ((! <b><i>(flt_mode = liftoff)</i></b>) & (Y <b><i>(flt_mode = liftoff)</i></b>))) & (<b><i>(flt_mode = liftoff)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flt_mode = liftoff)</i></b>)))))) -> (! ((! <b><i>(( 23 < x ))</i></b>) S ((! <b><i>(( 23 < x ))</i></b>) & (<b><i>(flt_mode = liftoff)</i></b> & ((! (Y TRUE)) | (Y (! <b><i>(flt_mode = liftoff)</i></b>)))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((( not (flt_mode = liftoff)) and (pre ((flt_mode = liftoff)))) and ( not FTP)) => (pre ( not (SI( ((flt_mode = liftoff) and (FTP or (pre ( not (flt_mode = liftoff))))), ( not (( 23 < x ))) )))))) and ((SI( ((flt_mode = liftoff) and (FTP or (pre ( not (flt_mode = liftoff))))), ( not (( not (flt_mode = liftoff)) and (pre ((flt_mode = liftoff))))) )) => ( not (SI( ((flt_mode = liftoff) and (FTP or (pre ( not (flt_mode = liftoff))))), ( not (( 23 < x ))) )))))",
            "diagramVariables": "M = <b><i>(flt_mode = liftoff)</i></b>, Response = <b><i>(( 23 < x ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(flt_mode = liftoff)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "0fa572a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-CONDITION-IS-FALSE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when length(x) > 0 is false the sw shall satisfy lightup(lamp)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "length",
                    "x",
                    "lightup",
                    "lamp"
                ],
                "modes": []
            },
            "regular_condition": "(! (length ( x ) > 0))",
            "qualifier_word": "when",
            "pre_condition": "(length ( x ) > 0)",
            "conditionTextRange": [
                0,
                26
            ],
            "component_name": "sw",
            "componentTextRange": [
                28,
                33
            ],
            "post_condition": "(lightup ( lamp ))",
            "responseTextRange": [
                41,
                61
            ],
            "ft": "((LAST V (((! <b><i>(! (length ( x ) > 0))</i></b>) & ((! LAST) & (X <b><i>(! (length ( x ) > 0))</i></b>))) -> (X ((! LAST) U <b><i>(lightup ( lamp ))</i></b>)))) & (<b><i>(! (length ( x ) > 0))</i></b> -> ((! LAST) U <b><i>(lightup ( lamp ))</i></b>)))",
            "pt": "((H (! <b><i>(! (length ( x ) > 0))</i></b>)) | (! ((! <b><i>(lightup ( lamp ))</i></b>) S ((! <b><i>(lightup ( lamp ))</i></b>) & (<b><i>(! (length ( x ) > 0))</i></b> & ((Y (! <b><i>(! (length ( x ) > 0))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(! (length ( x ) > 0))</i></b>) & ((! LAST) & (X <b><i>(! (length ( x ) > 0))</i></b>))) -> (X ((! LAST) U <b><i>(lightup ( lamp ))</i></b>)))) & (<b><i>(! (length ( x ) > 0))</i></b> -> ((! LAST) U <b><i>(lightup ( lamp ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(! (length ( x ) > 0))</i></b>)) | (! ((! <b><i>(lightup ( lamp ))</i></b>) S ((! <b><i>(lightup ( lamp ))</i></b>) & (<b><i>(! (length ( x ) > 0))</i></b> & ((Y (! <b><i>(! (length ( x ) > 0))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H( not (not (length ( x ) > 0)))) or ( not (SI( ((not (length ( x ) > 0)) and ((pre ( not (not (length ( x ) > 0)))) or FTP)), ( not (lightup ( lamp ))) ))))",
            "diagramVariables": "TC = <b><i>(! (length ( x ) > 0))</i></b>, Response = <b><i>(lightup ( lamp ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! (length ( x ) > 0))</i></b> is true and any point in the interval where <b><i>(! (length ( x ) > 0))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "0fa599b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-009",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint  satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_0"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "emergency_button",
            "regular_condition": "emergency_button",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                68,
                84
            ],
            "regular_condition_coco": "emergency_button",
            "ft": "((LAST V (((! <b><i>emergency_button</i></b>) & ((! LAST) & (X <b><i>emergency_button</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>emergency_button</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "pt": "(H ((Y (<b><i>emergency_button</i></b> & ((Y (! <b><i>emergency_button</i></b>)) | FTP))) -> (<b><i>(! valve_0)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>emergency_button</i></b>) & ((! LAST) & (X <b><i>emergency_button</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>emergency_button</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>emergency_button</i></b> & ((Y (! <b><i>emergency_button</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_0)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre (emergency_button and ((pre ( not emergency_button)) or FTP))) => ((! valve_0) or FTP)))",
            "diagramVariables": "TC = <b><i>emergency_button</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>emergency_button</i></b> is true and any point in the interval where <b><i>emergency_button</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fa5c0c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-BEFORE-WITHIN",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "only before M shall the sw  satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyBefore",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                12
            ],
            "component_name": "sw",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                28,
                36
            ],
            "ft": "(((! <b><i>M</i></b>) -> (((! FFin_<b><i>M</i></b>) U (FFin_<b><i>M</i></b> & (X (LAST V (! <b><i>(R)</i></b>))))) | (LAST V (! FFin_<b><i>M</i></b>)))) & (<b><i>M</i></b> -> (LAST V (! <b><i>(R)</i></b>))))",
            "pt": "((O FFin_<b><i>M</i></b>) -> ((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & FFin_<b><i>M</i></b>)))",
            "ftExpanded": "(((! <b><i>M</i></b>) -> (((! (((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>))) U ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) & (X (LAST V (! <b><i>(R)</i></b>))))) | (LAST V (! (((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)))))) & (<b><i>M</i></b> -> (LAST V (! <b><i>(R)</i></b>))))",
            "ptExpanded": "((O ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) & ((Y (H (! <b><i>M</i></b>))) | (! (Y TRUE))))) -> ((! <b><i>(R)</i></b>) S ((! <b><i>(R)</i></b>) & ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) & ((Y (H (! <b><i>M</i></b>))) | (! (Y TRUE)))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((O((M and (FTP or (pre ( not M)))) and ((pre (H( not M))) or FTP))) => (SI( ((M and (FTP or (pre ( not M)))) and ((pre (H( not M))) or FTP)), ( not (R)) )))",
            "diagramVariables": "M = <b><i>M</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting at the first point where <b><i>M</i></b> holds and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyBefore_null_null_satisfaction.svg"
        },
        "_id": "0fa60ee0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "",
        "parent_reqid": "",
        "project": "AOS",
        "rationale": "",
        "fulltext": "\"the sw shall do the right thing\"",
        "semantics": {},
        "_id": "0fa635f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-UNLESS",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "after m mode, unless p, the sw shall  satisfy r",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "m",
            "regular_condition": "(!(p))",
            "qualifier_word": "unless",
            "pre_condition": "(p)",
            "component_name": "sw",
            "post_condition": "r",
            "ltlTemplate": "G ((!$scope_mode$) | ($scope_mode$ & ($regular_condition$ -> $post_condition$)))",
            "ltlFormula": "G ((!<b><i>m</i></b>) | (<b><i>m</i></b> & (<b><i>(!(p))</i></b> -> <b><i>r</i></b>)))",
            "ltlDescription": "If the condition <b><i>(!(p))</i></b> holds,  component <b><i>sw</i></b> shall  satisfy <b><i>r</i></b>. \nNote that this requirement is only relevant and imposed after the first time that <b><i>sw</i></b> exits mode <b><i>m</i></b> for the first time."
        },
        "input": {
            "scopeField": "after m mode",
            "conditionsField": "unless p",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy r"
        },
        "_id": "0fa65d00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-C",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when persisted(5,p) the sw shall within 5 seconds satisfy occurred(4,q)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "persisted",
                    "p",
                    "occurred",
                    "q"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "(persisted ( 5 , p ))",
            "regular_condition": "(persisted ( 5 , p ))",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "sw",
            "componentTextRange": [
                20,
                25
            ],
            "duration": "5",
            "timingTextRange": [
                33,
                48
            ],
            "post_condition": "(occurred ( 4 , q ))",
            "responseTextRange": [
                50,
                70
            ],
            "diagramVariables": "TC = <b><i>(persisted ( 5 , p ))</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(occurred ( 4 , q ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(persisted ( 5 , p ))</i></b> is true and any point in the interval where <b><i>(persisted ( 5 , p ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg",
            "regular_condition_unexp_pt": "((H[<=5] p) & (H[<5] (! FTP)))",
            "regular_condition_unexp_ft": "persisted(5,p)",
            "regular_condition_SMV_pt": "((H[<=5] p) & (H[<5] (! (!(Y TRUE)))))",
            "regular_condition_SMV_ft": "persisted(5,p)",
            "regular_condition_coco": "((HT(5,0,p)) and (HT(4,0,( not FTP))))",
            "post_condition_unexp_pt": "(((! FTP) S q) & (O[<=4] q))",
            "post_condition_unexp_ft": "occurred(4,q)",
            "post_condition_SMV_pt": "(((! (!(Y TRUE))) S q) & (O[<=4] q))",
            "post_condition_SMV_ft": "occurred(4,q)",
            "post_condition_coco": "((S( q, ( not FTP) )) and (OT(4,0,q)))",
            "ft": "((LAST V (((! <b><i>persisted(5,p)</i></b>) & ((! LAST) & (X <b><i>persisted(5,p)</i></b>))) -> (X ((F[<=<b><i>5</i></b>] <b><i>occurred(4,q)</i></b>) | (F[<<b><i>5</i></b>] LAST))))) & (<b><i>persisted(5,p)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>occurred(4,q)</i></b>) | (F[<<b><i>5</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>5</i></b>] ((<b><i>((H[<=5] p) & (H[<5] (! FTP)))</i></b> & ((Y (! <b><i>((H[<=5] p) & (H[<5] (! FTP)))</i></b>)) | FTP)) & (! <b><i>(((! FTP) S q) & (O[<=4] q))</i></b>))) -> (O[<<b><i>5</i></b>] (FTP | <b><i>(((! FTP) S q) & (O[<=4] q))</i></b>))))",
            "ptExpanded": "(H ((O[=5] ((((H[<=5] p) & (H[<5] (! (!(Y TRUE))))) & ((Y (! ((H[<=5] p) & (H[<5] (! (!(Y TRUE))))))) | (! (Y TRUE)))) & (! (((! (!(Y TRUE))) S q) & (O[<=4] q))))) -> (O[<5] ((! (Y TRUE)) | (((! (!(Y TRUE))) S q) & (O[<=4] q))))))",
            "ftExpanded": "((LAST V (((! persisted(5,p)) & ((! LAST) & (X persisted(5,p)))) -> (X ((F[<=5] occurred(4,q)) | (F[<5] LAST))))) & (persisted(5,p) -> ((F[<=5] occurred(4,q)) | (F[<5] LAST))))",
            "CoCoSpecCode": "(H((OT(5,5,( ( ((HT(5,0,p)) and (HT(4,0,( not FTP)))) and ( ( Y ( not ((HT(5,0,p)) and (HT(4,0,( not FTP)))) ) ) or FTP ) ) and ( not ((S( q, ( not FTP) )) and (OT(4,0,q))) ) ))) => (OT(5-1,0,( FTP or ((S( q, ( not FTP) )) and (OT(4,0,q))) )))))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0fa6d230-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-007",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when timer_60sec_expire the liquid_mixer shall at the next timepoint  satisfy timer_120sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "timer_60sec_expire",
                    "timer_120sec_start"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "timer_60sec_expire",
            "regular_condition": "timer_60sec_expire",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                24,
                39
            ],
            "timingTextRange": [
                47,
                67
            ],
            "post_condition": "(timer_120sec_start)",
            "responseTextRange": [
                70,
                95
            ],
            "regular_condition_coco": "timer_60sec_expire",
            "ft": "((LAST V (((! <b><i>timer_60sec_expire</i></b>) & ((! LAST) & (X <b><i>timer_60sec_expire</i></b>))) -> (X (LAST | (X <b><i>(timer_120sec_start)</i></b>))))) & (<b><i>timer_60sec_expire</i></b> -> (LAST | (X <b><i>(timer_120sec_start)</i></b>))))",
            "pt": "(H ((Y (<b><i>timer_60sec_expire</i></b> & ((Y (! <b><i>timer_60sec_expire</i></b>)) | FTP))) -> (<b><i>(timer_120sec_start)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>timer_60sec_expire</i></b>) & ((! LAST) & (X <b><i>timer_60sec_expire</i></b>))) -> (X (LAST | (X <b><i>(timer_120sec_start)</i></b>))))) & (<b><i>timer_60sec_expire</i></b> -> (LAST | (X <b><i>(timer_120sec_start)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>timer_60sec_expire</i></b> & ((Y (! <b><i>timer_60sec_expire</i></b>)) | (! (Y TRUE))))) -> (<b><i>(timer_120sec_start)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre (timer_60sec_expire and ((pre ( not timer_60sec_expire)) or FTP))) => ((timer_120sec_start) or FTP)))",
            "diagramVariables": "TC = <b><i>timer_60sec_expire</i></b>, Response = <b><i>(timer_120sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>timer_60sec_expire</i></b> is true and any point in the interval where <b><i>timer_60sec_expire</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fa72050-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-CONDITION-UNLESS",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "unless p, the sw shall  satisfy q",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "regular_condition": "!(p)",
            "qualifier_word": "unless",
            "pre_condition": "(p)",
            "component_name": "sw",
            "post_condition": "q",
            "ltlTemplate": "G ($regular_condition$ -> $post_condition$)",
            "ltlFormula": "G (<b><i>!(p)</i></b> -> <b><i>q</i></b>)",
            "ltlDescription": "If the condition <b><i>!(p)</i></b> holds,  component <b><i>sw</i></b> shall  satisfy <b><i>q</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "unless p",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy q"
        },
        "_id": "0fa79580-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Test-until-2",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "In CountDownMode, The sw shall, until CountDown = 0, satisfy CountDown > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "CountDown"
                ],
                "modes": [
                    "CountDownMode"
                ]
            },
            "scope_mode": "CountDownMode",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "sw",
            "componentTextRange": [
                18,
                23
            ],
            "stop_condition": "(CountDown = 0)",
            "timingTextRange": [
                30,
                51
            ],
            "post_condition": "(CountDown > 0)",
            "responseTextRange": [
                53,
                73
            ],
            "ft": "((LAST V ((! (Fin_<b><i>CountDownMode</i></b> & (! LAST))) | (X ((! (((! <b><i>(CountDown = 0)</i></b>) & (! (Lin_<b><i>CountDownMode</i></b> | LAST))) U ((! <b><i>(CountDown > 0)</i></b>) & (! <b><i>(CountDown = 0)</i></b>)))) | (((<b><i>(CountDown > 0)</i></b> & (Lin_<b><i>CountDownMode</i></b> | LAST)) | (Lin_<b><i>CountDownMode</i></b> | LAST)) V <b><i>(CountDown > 0)</i></b>))))) & (<b><i>CountDownMode</i></b> -> ((! (((! <b><i>(CountDown = 0)</i></b>) & (! (Lin_<b><i>CountDownMode</i></b> | LAST))) U ((! <b><i>(CountDown > 0)</i></b>) & (! <b><i>(CountDown = 0)</i></b>)))) | (((<b><i>(CountDown > 0)</i></b> & (Lin_<b><i>CountDownMode</i></b> | LAST)) | (Lin_<b><i>CountDownMode</i></b> | LAST)) V <b><i>(CountDown > 0)</i></b>))))",
            "pt": "((H ((Lin_<b><i>CountDownMode</i></b> & (! FTP)) -> (Y ((((! <b><i>(CountDown = 0)</i></b>) S ((! <b><i>(CountDown = 0)</i></b>) & Fin_<b><i>CountDownMode</i></b>)) -> <b><i>(CountDown > 0)</i></b>) S ((((! <b><i>(CountDown = 0)</i></b>) S ((! <b><i>(CountDown = 0)</i></b>) & Fin_<b><i>CountDownMode</i></b>)) -> <b><i>(CountDown > 0)</i></b>) & Fin_<b><i>CountDownMode</i></b>))))) & (((! Lin_<b><i>CountDownMode</i></b>) S ((! Lin_<b><i>CountDownMode</i></b>) & Fin_<b><i>CountDownMode</i></b>)) -> ((((! <b><i>(CountDown = 0)</i></b>) S ((! <b><i>(CountDown = 0)</i></b>) & Fin_<b><i>CountDownMode</i></b>)) -> <b><i>(CountDown > 0)</i></b>) S ((((! <b><i>(CountDown = 0)</i></b>) S ((! <b><i>(CountDown = 0)</i></b>) & Fin_<b><i>CountDownMode</i></b>)) -> <b><i>(CountDown > 0)</i></b>) & Fin_<b><i>CountDownMode</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>CountDownMode</i></b>) & (! LAST)) & (X <b><i>CountDownMode</i></b>)) & (! LAST))) | (X ((! (((! <b><i>(CountDown = 0)</i></b>) & (! (((<b><i>CountDownMode</i></b> & (! LAST)) & (X (! <b><i>CountDownMode</i></b>))) | LAST))) U ((! <b><i>(CountDown > 0)</i></b>) & (! <b><i>(CountDown = 0)</i></b>)))) | (((<b><i>(CountDown > 0)</i></b> & (((<b><i>CountDownMode</i></b> & (! LAST)) & (X (! <b><i>CountDownMode</i></b>))) | LAST)) | (((<b><i>CountDownMode</i></b> & (! LAST)) & (X (! <b><i>CountDownMode</i></b>))) | LAST)) V <b><i>(CountDown > 0)</i></b>))))) & (<b><i>CountDownMode</i></b> -> ((! (((! <b><i>(CountDown = 0)</i></b>) & (! (((<b><i>CountDownMode</i></b> & (! LAST)) & (X (! <b><i>CountDownMode</i></b>))) | LAST))) U ((! <b><i>(CountDown > 0)</i></b>) & (! <b><i>(CountDown = 0)</i></b>)))) | (((<b><i>(CountDown > 0)</i></b> & (((<b><i>CountDownMode</i></b> & (! LAST)) & (X (! <b><i>CountDownMode</i></b>))) | LAST)) | (((<b><i>CountDownMode</i></b> & (! LAST)) & (X (! <b><i>CountDownMode</i></b>))) | LAST)) V <b><i>(CountDown > 0)</i></b>))))",
            "ptExpanded": "((H ((((! <b><i>CountDownMode</i></b>) & (Y <b><i>CountDownMode</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(CountDown = 0)</i></b>) S ((! <b><i>(CountDown = 0)</i></b>) & (<b><i>CountDownMode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>CountDownMode</i></b>)))))) -> <b><i>(CountDown > 0)</i></b>) S ((((! <b><i>(CountDown = 0)</i></b>) S ((! <b><i>(CountDown = 0)</i></b>) & (<b><i>CountDownMode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>CountDownMode</i></b>)))))) -> <b><i>(CountDown > 0)</i></b>) & (<b><i>CountDownMode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>CountDownMode</i></b>))))))))) & (((! ((! <b><i>CountDownMode</i></b>) & (Y <b><i>CountDownMode</i></b>))) S ((! ((! <b><i>CountDownMode</i></b>) & (Y <b><i>CountDownMode</i></b>))) & (<b><i>CountDownMode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>CountDownMode</i></b>)))))) -> ((((! <b><i>(CountDown = 0)</i></b>) S ((! <b><i>(CountDown = 0)</i></b>) & (<b><i>CountDownMode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>CountDownMode</i></b>)))))) -> <b><i>(CountDown > 0)</i></b>) S ((((! <b><i>(CountDown = 0)</i></b>) S ((! <b><i>(CountDown = 0)</i></b>) & (<b><i>CountDownMode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>CountDownMode</i></b>)))))) -> <b><i>(CountDown > 0)</i></b>) & (<b><i>CountDownMode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>CountDownMode</i></b>))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((( not CountDownMode) and (pre (CountDownMode))) and ( not FTP)) => (pre (SI( (CountDownMode and (FTP or (pre ( not CountDownMode)))), ((SI( (CountDownMode and (FTP or (pre ( not CountDownMode)))), ( not (CountDown = 0)) )) => (CountDown > 0)) ))))) and ((SI( (CountDownMode and (FTP or (pre ( not CountDownMode)))), ( not (( not CountDownMode) and (pre (CountDownMode)))) )) => (SI( (CountDownMode and (FTP or (pre ( not CountDownMode)))), ((SI( (CountDownMode and (FTP or (pre ( not CountDownMode)))), ( not (CountDown = 0)) )) => (CountDown > 0)) ))))",
            "diagramVariables": "M = <b><i>CountDownMode</i></b>, SC = <b><i>(CountDown = 0)</i></b>, Response = <b><i>(CountDown > 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>CountDownMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_until_satisfaction.svg"
        },
        "_id": "0fa7bc90-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-BEFORE",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "only before m, shall the software  satisfy p",
        "semantics": {
            "scope": {
                "type": "onlyBefore",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "m",
            "component_name": "software",
            "post_condition": "p",
            "ltlTemplate": "G ($post_condition$ -> (H (!$scope_mode$)))",
            "ltlFormula": "G (<b><i>p</i></b> -> (H (!<b><i>m</i></b>)))",
            "ltlDescription": "Component <b><i>software</i></b> shall  satisfy <b><i>p</i></b>. \nNote that this requirement can only be true before <b><i>software</i></b> enters mode <b><i>m</i></b> for the first time."
        },
        "input": {
            "scopeField": "only before m",
            "conditionsField": "",
            "componentField": "the software",
            "timingField": "",
            "responsesField": "satisfy p"
        },
        "_id": "0fa831c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "HK_03",
        "parent_reqid": "",
        "project": "CubETH",
        "rationale": "While the PS for the PL subsystem is not enabled, HK PL shall transmit the HK data of the PL subsystem through the TC/TM service. \nstate PS for the PL subsystem not enabled: disabledPS_PL\naction transmit HK data of the PL subsystem through the TC/TM service: transmit_I2C_TTC",
        "fulltext": "while disabledPS_PL, HK_PL shall  start transmit_I2C_TTC",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [
                    "disabledPS_PL",
                    "transmit_I2C_TTC"
                ],
                "modes": []
            },
            "regular_condition": "(disabledPS_PL)",
            "qualifier_word": "while",
            "pre_condition": "(disabledPS_PL)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "HK_PL",
            "componentTextRange": [
                21,
                25
            ],
            "action": "start transmit_I2C_TTC",
            "responseTextRange": [
                34,
                55
            ],
            "ft": "G (<b><i>(disabledPS_PL)</i></b> -> (F <b><i>start transmit_I2C_TTC</i></b>))",
            "pt": "!(((!<b><i>start transmit_I2C_TTC</i></b>) & (!FTP)) S (<b><i>(disabledPS_PL)</i></b> & (!<b><i>start transmit_I2C_TTC</i></b>)))",
            "ftExpanded": "G (<b><i>(disabledPS_PL)</i></b> -> (F <b><i>start transmit_I2C_TTC</i></b>))",
            "ptExpanded": "!(((!<b><i>start transmit_I2C_TTC</i></b>) & (!(! Y TRUE))) S (<b><i>(disabledPS_PL)</i></b> & (!<b><i>start transmit_I2C_TTC</i></b>)))",
            "component": "<b><i>HK_PL</i></b>",
            "CoCoSpecCode": " not (S( (() and ( not )), (( not ) and ( not ( not pre (  true  )))) ))",
            "diagramVariables": "Response = <b><i>start transmit_I2C_TTC</i></b>.",
            "description": "Upon <b><i>(disabledPS_PL)</i></b> becoming true, at some future point, the component \"<b><i>HK_PL</i></b>\" shall perform <b><i>start transmit_I2C_TTC</i></b>.",
            "diagram": "Undefined svg."
        },
        "_id": "0fa858d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "HK_02_AM",
        "parent_reqid": "",
        "project": "CubETH",
        "rationale": "HK PL shall handle HK data from the PL subsystem every TBD seconds, as long as the handling of HK data is enabled. \nTBD seconds pass is environmental event: ENV_HKPL_TBD_PASS\nstate handling of HK data is enabled: HK_PL_enabled_data_handling\naction HK data from the PL subystem: HK_PL_begin_data_handling",
        "fulltext": "only if ENV_HKPL_TBD_PASS = TRUE & HK_PL_enabled_data_handling = TRUE, HK_PL shall  satisfy HK_PL_begin_data_handling",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "only",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "ENV_HKPL_TBD_PASS",
                    "TRUE",
                    "HK_PL_enabled_data_handling",
                    "HK_PL_begin_data_handling"
                ],
                "modes": []
            },
            "regular_condition": "(ENV_HKPL_TBD_PASS = TRUE & HK_PL_enabled_data_handling = TRUE)",
            "qualifier_word": "if",
            "pre_condition": "(ENV_HKPL_TBD_PASS = TRUE & HK_PL_enabled_data_handling = TRUE)",
            "conditionTextRange": [
                0,
                69
            ],
            "component_name": "HK_PL",
            "componentTextRange": [
                71,
                75
            ],
            "post_condition": "(HK_PL_begin_data_handling)",
            "responseTextRange": [
                84,
                116
            ],
            "ft": "Under construction.",
            "pt": "Under construction.",
            "ftExpanded": "Under construction.",
            "ptExpanded": "Under construction.",
            "component": "<b><i>HK_PL</i></b>",
            "CoCoSpecCode": "Under construction.",
            "diagramVariables": "Response = <b><i>(HK_PL_begin_data_handling)</i></b>.",
            "description": "We are working on formalizing this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
            "diagram": "Undefined svg."
        },
        "_id": "0fa8a6f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ4a_AM",
        "parent_reqid": "",
        "project": "",
        "rationale": "After 10 seconds of Computation at an execution frequency of 10 hz, the Output should equal 10 within a +/- 0.1 tolerance, for a Constant Input (xin = 1.0), and the sample delta time T = 0.1 seconds when in normal mode of operation.",
        "fulltext": "When in NORMAL mode  when EXEC_FREQ = 10 & XIN = 1.0 & T = 0.1, TUSTIN_INTEGRATOR shall, after 10 seconds, satisfy YOUT <= 10.1 & YOUT >=9.9 ",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "scope_mode": "NORMAL",
            "regular_condition": "((EXEC_FREQ = 10 & XIN = 1.0 & T = 0.1))",
            "qualifier_word": "when",
            "pre_condition": "(EXEC_FREQ = 10 & XIN = 1.0 & T = 0.1)",
            "component_name": "TUSTIN_INTEGRATOR",
            "duration_lower": "10 seconds",
            "post_condition": "YOUT <= 10.1 & YOUT >= 9.9",
            "ltlTemplate": "SALT parsing error",
            "ltlFormula": "SALT parsing error",
            "ltlDescription": "If the condition <b><i>((EXEC_FREQ = 10 & XIN = 1.0 & T = 0.1))</i></b> holds,  component <b><i>TUSTIN_INTEGRATOR</i></b> shall , after <b><i>10 seconds</i></b>,  satisfy <b><i>YOUT <= 10.1 & YOUT >= 9.9</i></b>. \nNote that this requirement is only imposed when <b><i>TUSTIN_INTEGRATOR</i></b> is in mode <b><i>NORMAL</i></b>."
        },
        "input": {
            "scopeField": "When in NORMAL mode ",
            "conditionsField": "when EXEC_FREQ = 10 & XIN = 1.0 & T = 0.1",
            "componentField": "TUSTIN_INTEGRATOR",
            "timingField": "after 10 seconds",
            "responsesField": "satisfy YOUT <= 10.1 & YOUT >=9.9 "
        },
        "_id": "0fa8ce00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG_PITCH_ACC_REQ",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "2. The Inner Loop Pitch Regulator Shall not command angular pitch accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "when mcvdt_cmd_fcs_dps2 > 50, Regulator shall, within 100 ticks, satisfy mcvdt_cmd_fcs_dps2 < 50",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "regular_condition": "mcvdt_cmd_fcs_dps2 > 50",
            "pre_conditions": [
                "mcvdt_cmd_fcs_dps2 > 50"
            ],
            "component_name": "Regulator",
            "duration_upper": "100 ticks",
            "post_condition": "mcvdt_cmd_fcs_dps2 < 50",
            "ltlTemplate": "G ($regular_condition$ -> (F[$duration_upper$] $post_condition$))",
            "ltlFormula": "G (<b><i>mcvdt_cmd_fcs_dps2 > 50</i></b> -> (F[<b><i>100 ticks</i></b>] <b><i>mcvdt_cmd_fcs_dps2 < 50</i></b>))",
            "ltlDescription": "If the condition <b><i>mcvdt_cmd_fcs_dps2 > 50</i></b> holds,  component <b><i>Regulator</i></b> shall , within <b><i>100 ticks</i></b>,  satisfy <b><i>mcvdt_cmd_fcs_dps2 < 50</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when mcvdt_cmd_fcs_dps2 > 50",
            "componentField": "Regulator",
            "timingField": "within 100 ticks",
            "responsesField": "satisfy mcvdt_cmd_fcs_dps2 < 50"
        },
        "_id": "0fa94330-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ2",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "2. The Output (yout) shall be bounded by the provided Top and Bottom limits (TL and BL)",
        "fulltext": "Tustin_Integrator shall always satisfy BL <= TL & BL <= YOUT & YOUT <= TL",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "BL",
                    "TL",
                    "YOUT"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(BL <= TL & BL <= YOUT & YOUT <= TL)",
            "responseTextRange": [
                31,
                72
            ],
            "ft": "G <b><i>(BL <= TL & BL <= YOUT & YOUT <= TL)</i></b>",
            "pt": "<b><i>(BL <= TL & BL <= YOUT & YOUT <= TL)</i></b> S (<b><i>(BL <= TL & BL <= YOUT & YOUT <= TL)</i></b> & FTP)",
            "ftExpanded": "G <b><i>(BL <= TL & BL <= YOUT & YOUT <= TL)</i></b>",
            "ptExpanded": "<b><i>(BL <= TL & BL <= YOUT & YOUT <= TL)</i></b> S (<b><i>(BL <= TL & BL <= YOUT & YOUT <= TL)</i></b> & (! Y TRUE))",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "S( ((BL <= TL and BL <= YOUT and YOUT <= TL) and FTP()), (BL <= TL and BL <= YOUT and YOUT <= TL) )",
            "diagramVariables": "Response = <b><i>(BL <= TL & BL <= YOUT & YOUT <= TL)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(BL <= TL & BL <= YOUT & YOUT <= TL)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fa96a40-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG_AXIAL_ACC_REQ",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "4. The Inner Loop Airspeed Regulator Shall not command translational axial accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "when xcvdt_cmd_fcs_fps2 > 32, Regulator shall, within 100 ticks, satisfy xcvdt_cmd_fcs_fps2 < 32",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "regular_condition": "xcvdt_cmd_fcs_fps2 > 32",
            "pre_conditions": [
                "xcvdt_cmd_fcs_fps2 > 32"
            ],
            "component_name": "Regulator",
            "duration_upper": "100 ticks",
            "post_condition": "xcvdt_cmd_fcs_fps2 < 32",
            "ltlTemplate": "G ($regular_condition$ -> (F[$duration_upper$] $post_condition$))",
            "ltlFormula": "G (<b><i>xcvdt_cmd_fcs_fps2 > 32</i></b> -> (F[<b><i>100 ticks</i></b>] <b><i>xcvdt_cmd_fcs_fps2 < 32</i></b>))",
            "ltlDescription": "If the condition <b><i>xcvdt_cmd_fcs_fps2 > 32</i></b> holds,  component <b><i>Regulator</i></b> shall , within <b><i>100 ticks</i></b>,  satisfy <b><i>xcvdt_cmd_fcs_fps2 < 32</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when xcvdt_cmd_fcs_fps2 > 32",
            "componentField": "Regulator",
            "timingField": "within 100 ticks",
            "responsesField": "satisfy xcvdt_cmd_fcs_fps2 < 32"
        },
        "_id": "0fa9b860-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN_REQ4",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "4. The absolute error between the zt truth data and the output z shall never exceed a tolerance of 0.01, for the equivalent input of (xt, yt).",
        "fulltext": "NN shall  satisfy abs(zt - z) <=0.01",
        "semantics": {
            "scope": "null",
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "component_name": "NN",
            "post_condition": "abs ( zt - z ) <= 0.01",
            "ltlTemplate": "G $post_condition$",
            "ltlFormula": "G <b><i>abs ( zt - z ) <= 0.01</i></b>",
            "ltlDescription": "Component <b><i>NN</i></b> shall  satisfy <b><i>abs ( zt - z ) <= 0.01</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "",
            "componentField": "NN",
            "timingField": "",
            "responsesField": "satisfy abs(zt - z) <=0.01"
        },
        "_id": "0faa0680-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG_ROLL_ACC_REQ",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "1. The Inner Loop Roll Regulator Shall not command angular roll accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "when lcvdt_cmd_fcs_dps2 > 50, Regulator shall, within 100 ticks, satisfy lcvdt_cmd_fcs_dps2 < 50",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "regular_condition": "lcvdt_cmd_fcs_dps2 > 50",
            "pre_conditions": [
                "lcvdt_cmd_fcs_dps2 > 50"
            ],
            "component_name": "Regulator",
            "duration_upper": "100 ticks",
            "post_condition": "lcvdt_cmd_fcs_dps2 < 50",
            "ltlTemplate": "G ($regular_condition$ -> (F[$duration_upper$] $post_condition$))",
            "ltlFormula": "G (<b><i>lcvdt_cmd_fcs_dps2 > 50</i></b> -> (F[<b><i>100 ticks</i></b>] <b><i>lcvdt_cmd_fcs_dps2 < 50</i></b>))",
            "ltlDescription": "If the condition <b><i>lcvdt_cmd_fcs_dps2 > 50</i></b> holds,  component <b><i>Regulator</i></b> shall , within <b><i>100 ticks</i></b>,  satisfy <b><i>lcvdt_cmd_fcs_dps2 < 50</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when lcvdt_cmd_fcs_dps2 > 50",
            "componentField": "Regulator",
            "timingField": "within 100 ticks",
            "responsesField": "satisfy lcvdt_cmd_fcs_dps2 < 50"
        },
        "_id": "0faa54a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG_HEIGHT_ACC_REQ",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "5. The Inner Loop Height Regulator Shall not command translational height accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "when hcvdt_cmd_fcs_fps2 > 32, Regulator shall, within 100 ticks, satisfy hcvdt_cmd_fcs_fps2 < 32",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "regular_condition": "hcvdt_cmd_fcs_fps2 > 32",
            "pre_conditions": [
                "hcvdt_cmd_fcs_fps2 > 32"
            ],
            "component_name": "Regulator",
            "duration_upper": "100 ticks",
            "post_condition": "hcvdt_cmd_fcs_fps2 < 32",
            "ltlTemplate": "G ($regular_condition$ -> (F[$duration_upper$] $post_condition$))",
            "ltlFormula": "G (<b><i>hcvdt_cmd_fcs_fps2 > 32</i></b> -> (F[<b><i>100 ticks</i></b>] <b><i>hcvdt_cmd_fcs_fps2 < 32</i></b>))",
            "ltlDescription": "If the condition <b><i>hcvdt_cmd_fcs_fps2 > 32</i></b> holds,  component <b><i>Regulator</i></b> shall , within <b><i>100 ticks</i></b>,  satisfy <b><i>hcvdt_cmd_fcs_fps2 < 32</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when hcvdt_cmd_fcs_fps2 > 32",
            "componentField": "Regulator",
            "timingField": "within 100 ticks",
            "responsesField": "satisfy hcvdt_cmd_fcs_fps2 < 32"
        },
        "_id": "0faa7bb0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN_REQ2",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "2. The minimum value of the NN output, z, shall always be greater than or equal to -0.2, regardless of the input values. ",
        "fulltext": "NN shall  satisfy -0.2 <= z",
        "semantics": {
            "scope": "null",
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "component_name": "NN",
            "post_condition": "-0.2 <= z",
            "ltlTemplate": "G $post_condition$",
            "ltlFormula": "G <b><i>-0.2 <= z</i></b>",
            "ltlDescription": "Component <b><i>NN</i></b> shall  satisfy <b><i>-0.2 <= z</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "",
            "componentField": "NN",
            "timingField": "",
            "responsesField": "satisfy -0.2 <= z"
        },
        "_id": "0faaf0e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ1_AM",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "1. When Reset is True and the Initial Condition (ic) is bounded by the provided Top and Bottom Limits (BL <= ic <= TL), the Output (yout) shall equal the Initial Condition (ic).",
        "fulltext": "after RESET, when BL <= IC & IC <= TL, Tustin_Integrator shall  satisfy YOUT = IC",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "RESET",
            "regular_condition": "((BL <= IC & IC <= TL))",
            "qualifier_word": "when",
            "pre_condition": "(BL <= IC & IC <= TL)",
            "component_name": "Tustin_Integrator",
            "post_condition": "YOUT = IC",
            "ltlTemplate": "G ((!$scope_mode$) | ($scope_mode$ & ($regular_condition$ -> $post_condition$)))",
            "ltlFormula": "G ((!<b><i>RESET</i></b>) | (<b><i>RESET</i></b> & (<b><i>((BL <= IC & IC <= TL))</i></b> -> <b><i>YOUT = IC</i></b>)))",
            "ltlDescription": "If the condition <b><i>((BL <= IC & IC <= TL))</i></b> holds,  component <b><i>Tustin_Integrator</i></b> shall  satisfy <b><i>YOUT = IC</i></b>. \nNote that this requirement is only relevant and imposed after the first time that <b><i>Tustin_Integrator</i></b> exits mode <b><i>RESET</i></b> for the first time."
        },
        "input": {
            "scopeField": "after RESET",
            "conditionsField": "when BL <= IC & IC <= TL",
            "componentField": "Tustin_Integrator",
            "timingField": "",
            "responsesField": "satisfy YOUT = IC"
        },
        "_id": "0fab17f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN_REQ1",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "1. The maximum value of the NN output, z, shall always be less than or equal to 1.1, regardless of the input values. ",
        "fulltext": "NN shall  satisfy Z <= 1.1",
        "semantics": {
            "scope": "null",
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "component_name": "NN",
            "post_condition": "Z <= 1.1",
            "ltlTemplate": "G $post_condition$",
            "ltlFormula": "G <b><i>Z <= 1.1</i></b>",
            "ltlDescription": "Component <b><i>NN</i></b> shall  satisfy <b><i>Z <= 1.1</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "",
            "componentField": "NN",
            "timingField": "",
            "responsesField": "satisfy Z <= 1.1"
        },
        "_id": "0fab6610-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG_YAW_ACC_REQ",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "3. The Inner Loop Yaw Regulator Shall not command angular yaw accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "when ncvdt_cmd_fcs_dps2 > 50, Regulator shall, within 100 ticks, satisfy ncvdt_cmd_fcs_dps2 < 50",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "regular_condition": "ncvdt_cmd_fcs_dps2 > 50",
            "pre_conditions": [
                "ncvdt_cmd_fcs_dps2 > 50"
            ],
            "component_name": "Regulator",
            "duration_upper": "100 ticks",
            "post_condition": "ncvdt_cmd_fcs_dps2 < 50",
            "ltlTemplate": "G ($regular_condition$ -> (F[$duration_upper$] $post_condition$))",
            "ltlFormula": "G (<b><i>ncvdt_cmd_fcs_dps2 > 50</i></b> -> (F[<b><i>100 ticks</i></b>] <b><i>ncvdt_cmd_fcs_dps2 < 50</i></b>))",
            "ltlDescription": "If the condition <b><i>ncvdt_cmd_fcs_dps2 > 50</i></b> holds,  component <b><i>Regulator</i></b> shall , within <b><i>100 ticks</i></b>,  satisfy <b><i>ncvdt_cmd_fcs_dps2 < 50</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when ncvdt_cmd_fcs_dps2 > 50",
            "componentField": "Regulator",
            "timingField": "within 100 ticks",
            "responsesField": "satisfy ncvdt_cmd_fcs_dps2 < 50"
        },
        "_id": "0fab6611-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ4A",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "a. After 10 seconds of Computation at an execution frequency of 10 hz, the Output should equal 10 within a +/- 0.1 tolerance, for a Constant Input (xin = 1.0), and the sample delta time T = 0.1 seconds when in normal mode of operation.",
        "fulltext": "when EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1, Tustin_Integrator shall, after 10 seconds, satisfy 9.0 <= YOUT & YOUT <= 10.0",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "regular_condition": "((EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1))",
            "qualifier_word": "when",
            "pre_condition": "(EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1)",
            "component_name": "Tustin_Integrator",
            "duration_lower": "10 seconds",
            "post_condition": "9.0 <= YOUT & YOUT <= 10.0",
            "ltlTemplate": "undefined",
            "ltlFormula": "undefined",
            "ltlDescription": "If the condition <b><i>((EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1))</i></b> holds,  component <b><i>Tustin_Integrator</i></b> shall , after <b><i>10 seconds</i></b>,  satisfy <b><i>9.0 <= YOUT & YOUT <= 10.0</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1",
            "componentField": "Tustin_Integrator",
            "timingField": "after 10 seconds",
            "responsesField": "satisfy 9.0 <= YOUT & YOUT <= 10.0"
        },
        "_id": "0fabdb40-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ4B",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "Over a 10 second computational duration at an execution frequency of 10 hz, the Output should equal the sine of time t, sin(t), where time is defined as a vector from 0 to 10 by increments of 0.1 seconds within a +/- 0.1 tolerance for an input equal to the cosine of time t, cos(t), with the sample delta time T = 0.1 seconds when in normal mode of operation.",
        "fulltext": "when input = ts(0,10,1/10,cos) Tustin_Integrator shall, within 10 seconds, satisfy max(abs(output - ts(0,10,1/10,sin))) < 1/10 ",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "regular_condition": "input = ts ( 0  10 , 1 / 10 , cos )",
            "pre_conditions": [
                "input = ts ( 0  10 , 1 / 10 , cos )"
            ],
            "component_name": "Tustin_Integrator",
            "duration_upper": "10 seconds",
            "post_condition": "max ( abs ( output - ts ( 0  10 , 1 / 10 , sin ) ) ) < 1 / 10",
            "ltlTemplate": "G ($regular_condition$ -> (F[$duration_upper$] $post_condition$))",
            "ltlFormula": "G (<b><i>input = ts ( 0  10 , 1 / 10 , cos )</i></b> -> (F[<b><i>10 seconds</i></b>] <b><i>max ( abs ( output - ts ( 0  10 , 1 / 10 , sin ) ) ) < 1 / 10</i></b>))",
            "ltlDescription": "If the condition <b><i>input = ts ( 0  10 , 1 / 10 , cos )</i></b> holds,  component <b><i>Tustin_Integrator</i></b> shall , within <b><i>10 seconds</i></b>,  satisfy <b><i>max ( abs ( output - ts ( 0  10 , 1 / 10 , sin ) ) ) < 1 / 10</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when input = ts(0,10,1/10,cos)",
            "componentField": "Tustin_Integrator",
            "timingField": "within 10 seconds",
            "responsesField": "satisfy max(abs(output - ts(0,10,1/10,sin))) < 1/10 "
        },
        "_id": "0fac0250-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ3",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "3. When in normal operation, the output shall be the result of the equation, yout = T/2*(xin + xinpv)+ ypv",
        "fulltext": "when ! RESET & BL <= YOUT & YOUT <= TL, Tustin_Integrator shall  satisfy YOUT = T/2.0*(XIN + XIN_PV) + YOUT_PV",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "regular_condition": "! RESET & BL <= YOUT & YOUT <= TL",
            "pre_conditions": [
                "! RESET & BL <= YOUT & YOUT <= TL"
            ],
            "component_name": "Tustin_Integrator",
            "post_condition": "YOUT = T / 2.0 * ( XIN + XIN_PV ) + YOUT_PV",
            "ltlTemplate": "G ($regular_condition$ -> $post_condition$)",
            "ltlFormula": "G (<b><i>! RESET & BL <= YOUT & YOUT <= TL</i></b> -> <b><i>YOUT = T / 2.0 * ( XIN + XIN_PV ) + YOUT_PV</i></b>)",
            "ltlDescription": "If the condition <b><i>! RESET & BL <= YOUT & YOUT <= TL</i></b> holds,  component <b><i>Tustin_Integrator</i></b> shall  satisfy <b><i>YOUT = T / 2.0 * ( XIN + XIN_PV ) + YOUT_PV</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when ! RESET & BL <= YOUT & YOUT <= TL",
            "componentField": "Tustin_Integrator",
            "timingField": "",
            "responsesField": "satisfy YOUT = T/2.0*(XIN + XIN_PV) + YOUT_PV"
        },
        "_id": "0fac5070-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM_REQ5_AM",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBY when the pilot is in control (standby).",
        "fulltext": "if NOMINAL & standby  AUTOPILOT  shall  transition to STANDBY",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "act",
            "regular_condition": "((NOMINAL & standby))",
            "qualifier_word": "if",
            "pre_condition": "(NOMINAL & standby)",
            "component_name": "AUTOPILOT",
            "action": "transition to STANDBY",
            "ltlTemplate": "G ($regular_condition$ -> $action$)",
            "ltlFormula": "G (<b><i>((NOMINAL & standby))</i></b> -> <b><i>transition to STANDBY</i></b>)",
            "ltlDescription": "If the condition <b><i>((NOMINAL & standby))</i></b> holds,  component <b><i>AUTOPILOT</i></b> shall  perform action: <b><i>transition to STANDBY</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "if NOMINAL & standby ",
            "componentField": "AUTOPILOT ",
            "timingField": "",
            "responsesField": "transition to STANDBY"
        },
        "_id": "0fac9e90-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ1",
        "parent_reqid": "",
        "project": "",
        "rationale": "When Reset is True and the Initial Condition (ic) is bounded by the provided Top and Bottom Limits (BL <= ic <= TL), the Output (yout) shall equal the Initial Condition (ic).",
        "fulltext": "When in RESET mode,  when BL <= IC & IC <= TL, Tustin_integrator  shall  satisfy YOUT = IC",
        "semantics": {
            "scope": "in",
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "RESET",
            "regular_condition": "BL <= IC & IC <= TL",
            "pre_conditions": [
                "BL <= IC & IC <= TL"
            ],
            "component_name": "Tustin_integrator",
            "post_condition": "YOUT = IC",
            "ltlTemplate": "G ($scope_mode$ IMP ($regular_condition$ IMP $post_condition$))",
            "ltlFormula": "G (<b><i>RESET</i></b> IMP (<b><i>BL <= IC & IC <= TL</i></b> IMP <b><i>YOUT = IC</i></b>))",
            "ltlDescription": "If the condition <b><i>BL <= IC & IC <= TL</i></b> holds,  component <b><i>Tustin_integrator</i></b> shall  satisfy <b><i>YOUT = IC</i></b>. \nNote that this requirement is only imposed when <b><i>Tustin_integrator</i></b> is in mode <b><i>RESET</i></b>."
        },
        "input": {
            "scopeField": "When in RESET mode, ",
            "conditionsField": "when BL <= IC & IC <= TL",
            "componentField": "Tustin_integrator ",
            "timingField": "",
            "responsesField": "satisfy YOUT = IC"
        },
        "_id": "0facc5a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM_REQ1_AM",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).   \nEvent Sensor limits (boolean): limits\nEvent Autopilot pullup(boolean): pullup \nState pilot not in control: !standby\nState system is supported without failures: !apfail\n\n\n",
        "fulltext": "when limits & !standby & !apfail AUTOPILOT shall  initiate pullup",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "act",
            "regular_condition": "((limits & ! standby & ! apfail))",
            "qualifier_word": "when",
            "pre_condition": "(limits & ! standby & ! apfail)",
            "component_name": "AUTOPILOT",
            "action": "initiate pullup",
            "ltlTemplate": "G ($regular_condition$ -> $action$)",
            "ltlFormula": "G (<b><i>((limits & ! standby & ! apfail))</i></b> -> <b><i>initiate pullup</i></b>)",
            "ltlDescription": "If the condition <b><i>((limits & ! standby & ! apfail))</i></b> holds,  component <b><i>AUTOPILOT</i></b> shall  perform action: <b><i>initiate pullup</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when limits & !standby & !apfail",
            "componentField": "AUTOPILOT",
            "timingField": "",
            "responsesField": "initiate pullup"
        },
        "_id": "0fad13c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "HK-02",
        "parent_reqid": "",
        "project": "CubETH",
        "rationale": "HK PL shall handle HK data from the PL subsystem every 2 seconds, as long as the handling of HK data is enabled.",
        "fulltext": "if HK_PL_handle = TRUE, HK_PL shall, within 2 seconds, satisfy HK_PL_begin",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "HK_PL_handle",
                    "TRUE",
                    "HK_PL_begin"
                ],
                "modes": []
            },
            "regular_condition": "(HK_PL_handle = TRUE)",
            "qualifier_word": "if",
            "pre_condition": "(HK_PL_handle = TRUE)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "HK_PL",
            "componentTextRange": [
                24,
                28
            ],
            "duration": "2 seconds",
            "timingTextRange": [
                35,
                53
            ],
            "post_condition": "(HK_PL_begin)",
            "responseTextRange": [
                55,
                73
            ],
            "ft": "G (<b><i>(HK_PL_handle = TRUE)</i></b> -> (F[<=<b><i>2 seconds</i></b>] <b><i>(HK_PL_begin)</i></b>))",
            "pt": "(((!<b><i>(HK_PL_begin)</i></b>) S ((!<b><i>(HK_PL_begin)</i></b>) & <b><i>(HK_PL_handle = TRUE)</i></b>)) -> (O[<<b><i>2 seconds</i></b>] (<b><i>(HK_PL_handle = TRUE)</i></b> | FTP))) S ((((!<b><i>(HK_PL_begin)</i></b>) S ((!<b><i>(HK_PL_begin)</i></b>) & <b><i>(HK_PL_handle = TRUE)</i></b>)) -> (O[<<b><i>2 seconds</i></b>] (<b><i>(HK_PL_handle = TRUE)</i></b> | FTP))) & FTP)",
            "ftExpanded": "G (<b><i>(HK_PL_handle = TRUE)</i></b> -> (F[<=<b><i>2 seconds</i></b>] <b><i>(HK_PL_begin)</i></b>))",
            "ptExpanded": "(((!<b><i>(HK_PL_begin)</i></b>) S ((!<b><i>(HK_PL_begin)</i></b>) & <b><i>(HK_PL_handle = TRUE)</i></b>)) -> (O[<<b><i>2 seconds</i></b>] (<b><i>(HK_PL_handle = TRUE)</i></b> | (! Y TRUE)))) S ((((!<b><i>(HK_PL_begin)</i></b>) S ((!<b><i>(HK_PL_begin)</i></b>) & <b><i>(HK_PL_handle = TRUE)</i></b>)) -> (O[<<b><i>2 seconds</i></b>] (<b><i>(HK_PL_handle = TRUE)</i></b> | (! Y TRUE)))) & (! Y TRUE))",
            "component": "<b><i>HK_PL</i></b>",
            "CoCoSpecCode": "S( (((S( (( not ()) and (TRUE )), ( not ()) )) => (OTlore(-1; ((TRUE ) or ( not pre (  true  ))) ))) and ( not pre (  true  ))), ((S( (( not ()) and (TRUE )), ( not ()) )) => (OTlore(-1; ((TRUE ) or ( not pre (  true  ))) ))) )",
            "diagramVariables": " n = <b><i>2 seconds</i></b>, Response = <b><i>(HK_PL_begin)</i></b>.",
            "description": "Upon <b><i>(HK_PL_handle = TRUE)</i></b> becoming true, within <b><i>2 seconds</i></b>, the component \"<b><i>HK_PL</i></b>\" shall satisfy <b><i>(HK_PL_begin)</i></b>.",
            "diagram": "Undefined svg."
        },
        "_id": "0fad3ad0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ4B_AM",
        "parent_reqid": "",
        "project": "",
        "rationale": "Over a 10 second computational duration at an execution frequency of 10 hz, the Output should equal the sine of time t, sin(t), where time is defined as a vector from 0 to 10 by increments of 0.1 seconds within a +/- 0.1 tolerance for an input equal to the cosine of time t, cos(t), with the sample delta time T = 0.1 seconds when in normal mode of operation.",
        "fulltext": "when in NORMAL mode, when EXEC_FREQ=10 & T = 0.1 & xin = cos(t) TUSTIN_INTEGRATOR shall, within 10 seconds, satisfy YOUT = sin(t)",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "scope_mode": "NORMAL",
            "regular_condition": "((EXEC_FREQ = 10 & T = 0.1 & xin = cos ( t )))",
            "qualifier_word": "when",
            "pre_condition": "(EXEC_FREQ = 10 & T = 0.1 & xin = cos ( t ))",
            "component_name": "TUSTIN_INTEGRATOR",
            "duration_upper": "10 seconds",
            "post_condition": "YOUT = sin ( t )",
            "ltlTemplate": "G (($scope_mode$ & $regular_condition$) -> (F[$duration_upper$] $post_condition$))",
            "ltlFormula": "G ((<b><i>NORMAL</i></b> & <b><i>((EXEC_FREQ = 10 & T = 0.1 & xin = cos ( t )))</i></b>) -> (F[<b><i>10 seconds</i></b>] <b><i>YOUT = sin ( t )</i></b>))",
            "ltlDescription": "If the condition <b><i>((EXEC_FREQ = 10 & T = 0.1 & xin = cos ( t )))</i></b> holds,  component <b><i>TUSTIN_INTEGRATOR</i></b> shall , within <b><i>10 seconds</i></b>,  satisfy <b><i>YOUT = sin ( t )</i></b>. \nNote that this requirement is only imposed when <b><i>TUSTIN_INTEGRATOR</i></b> is in mode <b><i>NORMAL</i></b>."
        },
        "input": {
            "scopeField": "when in NORMAL mode",
            "conditionsField": "when EXEC_FREQ=10 & T = 0.1 & xin = cos(t)",
            "componentField": "TUSTIN_INTEGRATOR",
            "timingField": "within 10 seconds",
            "responsesField": "satisfy YOUT = sin(t)"
        },
        "_id": "0fad88f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ2_AM",
        "parent_reqid": "",
        "project": "",
        "rationale": "The Output (yout) shall be bounded by the provided Top and Bottom limits (TL and BL)",
        "fulltext": "Tustin_Integrator shall  satisfy YOUT <= TL & YOUT >= BL",
        "semantics": {
            "scope": "null",
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "component_name": "Tustin_Integrator",
            "post_condition": "YOUT <= TL & YOUT >= BL",
            "ltlTemplate": "G (TRUE IMP $post_condition$)",
            "ltlFormula": "G (TRUE IMP <b><i>YOUT <= TL & YOUT >= BL</i></b>)",
            "ltlDescription": "Component <b><i>Tustin_Integrator</i></b> shall  satisfy <b><i>YOUT <= TL & YOUT >= BL</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "",
            "componentField": "Tustin_Integrator",
            "timingField": "",
            "responsesField": "satisfy YOUT <= TL & YOUT >= BL"
        },
        "_id": "0fadb000-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN_REQ3_AM",
        "parent_reqid": "",
        "project": "",
        "rationale": "When in normal operation, the output shall be the result of the equation, yout = T/2*(xin + xinpv)+ ypv\n",
        "fulltext": "When in NORMAL, TUSTIN_INTEGRATOR shall  satisfy YOUT = T/2* (XIN + XINPV) + YPV",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "NORMAL",
            "component_name": "TUSTIN_INTEGRATOR",
            "post_condition": "YOUT = T / 2 * ( XIN + XINPV ) + YPV",
            "ltlTemplate": "G (($scope_mode$ AND TRUE) IMP $post_condition$)",
            "ltlFormula": "G ((<b><i>NORMAL</i></b> AND TRUE) IMP <b><i>YOUT = T / 2 * ( XIN + XINPV ) + YPV</i></b>)",
            "ltlDescription": "Component <b><i>TUSTIN_INTEGRATOR</i></b> shall  satisfy <b><i>YOUT = T / 2 * ( XIN + XINPV ) + YPV</i></b>. \nNote that this requirement is only imposed when <b><i>TUSTIN_INTEGRATOR</i></b> is in mode <b><i>NORMAL</i></b>."
        },
        "input": {
            "scopeField": "When in NORMAL",
            "conditionsField": "",
            "componentField": "TUSTIN_INTEGRATOR",
            "timingField": "",
            "responsesField": "satisfy YOUT = T/2* (XIN + XINPV) + YPV"
        },
        "_id": "0fadfe20-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG_REQ1_AM",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "The Inner Loop Roll Regulator Shall not command angular roll accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Inner_Loop_Roll_Regulator  shall  ",
        "semantics": {},
        "input": {
            "scopeField": "",
            "conditionsField": "",
            "componentField": "Inner_Loop_Roll_Regulator ",
            "timingField": "",
            "responsesField": ""
        },
        "_id": "0fae2530-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TSM_REQ1_AM",
        "parent_reqid": "",
        "project": "",
        "rationale": "In the no-fail state, a mis-compare, which shall be characterized by one branch differing with the other two branches by a unique trip level that lasts for more than the persistence limit, shall be reported to failure management as a failure.",
        "fulltext": "  ",
        "semantics": {},
        "input": {
            "scopeField": "",
            "conditionsField": "",
            "componentField": "",
            "timingField": "",
            "responsesField": ""
        },
        "_id": "0fae7350-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-IF-THEN-2",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "SW shall always satisfy if p then if q then r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "q",
                    "r"
                ],
                "modes": []
            },
            "component_name": "SW",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(p => q => r)",
            "responseTextRange": [
                16,
                44
            ],
            "ft": "(LAST V <b><i>(p -> q -> r)</i></b>)",
            "pt": "(H <b><i>(p -> q -> r)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(p -> q -> r)</i></b>)",
            "ptExpanded": "(H <b><i>(p -> q -> r)</i></b>)",
            "component": "<b><i>SW</i></b>",
            "CoCoSpecCode": "(H((p => q => r)))",
            "diagramVariables": "Response = <b><i>(p => q => r)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0faec170-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TRACE_WITH_STOP",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "In mode M if COND the system shall until STOP satisfy RES",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "COND",
                    "STOP",
                    "RES"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                8
            ],
            "regular_condition": "(COND)",
            "qualifier_word": "if",
            "pre_condition": "(COND)",
            "conditionTextRange": [
                10,
                16
            ],
            "component_name": "system",
            "componentTextRange": [
                18,
                27
            ],
            "stop_condition": "(STOP)",
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(RES)",
            "responseTextRange": [
                46,
                56
            ],
            "ft": "((LAST V ((! (Fin_<b><i>M</i></b> & (! LAST))) | (X (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(COND)</i></b>) & ((! LAST) & ((X <b><i>(COND)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((! (((! <b><i>(STOP)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))) U ((! <b><i>(RES)</i></b>) & (! <b><i>(STOP)</i></b>)))) | (((<b><i>(RES)</i></b> & (Lin_<b><i>M</i></b> | LAST)) | (Lin_<b><i>M</i></b> | LAST)) V <b><i>(RES)</i></b>))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(COND)</i></b> -> ((! (((! <b><i>(STOP)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))) U ((! <b><i>(RES)</i></b>) & (! <b><i>(STOP)</i></b>)))) | (((<b><i>(RES)</i></b> & (Lin_<b><i>M</i></b> | LAST)) | (Lin_<b><i>M</i></b> | LAST)) V <b><i>(RES)</i></b>))))))) & (<b><i>M</i></b> -> (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(COND)</i></b>) & ((! LAST) & ((X <b><i>(COND)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((! (((! <b><i>(STOP)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))) U ((! <b><i>(RES)</i></b>) & (! <b><i>(STOP)</i></b>)))) | (((<b><i>(RES)</i></b> & (Lin_<b><i>M</i></b> | LAST)) | (Lin_<b><i>M</i></b> | LAST)) V <b><i>(RES)</i></b>))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(COND)</i></b> -> ((! (((! <b><i>(STOP)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))) U ((! <b><i>(RES)</i></b>) & (! <b><i>(STOP)</i></b>)))) | (((<b><i>(RES)</i></b> & (Lin_<b><i>M</i></b> | LAST)) | (Lin_<b><i>M</i></b> | LAST)) V <b><i>(RES)</i></b>))))))",
            "pt": "((H ((Lin_<b><i>M</i></b> & (! FTP)) -> (Y ((((! <b><i>(COND)</i></b>) S ((! <b><i>(COND)</i></b>) & Fin_<b><i>M</i></b>)) | (((! <b><i>(STOP)</i></b>) S ((! <b><i>(STOP)</i></b>) & (<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | Fin_<b><i>M</i></b>)))) -> <b><i>(RES)</i></b>)) S ((((! <b><i>(COND)</i></b>) S ((! <b><i>(COND)</i></b>) & Fin_<b><i>M</i></b>)) | (((! <b><i>(STOP)</i></b>) S ((! <b><i>(STOP)</i></b>) & (<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | Fin_<b><i>M</i></b>)))) -> <b><i>(RES)</i></b>)) & Fin_<b><i>M</i></b>))))) & (((! Lin_<b><i>M</i></b>) S ((! Lin_<b><i>M</i></b>) & Fin_<b><i>M</i></b>)) -> ((((! <b><i>(COND)</i></b>) S ((! <b><i>(COND)</i></b>) & Fin_<b><i>M</i></b>)) | (((! <b><i>(STOP)</i></b>) S ((! <b><i>(STOP)</i></b>) & (<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | Fin_<b><i>M</i></b>)))) -> <b><i>(RES)</i></b>)) S ((((! <b><i>(COND)</i></b>) S ((! <b><i>(COND)</i></b>) & Fin_<b><i>M</i></b>)) | (((! <b><i>(STOP)</i></b>) S ((! <b><i>(STOP)</i></b>) & (<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | Fin_<b><i>M</i></b>)))) -> <b><i>(RES)</i></b>)) & Fin_<b><i>M</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) & (! LAST))) | (X (((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (((! <b><i>(COND)</i></b>) & ((! LAST) & ((X <b><i>(COND)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) -> ((X ((! (((! <b><i>(STOP)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))) U ((! <b><i>(RES)</i></b>) & (! <b><i>(STOP)</i></b>)))) | (((<b><i>(RES)</i></b> & (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) | (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) V <b><i>(RES)</i></b>))) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) & (<b><i>(COND)</i></b> -> ((! (((! <b><i>(STOP)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))) U ((! <b><i>(RES)</i></b>) & (! <b><i>(STOP)</i></b>)))) | (((<b><i>(RES)</i></b> & (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) | (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) V <b><i>(RES)</i></b>))))))) & (<b><i>M</i></b> -> (((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (((! <b><i>(COND)</i></b>) & ((! LAST) & ((X <b><i>(COND)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) -> ((X ((! (((! <b><i>(STOP)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))) U ((! <b><i>(RES)</i></b>) & (! <b><i>(STOP)</i></b>)))) | (((<b><i>(RES)</i></b> & (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) | (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) V <b><i>(RES)</i></b>))) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) & (<b><i>(COND)</i></b> -> ((! (((! <b><i>(STOP)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))) U ((! <b><i>(RES)</i></b>) & (! <b><i>(STOP)</i></b>)))) | (((<b><i>(RES)</i></b> & (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) | (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) V <b><i>(RES)</i></b>))))))",
            "ptExpanded": "((H ((((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(COND)</i></b>) S ((! <b><i>(COND)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) | (((! <b><i>(STOP)</i></b>) S ((! <b><i>(STOP)</i></b>) & (<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))))) -> <b><i>(RES)</i></b>)) S ((((! <b><i>(COND)</i></b>) S ((! <b><i>(COND)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) | (((! <b><i>(STOP)</i></b>) S ((! <b><i>(STOP)</i></b>) & (<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))))) -> <b><i>(RES)</i></b>)) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))) & (((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) S ((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> ((((! <b><i>(COND)</i></b>) S ((! <b><i>(COND)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) | (((! <b><i>(STOP)</i></b>) S ((! <b><i>(STOP)</i></b>) & (<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))))) -> <b><i>(RES)</i></b>)) S ((((! <b><i>(COND)</i></b>) S ((! <b><i>(COND)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) | (((! <b><i>(STOP)</i></b>) S ((! <b><i>(STOP)</i></b>) & (<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))))) -> <b><i>(RES)</i></b>)) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))",
            "component": "<b><i>system</i></b>",
            "CoCoSpecCode": "((H(((( not M) and (pre (M))) and ( not FTP)) => (pre (SI( (M and (FTP or (pre ( not M)))), ((SI( (M and (FTP or (pre ( not M)))), ( not (COND)) )) or ((SI( ((COND) and ((pre ( not (COND))) or (M and (FTP or (pre ( not M)))))), ( not (STOP)) )) => (RES))) ))))) and ((SI( (M and (FTP or (pre ( not M)))), ( not (( not M) and (pre (M)))) )) => (SI( (M and (FTP or (pre ( not M)))), ((SI( (M and (FTP or (pre ( not M)))), ( not (COND)) )) or ((SI( ((COND) and ((pre ( not (COND))) or (M and (FTP or (pre ( not M)))))), ( not (STOP)) )) => (RES))) ))))",
            "diagramVariables": "M = <b><i>M</i></b>, TC = <b><i>(COND)</i></b>, SC = <b><i>(STOP)</i></b>, Response = <b><i>(RES)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(COND)</i></b> is true and any point in the interval where <b><i>(COND)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg"
        },
        "_id": "0faf0f90-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Meaningless_One",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "Before initialization UAV shall immediately satisfy yout > 0",
        "semantics": {
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                20
            ],
            "component_name": "UAV",
            "componentTextRange": [
                22,
                24
            ],
            "timingTextRange": [
                32,
                42
            ],
            "post_condition": "(yout > 0)",
            "responseTextRange": [
                44,
                59
            ],
            "ft": "No meaning assigned.",
            "pt": "No meaning assigned.",
            "ftExpanded": "No meaning assigned.",
            "ptExpanded": "No meaning assigned.",
            "component": "<b><i>UAV</i></b>",
            "CoCoSpecCode": "No meaning assigned.",
            "diagramVariables": "M = <b><i>initialization</i></b>, Response = <b><i>(yout > 0)</i></b>.",
            "description": "Unclear requirement. We are not sure how to interpret this requirement.",
            "diagram": "Undefined svg."
        },
        "_id": "0fafabd0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "VariablesTest",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "in m if xA > 0 UAV shall satisfy yB > 0 & xin > 0",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "xA",
                    "yB",
                    "xin"
                ],
                "modes": [
                    "m"
                ]
            },
            "scope_mode": "m",
            "scopeTextRange": [
                0,
                3
            ],
            "regular_condition": "(xA > 0)",
            "qualifier_word": "if",
            "pre_condition": "(xA > 0)",
            "conditionTextRange": [
                5,
                13
            ],
            "component_name": "UAV",
            "componentTextRange": [
                15,
                17
            ],
            "post_condition": "(yB > 0 & xin > 0)",
            "responseTextRange": [
                25,
                48
            ],
            "ft": "(G ((!Fin_<b><i>m</i></b>) | (Fin_<b><i>m</i></b> & (X ((F (Lin_<b><i>m</i></b> | LAST)) -> ((Lin_<b><i>m</i></b> | LAST) V (<b><i>(xA > 0)</i></b> -> ((!(Lin_<b><i>m</i></b> | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))))) & (<b><i>m</i></b> -> ((F (Lin_<b><i>m</i></b> | LAST)) -> ((Lin_<b><i>m</i></b> | LAST) V (<b><i>(xA > 0)</i></b> -> ((!(Lin_<b><i>m</i></b> | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))",
            "pt": "(H (Lin_<b><i>m</i></b> -> (Y (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & Fin_<b><i>m</i></b>)) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>))))))) & (((!Lin_<b><i>m</i></b>) S ((!Lin_<b><i>m</i></b>) & Fin_<b><i>m</i></b>)) -> (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & Fin_<b><i>m</i></b>)) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>)))))",
            "ftExpanded": "(G ((!((! <b><i>m</i></b>) & X <b><i>m</i></b>)) | (((! <b><i>m</i></b>) & X <b><i>m</i></b>) & (X ((F ((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) -> (((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST) V (<b><i>(xA > 0)</i></b> -> ((!((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))))) & (<b><i>m</i></b> -> ((F ((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) -> (((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST) V (<b><i>(xA > 0)</i></b> -> ((!((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))",
            "ptExpanded": "(H (((! <b><i>m</i></b>) & (Y <b><i>m</i></b>)) -> (Y (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>))))))) & (((!((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) S ((!((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) -> (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>)))))",
            "component": "<b><i>UAV</i></b>",
            "CoCoSpecCode": "(H((( not m) and (pre ( m ))) => (pre ((S( (( not (xA > 0)) and (m and (FTP(_) or (pre (  not m ))))), ( not (xA > 0)) )) or ( not (S( (( not (yB > 0 and xin > 0)) and (xA > 0)), ( not (yB > 0 and xin > 0)) ))))))) and ((S( (( not (( not m) and (pre ( m )))) and (m and (FTP(_) or (pre (  not m ))))), ( not (( not m) and (pre ( m )))) )) => ((S( (( not (xA > 0)) and (m and (FTP(_) or (pre (  not m ))))), ( not (xA > 0)) )) or ( not (S( (( not (yB > 0 and xin > 0)) and (xA > 0)), ( not (yB > 0 and xin > 0)) )))))",
            "diagramVariables": "M = <b><i>m</i></b>, Response = <b><i>(yB > 0 & xin > 0)</i></b>.",
            "description": "At some future point, the component \"<b><i>UAV</i></b>\" shall satisfy <b><i>(yB > 0 & xin > 0)</i></b>. This is only enforced when \"<b><i>UAV</i></b>\" is in mode <b><i>m</i></b> and <b><i>(xA > 0)</i></b> is satisfied.",
            "diagram": "Undefined svg."
        },
        "_id": "0fb02100-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TestRequirement",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "In m1 AUTOPILOT shall satisfy p",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": [
                    "m1"
                ]
            },
            "scope_mode": "m1",
            "scopeTextRange": [
                0,
                4
            ],
            "component_name": "AUTOPILOT",
            "componentTextRange": [
                6,
                14
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                22,
                30
            ],
            "ft": "(G ((!Fin_<b><i>m1</i></b>) | (Fin_<b><i>m1</i></b> & (X ((F (Lin_<b><i>m1</i></b> | LAST)) -> ((!(Lin_<b><i>m1</i></b> | LAST)) U <b><i>(p)</i></b>)))))) & (<b><i>m1</i></b> -> ((F (Lin_<b><i>m1</i></b> | LAST)) -> ((!(Lin_<b><i>m1</i></b> | LAST)) U <b><i>(p)</i></b>)))",
            "pt": "(H (Lin_<b><i>m1</i></b> -> (Y (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & Fin_<b><i>m1</i></b>)))))) & (((!Lin_<b><i>m1</i></b>) S ((!Lin_<b><i>m1</i></b>) & Fin_<b><i>m1</i></b>)) -> (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & Fin_<b><i>m1</i></b>))))",
            "ftExpanded": "(G ((!((! <b><i>m1</i></b>) & X <b><i>m1</i></b>)) | (((! <b><i>m1</i></b>) & X <b><i>m1</i></b>) & (X ((F ((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) -> ((!((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) U <b><i>(p)</i></b>)))))) & (<b><i>m1</i></b> -> ((F ((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) -> ((!((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) U <b><i>(p)</i></b>)))",
            "ptExpanded": "(H (((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>)) -> (Y (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>))))))))) & (((!((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>))) S ((!((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>))) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>))))) -> (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>)))))))",
            "component": "<b><i>AUTOPILOT</i></b>",
            "CoCoSpecCode": "(H((( not m1) and (pre ( m1 ))) => (pre ( not (S( (( not (p)) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (p)) )))))) and ((S( (( not (( not m1) and (pre ( m1 )))) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (( not m1) and (pre ( m1 )))) )) => ( not (S( (( not (p)) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (p)) ))))",
            "diagramVariables": "M = <b><i>m1</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "At some future point, the component \"<b><i>AUTOPILOT</i></b>\" shall satisfy <b><i>(p)</i></b>. This is only enforced when \"<b><i>AUTOPILOT</i></b>\" is in mode <b><i>m1</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "0fb04810-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "New Requirement",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "in initialization AUTOPILOT shall satisfy xout > 0",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "xout"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "AUTOPILOT",
            "componentTextRange": [
                18,
                26
            ],
            "post_condition": "(xout > 0)",
            "responseTextRange": [
                34,
                49
            ],
            "ft": "(G ((!Fin_<b><i>initialization</i></b>) | (Fin_<b><i>initialization</i></b> & (X ((F (Lin_<b><i>initialization</i></b> | LAST)) -> ((!(Lin_<b><i>initialization</i></b> | LAST)) U <b><i>(xout > 0)</i></b>)))))) & (<b><i>initialization</i></b> -> ((F (Lin_<b><i>initialization</i></b> | LAST)) -> ((!(Lin_<b><i>initialization</i></b> | LAST)) U <b><i>(xout > 0)</i></b>)))",
            "pt": "(H (Lin_<b><i>initialization</i></b> -> (Y (!((!<b><i>(xout > 0)</i></b>) S ((!<b><i>(xout > 0)</i></b>) & Fin_<b><i>initialization</i></b>)))))) & (((!Lin_<b><i>initialization</i></b>) S ((!Lin_<b><i>initialization</i></b>) & Fin_<b><i>initialization</i></b>)) -> (!((!<b><i>(xout > 0)</i></b>) S ((!<b><i>(xout > 0)</i></b>) & Fin_<b><i>initialization</i></b>))))",
            "ftExpanded": "(G ((!((! <b><i>initialization</i></b>) & X <b><i>initialization</i></b>)) | (((! <b><i>initialization</i></b>) & X <b><i>initialization</i></b>) & (X ((F ((<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>)) | LAST)) -> ((!((<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>)) | LAST)) U <b><i>(xout > 0)</i></b>)))))) & (<b><i>initialization</i></b> -> ((F ((<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>)) | LAST)) -> ((!((<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>)) | LAST)) U <b><i>(xout > 0)</i></b>)))",
            "ptExpanded": "(H (((! <b><i>initialization</i></b>) & (Y <b><i>initialization</i></b>)) -> (Y (!((!<b><i>(xout > 0)</i></b>) S ((!<b><i>(xout > 0)</i></b>) & (<b><i>initialization</i></b> & ((! Y TRUE) | (Y ! <b><i>initialization</i></b>))))))))) & (((!((! <b><i>initialization</i></b>) & (Y <b><i>initialization</i></b>))) S ((!((! <b><i>initialization</i></b>) & (Y <b><i>initialization</i></b>))) & (<b><i>initialization</i></b> & ((! Y TRUE) | (Y ! <b><i>initialization</i></b>))))) -> (!((!<b><i>(xout > 0)</i></b>) S ((!<b><i>(xout > 0)</i></b>) & (<b><i>initialization</i></b> & ((! Y TRUE) | (Y ! <b><i>initialization</i></b>)))))))",
            "component": "<b><i>AUTOPILOT</i></b>",
            "CoCoSpecCode": "(H((( not initialization) and (pre ( initialization ))) => (pre ( not (S( (( not (xout > 0)) and (initialization and (FTP(_) or (pre (  not initialization ))))), ( not (xout > 0)) )))))) and ((S( (( not (( not initialization) and (pre ( initialization )))) and (initialization and (FTP(_) or (pre (  not initialization ))))), ( not (( not initialization) and (pre ( initialization )))) )) => ( not (S( (( not (xout > 0)) and (initialization and (FTP(_) or (pre (  not initialization ))))), ( not (xout > 0)) ))))",
            "diagramVariables": "M = <b><i>initialization</i></b>, Response = <b><i>(xout > 0)</i></b>.",
            "description": "At some future point, the component \"<b><i>AUTOPILOT</i></b>\" shall satisfy <b><i>(xout > 0)</i></b>. This is only enforced when \"<b><i>AUTOPILOT</i></b>\" is in mode <b><i>initialization</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "0fb06f20-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Testing after",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "after initialization mode AUTOPILOT  shall after 3 seconds satisfy xin > 0",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "xin"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                24
            ],
            "component_name": "AUTOPILOT",
            "componentTextRange": [
                26,
                34
            ],
            "duration": "3 seconds",
            "timingTextRange": [
                43,
                57
            ],
            "post_condition": "(xin > 0)",
            "responseTextRange": [
                59,
                73
            ],
            "ft": "((!Lin_<b><i>initialization</i></b>) U (Lin_<b><i>initialization</i></b> & (X ((!(F[<=<b><i>3 seconds</i></b>] (!(!<b><i>(xin > 0)</i></b>)))) & (F[<=<b><i>3 seconds</i></b>+1] <b><i>(xin > 0)</i></b>))))) | (G (!Lin_<b><i>initialization</i></b>))",
            "pt": "Under construction.",
            "ftExpanded": "((!(<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>))) U ((<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>)) & (X ((!(F[<=<b><i>3 seconds</i></b>] (!(!<b><i>(xin > 0)</i></b>)))) & (F[<=<b><i>3 seconds</i></b>+1] <b><i>(xin > 0)</i></b>))))) | (G (!(<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>))))",
            "ptExpanded": "Under construction.",
            "component": "<b><i>AUTOPILOT</i></b>",
            "CoCoSpecCode": "Under construction.",
            "diagramVariables": "M = <b><i>initialization</i></b>,  n = <b><i>3 seconds</i></b>, Response = <b><i>(xin > 0)</i></b>.",
            "description": "After <b><i>3 seconds</i></b>, the component \"<b><i>AUTOPILOT</i></b>\" shall satisfy <b><i>(xin > 0)</i></b>. This is only enforced strictly after the first occurence of <b><i>initialization</i></b> (if <b><i>initialization</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_after_satisfaction.svg"
        },
        "_id": "0fb0bd40-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REQ-01",
        "parent_reqid": "",
        "project": "InfusionManager",
        "rationale": "",
        "comments": "",
        "fulltext": "if Current_System_Mode = 0 Infusion_Manager shall at the next timepoint satisfy if System_On then (Current_System_Mode = 1 & Commanded_Flow_Rate = 0),",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode",
                    "System_On",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "regular_condition": "(Current_System_Mode = 0)",
            "qualifier_word": "if",
            "pre_condition": "(Current_System_Mode = 0)",
            "conditionTextRange": [
                0,
                25
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                27,
                42
            ],
            "timingTextRange": [
                50,
                70
            ],
            "post_condition": "(System_On => ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))",
            "responseTextRange": [
                72,
                148
            ],
            "ft": "((LAST V (((! <b><i>(Current_System_Mode = 0)</i></b>) & ((! LAST) & (X <b><i>(Current_System_Mode = 0)</i></b>))) -> (X (LAST | (X <b><i>(System_On -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))))) & (<b><i>(Current_System_Mode = 0)</i></b> -> (LAST | (X <b><i>(System_On -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))))",
            "pt": "(H ((Y (<b><i>(Current_System_Mode = 0)</i></b> & ((Y (! <b><i>(Current_System_Mode = 0)</i></b>)) | FTP))) -> (<b><i>(System_On -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(Current_System_Mode = 0)</i></b>) & ((! LAST) & (X <b><i>(Current_System_Mode = 0)</i></b>))) -> (X (LAST | (X <b><i>(System_On -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))))) & (<b><i>(Current_System_Mode = 0)</i></b> -> (LAST | (X <b><i>(System_On -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(Current_System_Mode = 0)</i></b> & ((Y (! <b><i>(Current_System_Mode = 0)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(System_On -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((pre ((Current_System_Mode = 0) and ((pre ( not (Current_System_Mode = 0))) or FTP))) => ((System_On => ( Current_System_Mode = 1 and Commanded_Flow_Rate = 0 )) or FTP)))",
            "diagramVariables": "TC = <b><i>(Current_System_Mode = 0)</i></b>, Response = <b><i>(System_On => ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(Current_System_Mode = 0)</i></b> is true and any point in the interval where <b><i>(Current_System_Mode = 0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fb0e450-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-COND-EVENTUALLY",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when p the sw shall eventually satisfy q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "q"
                ],
                "modes": []
            },
            "regular_condition": "(p)",
            "qualifier_word": "when",
            "pre_condition": "(p)",
            "conditionTextRange": [
                0,
                5
            ],
            "component_name": "sw",
            "componentTextRange": [
                7,
                12
            ],
            "timingTextRange": [
                20,
                29
            ],
            "post_condition": "(q)",
            "responseTextRange": [
                31,
                39
            ],
            "ft": "((LAST V (((! <b><i>(p)</i></b>) & ((! LAST) & (X <b><i>(p)</i></b>))) -> (X ((! LAST) U <b><i>(q)</i></b>)))) & (<b><i>(p)</i></b> -> ((! LAST) U <b><i>(q)</i></b>)))",
            "pt": "((H (! <b><i>(p)</i></b>)) | (! ((! <b><i>(q)</i></b>) S ((! <b><i>(q)</i></b>) & (<b><i>(p)</i></b> & ((Y (! <b><i>(p)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(p)</i></b>) & ((! LAST) & (X <b><i>(p)</i></b>))) -> (X ((! LAST) U <b><i>(q)</i></b>)))) & (<b><i>(p)</i></b> -> ((! LAST) U <b><i>(q)</i></b>)))",
            "ptExpanded": "((H (! <b><i>(p)</i></b>)) | (! ((! <b><i>(q)</i></b>) S ((! <b><i>(q)</i></b>) & (<b><i>(p)</i></b> & ((Y (! <b><i>(p)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H( not (p))) or ( not (SI( ((p) and ((pre ( not (p))) or FTP)), ( not (q)) ))))",
            "diagramVariables": "TC = <b><i>(p)</i></b>, Response = <b><i>(q)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(p)</i></b> is true and any point in the interval where <b><i>(p)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0fb13270-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-COND-MULTIPLE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when p(a) or unless q(c) and upon x > 0 the sw shall at the next timepoint satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "a",
                    "q",
                    "c",
                    "x",
                    "r"
                ],
                "modes": []
            },
            "regular_condition": "(((p ( a )) | (! (q ( c )))) & (x > 0))",
            "qualifier_word": "upon",
            "pre_condition": "(x > 0)",
            "conditionTextRange": [
                0,
                38
            ],
            "component_name": "sw",
            "componentTextRange": [
                40,
                45
            ],
            "timingTextRange": [
                53,
                73
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                75,
                83
            ],
            "ft": "((LAST V (((! <b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b>) & ((! LAST) & (X <b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b>))) -> (X (LAST | (X <b><i>(r)</i></b>))))) & (<b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b> -> (LAST | (X <b><i>(r)</i></b>))))",
            "pt": "(H ((Y (<b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b> & ((Y (! <b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b>)) | FTP))) -> (<b><i>(r)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b>) & ((! LAST) & (X <b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b>))) -> (X (LAST | (X <b><i>(r)</i></b>))))) & (<b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b> -> (LAST | (X <b><i>(r)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b> & ((Y (! <b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b>)) | (! (Y TRUE))))) -> (<b><i>(r)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((pre ((((p ( a )) or (not (q ( c )))) and (x > 0)) and ((pre ( not (((p ( a )) or (not (q ( c )))) and (x > 0)))) or FTP))) => ((r) or FTP)))",
            "diagramVariables": "TC = <b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b> is true and any point in the interval where <b><i>(((p ( a )) | (! (q ( c )))) & (x > 0))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fb18090-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-NEXT",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when p the sw shall, at the next timepoint, satisfy q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "q"
                ],
                "modes": []
            },
            "regular_condition": "(p)",
            "qualifier_word": "when",
            "pre_condition": "(p)",
            "conditionTextRange": [
                0,
                5
            ],
            "component_name": "sw",
            "componentTextRange": [
                7,
                12
            ],
            "timingTextRange": [
                19,
                42
            ],
            "post_condition": "(q)",
            "responseTextRange": [
                44,
                52
            ],
            "ft": "((LAST V (((! <b><i>(p)</i></b>) & ((! LAST) & (X <b><i>(p)</i></b>))) -> (X (LAST | (X <b><i>(q)</i></b>))))) & (<b><i>(p)</i></b> -> (LAST | (X <b><i>(q)</i></b>))))",
            "pt": "(H ((Y (<b><i>(p)</i></b> & ((Y (! <b><i>(p)</i></b>)) | FTP))) -> (<b><i>(q)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(p)</i></b>) & ((! LAST) & (X <b><i>(p)</i></b>))) -> (X (LAST | (X <b><i>(q)</i></b>))))) & (<b><i>(p)</i></b> -> (LAST | (X <b><i>(q)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(p)</i></b> & ((Y (! <b><i>(p)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(q)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((pre ((p) and ((pre ( not (p))) or FTP))) => ((q) or FTP)))",
            "diagramVariables": "TC = <b><i>(p)</i></b>, Response = <b><i>(q)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(p)</i></b> is true and any point in the interval where <b><i>(p)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fb1a7a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-BEFORE-AFTER",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "before M the sw shall after 2 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                7
            ],
            "component_name": "sw",
            "componentTextRange": [
                9,
                14
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                22,
                34
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                36,
                44
            ],
            "ft": "No meaning assigned.",
            "pt": "No meaning assigned.",
            "ftExpanded": "No meaning assigned.",
            "ptExpanded": "No meaning assigned.",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "No meaning assigned.",
            "diagramVariables": "M = <b><i>M</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "Unclear requirement. We are not sure how to interpret this requirement.",
            "diagram": "Undefined svg."
        },
        "_id": "0fb1f5c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-008",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when timer_60sec_expire the liquid_mixer shall until ( timer_120sec_expire | emergency_button)  satisfy valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "timer_60sec_expire",
                    "timer_120sec_expire",
                    "emergency_button",
                    "valve_2"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "timer_60sec_expire",
            "regular_condition": "timer_60sec_expire",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                24,
                39
            ],
            "stop_condition": "(( timer_120sec_expire | emergency_button ))",
            "timingTextRange": [
                47,
                93
            ],
            "post_condition": "(valve_2)",
            "responseTextRange": [
                96,
                110
            ],
            "regular_condition_coco": "timer_60sec_expire",
            "ft": "((LAST V (((! <b><i>timer_60sec_expire</i></b>) & ((! LAST) & (X <b><i>timer_60sec_expire</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>timer_60sec_expire</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "pt": "(H ((H (! <b><i>timer_60sec_expire</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>timer_60sec_expire</i></b> & ((Y (! <b><i>timer_60sec_expire</i></b>)) | FTP)))) -> <b><i>(valve_2)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>timer_60sec_expire</i></b>) & ((! LAST) & (X <b><i>timer_60sec_expire</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>timer_60sec_expire</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>timer_60sec_expire</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>timer_60sec_expire</i></b> & ((Y (! <b><i>timer_60sec_expire</i></b>)) | (! (Y TRUE)))))) -> <b><i>(valve_2)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not timer_60sec_expire)) or ((SI( (timer_60sec_expire and ((pre ( not timer_60sec_expire)) or FTP)), ( not (( timer_120sec_expire | emergency_button ))) )) => (valve_2))))",
            "diagramVariables": "TC = <b><i>timer_60sec_expire</i></b>, SC = <b><i>(( timer_120sec_expire | emergency_button ))</i></b>, Response = <b><i>(valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>timer_60sec_expire</i></b> is true and any point in the interval where <b><i>timer_60sec_expire</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "0fb243e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-002SP",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "In roll_hold mode, Autopilot shall always satisfy autopilot_engaged & no_other_lateral_mode",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "no_other_lateral_mode"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                17
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                19,
                27
            ],
            "timingTextRange": [
                35,
                40
            ],
            "post_condition": "(autopilot_engaged & no_other_lateral_mode)",
            "responseTextRange": [
                42,
                90
            ],
            "ft": "(G ((!Fin_<b><i>roll_hold</i></b>) | (Fin_<b><i>roll_hold</i></b> & (X ((F (Lin_<b><i>roll_hold</i></b> | LAST)) -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))))) & (<b><i>roll_hold</i></b> -> ((F (Lin_<b><i>roll_hold</i></b> | LAST)) -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))",
            "pt": "(H ((Lin_<b><i>roll_hold</i></b> & (!FTP)) -> (Y (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((!Lin_<b><i>roll_hold</i></b>) S ((!Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & Fin_<b><i>roll_hold</i></b>)))",
            "ftExpanded": "(G ((!((! <b><i>roll_hold</i></b>) & X <b><i>roll_hold</i></b>)) | (((! <b><i>roll_hold</i></b>) & X <b><i>roll_hold</i></b>) & (X ((F ((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST)) -> (((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))))) & (<b><i>roll_hold</i></b> -> ((F ((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST)) -> (((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))",
            "ptExpanded": "(H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (!(! Y TRUE))) -> (Y (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>)))))))) & (((!((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((!((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))) -> (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H(((( not roll_hold) and (pre ( roll_hold ))) and ( not FTP())) => (pre (S( ((autopilot_engaged and no_other_lateral_mode) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), (autopilot_engaged and no_other_lateral_mode) ))))) and ((S( (( not (( not roll_hold) and (pre ( roll_hold )))) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ( not (( not roll_hold) and (pre ( roll_hold )))) )) => (S( ((autopilot_engaged and no_other_lateral_mode) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), (autopilot_engaged and no_other_lateral_mode) )))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fb26af0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Meaningless_One",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "Before initialization UAV shall immediately satisfy yout > 0",
        "semantics": {
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                20
            ],
            "component_name": "UAV",
            "componentTextRange": [
                22,
                24
            ],
            "timingTextRange": [
                32,
                42
            ],
            "post_condition": "(yout > 0)",
            "responseTextRange": [
                44,
                59
            ],
            "ft": "No meaning assigned.",
            "pt": "No meaning assigned.",
            "ftExpanded": "No meaning assigned.",
            "ptExpanded": "No meaning assigned.",
            "component": "<b><i>UAV</i></b>",
            "CoCoSpecCode": "No meaning assigned.",
            "diagramVariables": "M = <b><i>initialization</i></b>, Response = <b><i>(yout > 0)</i></b>.",
            "description": "Unclear requirement. We are not sure how to interpret this requirement.",
            "diagram": "Undefined svg."
        },
        "_id": "0fb2b910-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Test1",
        "parent_reqid": "",
        "project": "NewProject",
        "rationale": "",
        "fulltext": "C shall after 10 secs satisfy p",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": []
            },
            "component_name": "C",
            "componentTextRange": [
                0,
                0
            ],
            "duration": "10 secs",
            "timingTextRange": [
                8,
                20
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                22,
                30
            ],
            "ft": "(((G[<=<b><i>10 secs</i></b>] (! <b><i>(p)</i></b>)) | ((! <b><i>(p)</i></b>) U ((! <b><i>(p)</i></b>) & LAST))) & ((F[<=<b><i>10 secs</i></b>+1] <b><i>(p)</i></b>) | (F[<<b><i>10 secs</i></b>+1] LAST)))",
            "pt": "((H ((O[<=<b><i>10 secs</i></b>] FTP) -> (! <b><i>(p)</i></b>))) & (H ((H (! <b><i>(p)</i></b>)) -> (O[<<b><i>10 secs</i></b>+1] FTP))))",
            "ftExpanded": "(((G[<=<b><i>10 secs</i></b>] (! <b><i>(p)</i></b>)) | ((! <b><i>(p)</i></b>) U ((! <b><i>(p)</i></b>) & LAST))) & ((F[<=<b><i>10 secs</i></b>+1] <b><i>(p)</i></b>) | (F[<<b><i>10 secs</i></b>+1] LAST)))",
            "ptExpanded": "((H ((O[<=<b><i>10 secs</i></b>] (! (Y TRUE))) -> (! <b><i>(p)</i></b>))) & (H ((H (! <b><i>(p)</i></b>)) -> (O[<<b><i>10 secs</i></b>+1] (! (Y TRUE))))))",
            "component": "<b><i>C</i></b>",
            "CoCoSpecCode": "((H((O(10 secs, 0, FTP)) -> ( not (p)))) and (H((H( not (p))) -> (O((10 secs, 0, FTP)))))",
            "diagramVariables": " n = <b><i>10 secs</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "After <b><i>10 secs</i></b>, the component \"<b><i>C</i></b>\" shall satisfy <b><i>(p)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg"
        },
        "_id": "0fb2e020-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "VariablesTest",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "in m if xA > 0 UAV shall satisfy yB > 0 & xin > 0",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "xA",
                    "yB",
                    "xin"
                ],
                "modes": [
                    "m"
                ]
            },
            "scope_mode": "m",
            "scopeTextRange": [
                0,
                3
            ],
            "regular_condition": "(xA > 0)",
            "qualifier_word": "if",
            "pre_condition": "(xA > 0)",
            "conditionTextRange": [
                5,
                13
            ],
            "component_name": "UAV",
            "componentTextRange": [
                15,
                17
            ],
            "post_condition": "(yB > 0 & xin > 0)",
            "responseTextRange": [
                25,
                48
            ],
            "ft": "(G ((!Fin_<b><i>m</i></b>) | (Fin_<b><i>m</i></b> & (X ((F (Lin_<b><i>m</i></b> | LAST)) -> ((Lin_<b><i>m</i></b> | LAST) V (<b><i>(xA > 0)</i></b> -> ((!(Lin_<b><i>m</i></b> | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))))) & (<b><i>m</i></b> -> ((F (Lin_<b><i>m</i></b> | LAST)) -> ((Lin_<b><i>m</i></b> | LAST) V (<b><i>(xA > 0)</i></b> -> ((!(Lin_<b><i>m</i></b> | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))",
            "pt": "(H (Lin_<b><i>m</i></b> -> (Y (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & Fin_<b><i>m</i></b>)) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>))))))) & (((!Lin_<b><i>m</i></b>) S ((!Lin_<b><i>m</i></b>) & Fin_<b><i>m</i></b>)) -> (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & Fin_<b><i>m</i></b>)) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>)))))",
            "ftExpanded": "(G ((!((! <b><i>m</i></b>) & X <b><i>m</i></b>)) | (((! <b><i>m</i></b>) & X <b><i>m</i></b>) & (X ((F ((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) -> (((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST) V (<b><i>(xA > 0)</i></b> -> ((!((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))))) & (<b><i>m</i></b> -> ((F ((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) -> (((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST) V (<b><i>(xA > 0)</i></b> -> ((!((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))",
            "ptExpanded": "(H (((! <b><i>m</i></b>) & (Y <b><i>m</i></b>)) -> (Y (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>))))))) & (((!((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) S ((!((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) -> (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>)))))",
            "component": "<b><i>UAV</i></b>",
            "CoCoSpecCode": "(H((( not m) and (pre ( m ))) => (pre ((S( (( not (xA > 0)) and (m and (FTP(_) or (pre (  not m ))))), ( not (xA > 0)) )) or ( not (S( (( not (yB > 0 and xin > 0)) and (xA > 0)), ( not (yB > 0 and xin > 0)) ))))))) and ((S( (( not (( not m) and (pre ( m )))) and (m and (FTP(_) or (pre (  not m ))))), ( not (( not m) and (pre ( m )))) )) => ((S( (( not (xA > 0)) and (m and (FTP(_) or (pre (  not m ))))), ( not (xA > 0)) )) or ( not (S( (( not (yB > 0 and xin > 0)) and (xA > 0)), ( not (yB > 0 and xin > 0)) )))))",
            "diagramVariables": "M = <b><i>m</i></b>, Response = <b><i>(yB > 0 & xin > 0)</i></b>.",
            "description": "At some future point, the component \"<b><i>UAV</i></b>\" shall satisfy <b><i>(yB > 0 & xin > 0)</i></b>. This is only enforced when \"<b><i>UAV</i></b>\" is in mode <b><i>m</i></b> and <b><i>(xA > 0)</i></b> is satisfied.",
            "diagram": "Undefined svg."
        },
        "_id": "0fb30730-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Kandy2",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "The AVAPrototype shall achieve a reasonable flight path angle",
        "semantics": {},
        "_id": "0fb32e40-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TestRequirement",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "In m1 AUTOPILOT shall satisfy p",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": [
                    "m1"
                ]
            },
            "scope_mode": "m1",
            "scopeTextRange": [
                0,
                4
            ],
            "component_name": "AUTOPILOT",
            "componentTextRange": [
                6,
                14
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                22,
                30
            ],
            "ft": "(G ((!Fin_<b><i>m1</i></b>) | (Fin_<b><i>m1</i></b> & (X ((F (Lin_<b><i>m1</i></b> | LAST)) -> ((!(Lin_<b><i>m1</i></b> | LAST)) U <b><i>(p)</i></b>)))))) & (<b><i>m1</i></b> -> ((F (Lin_<b><i>m1</i></b> | LAST)) -> ((!(Lin_<b><i>m1</i></b> | LAST)) U <b><i>(p)</i></b>)))",
            "pt": "(H (Lin_<b><i>m1</i></b> -> (Y (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & Fin_<b><i>m1</i></b>)))))) & (((!Lin_<b><i>m1</i></b>) S ((!Lin_<b><i>m1</i></b>) & Fin_<b><i>m1</i></b>)) -> (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & Fin_<b><i>m1</i></b>))))",
            "ftExpanded": "(G ((!((! <b><i>m1</i></b>) & X <b><i>m1</i></b>)) | (((! <b><i>m1</i></b>) & X <b><i>m1</i></b>) & (X ((F ((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) -> ((!((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) U <b><i>(p)</i></b>)))))) & (<b><i>m1</i></b> -> ((F ((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) -> ((!((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) U <b><i>(p)</i></b>)))",
            "ptExpanded": "(H (((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>)) -> (Y (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>))))))))) & (((!((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>))) S ((!((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>))) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>))))) -> (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>)))))))",
            "component": "<b><i>AUTOPILOT</i></b>",
            "CoCoSpecCode": "(H((( not m1) and (pre ( m1 ))) => (pre ( not (S( (( not (p)) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (p)) )))))) and ((S( (( not (( not m1) and (pre ( m1 )))) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (( not m1) and (pre ( m1 )))) )) => ( not (S( (( not (p)) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (p)) ))))",
            "diagramVariables": "M = <b><i>m1</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "At some future point, the component \"<b><i>AUTOPILOT</i></b>\" shall satisfy <b><i>(p)</i></b>. This is only enforced when \"<b><i>AUTOPILOT</i></b>\" is in mode <b><i>m1</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "0fb35550-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-004SP",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "NeuralNetwork shall for 200 sec satisfy (x = xt & y = yt) => abs_error(zt - z) <= 0.01",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "xt",
                    "y",
                    "yt",
                    "abs_error",
                    "zt",
                    "z"
                ],
                "modes": []
            },
            "component_name": "NeuralNetwork",
            "componentTextRange": [
                0,
                12
            ],
            "duration": "200 sec",
            "timingTextRange": [
                20,
                30
            ],
            "post_condition": "(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)",
            "responseTextRange": [
                32,
                85
            ],
            "ft": "(G[<=<b><i>200 sec</i></b>] <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) | (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> U (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> & (LAST | LAST)))",
            "pt": "((O[<=<b><i>200 sec</i></b>] FTP) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) S (((O[<=<b><i>200 sec</i></b>] FTP) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) & FTP)",
            "ftExpanded": "(G[<=<b><i>200 sec</i></b>] <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) | (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> U (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> & (LAST | LAST)))",
            "ptExpanded": "((O[<=<b><i>200 sec</i></b>] (! Y TRUE)) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) S (((O[<=<b><i>200 sec</i></b>] (! Y TRUE)) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) & (! Y TRUE))",
            "component": "<b><i>NeuralNetwork</i></b>",
            "CoCoSpecCode": "S( (((OTlore(200 sec, FTP() )) => (( x = xt and y = yt ) => abs_error ( zt - z ) <= 0.01)) and FTP()), ((OTlore(200 sec, FTP() )) => (( x = xt and y = yt ) => abs_error ( zt - z ) <= 0.01)) )",
            "diagramVariables": " n = <b><i>200 sec</i></b>, Response = <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>.",
            "description": "TIME, the component \"<b><i>NeuralNetwork</i></b>\" shall satisfy <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>.",
            "diagram": "Undefined svg."
        },
        "_id": "0fb3a370-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-004SP",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "When in roll_hold mode when steady_state Autopilot shall always satisfy abs(roll_err) <= 1.0",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "steady_state",
                    "abs",
                    "roll_err"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "regular_condition": "(steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(steady_state)",
            "conditionTextRange": [
                23,
                39
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                41,
                49
            ],
            "timingTextRange": [
                57,
                62
            ],
            "post_condition": "(abs ( roll_err ) <= 1.0)",
            "responseTextRange": [
                64,
                91
            ],
            "ft": "(G ((!Fin_<b><i>roll_hold</i></b>) | (Fin_<b><i>roll_hold</i></b> & (X ((F (Lin_<b><i>roll_hold</i></b> | LAST)) -> (((Lin_<b><i>roll_hold</i></b> | LAST) V (((!<b><i>(steady_state)</i></b>) & ((X <b><i>(steady_state)</i></b>) & (!(Lin_<b><i>roll_hold</i></b> | LAST)))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs ( roll_err ) <= 1.0)</i></b>)) & (!(Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs ( roll_err ) <= 1.0)</i></b>)))))))) & (<b><i>roll_hold</i></b> -> ((F (Lin_<b><i>roll_hold</i></b> | LAST)) -> (((Lin_<b><i>roll_hold</i></b> | LAST) V (((!<b><i>(steady_state)</i></b>) & ((X <b><i>(steady_state)</i></b>) & (!(Lin_<b><i>roll_hold</i></b> | LAST)))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs ( roll_err ) <= 1.0)</i></b>)) & (!(Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs ( roll_err ) <= 1.0)</i></b>)))))",
            "pt": "(H ((Lin_<b><i>roll_hold</i></b> & (!FTP)) -> (Y ((((!<b><i>(steady_state)</i></b>) S ((!<b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs ( roll_err ) <= 1.0)</i></b> S (<b><i>(abs ( roll_err ) <= 1.0)</i></b> & ((<b><i>(steady_state)</i></b> & (Y (!<b><i>(steady_state)</i></b>))) | (<b><i>(steady_state)</i></b> & Fin_<b><i>roll_hold</i></b>))))) S ((((!<b><i>(steady_state)</i></b>) S ((!<b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs ( roll_err ) <= 1.0)</i></b> S (<b><i>(abs ( roll_err ) <= 1.0)</i></b> & ((<b><i>(steady_state)</i></b> & (Y (!<b><i>(steady_state)</i></b>))) | (<b><i>(steady_state)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>))))) & (((!Lin_<b><i>roll_hold</i></b>) S ((!Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((((!<b><i>(steady_state)</i></b>) S ((!<b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs ( roll_err ) <= 1.0)</i></b> S (<b><i>(abs ( roll_err ) <= 1.0)</i></b> & ((<b><i>(steady_state)</i></b> & (Y (!<b><i>(steady_state)</i></b>))) | (<b><i>(steady_state)</i></b> & Fin_<b><i>roll_hold</i></b>))))) S ((((!<b><i>(steady_state)</i></b>) S ((!<b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs ( roll_err ) <= 1.0)</i></b> S (<b><i>(abs ( roll_err ) <= 1.0)</i></b> & ((<b><i>(steady_state)</i></b> & (Y (!<b><i>(steady_state)</i></b>))) | (<b><i>(steady_state)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>)))",
            "ftExpanded": "(G ((!((! <b><i>roll_hold</i></b>) & X <b><i>roll_hold</i></b>)) | (((! <b><i>roll_hold</i></b>) & X <b><i>roll_hold</i></b>) & (X ((F ((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST)) -> ((((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST) V (((!<b><i>(steady_state)</i></b>) & ((X <b><i>(steady_state)</i></b>) & (!((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST)))) -> ((X (((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST) V <b><i>(abs ( roll_err ) <= 1.0)</i></b>)) & (!((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST))))) & (<b><i>(steady_state)</i></b> -> (((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST) V <b><i>(abs ( roll_err ) <= 1.0)</i></b>)))))))) & (<b><i>roll_hold</i></b> -> ((F ((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST)) -> ((((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST) V (((!<b><i>(steady_state)</i></b>) & ((X <b><i>(steady_state)</i></b>) & (!((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST)))) -> ((X (((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST) V <b><i>(abs ( roll_err ) <= 1.0)</i></b>)) & (!((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST))))) & (<b><i>(steady_state)</i></b> -> (((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST) V <b><i>(abs ( roll_err ) <= 1.0)</i></b>)))))",
            "ptExpanded": "(H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (!(! Y TRUE))) -> (Y ((((!<b><i>(steady_state)</i></b>) S ((!<b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))) | (<b><i>(abs ( roll_err ) <= 1.0)</i></b> S (<b><i>(abs ( roll_err ) <= 1.0)</i></b> & ((<b><i>(steady_state)</i></b> & (Y (!<b><i>(steady_state)</i></b>))) | (<b><i>(steady_state)</i></b> & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>)))))))) S ((((!<b><i>(steady_state)</i></b>) S ((!<b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))) | (<b><i>(abs ( roll_err ) <= 1.0)</i></b> S (<b><i>(abs ( roll_err ) <= 1.0)</i></b> & ((<b><i>(steady_state)</i></b> & (Y (!<b><i>(steady_state)</i></b>))) | (<b><i>(steady_state)</i></b> & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>)))))))) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>)))))))) & (((!((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((!((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))) -> ((((!<b><i>(steady_state)</i></b>) S ((!<b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))) | (<b><i>(abs ( roll_err ) <= 1.0)</i></b> S (<b><i>(abs ( roll_err ) <= 1.0)</i></b> & ((<b><i>(steady_state)</i></b> & (Y (!<b><i>(steady_state)</i></b>))) | (<b><i>(steady_state)</i></b> & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>)))))))) S ((((!<b><i>(steady_state)</i></b>) S ((!<b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))) | (<b><i>(abs ( roll_err ) <= 1.0)</i></b> S (<b><i>(abs ( roll_err ) <= 1.0)</i></b> & ((<b><i>(steady_state)</i></b> & (Y (!<b><i>(steady_state)</i></b>))) | (<b><i>(steady_state)</i></b> & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>)))))))) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H(((( not roll_hold) and (pre ( roll_hold ))) and ( not FTP())) => (pre (S( (((S( (( not (steady_state)) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ( not (steady_state)) )) or (S( ((abs ( roll_err ) <= 1.0) and (((steady_state) and (pre ( not (steady_state)))) or ((steady_state) and (roll_hold and (FTP() or (pre (  not roll_hold ))))))), (abs ( roll_err ) <= 1.0) ))) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ((S( (( not (steady_state)) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ( not (steady_state)) )) or (S( ((abs ( roll_err ) <= 1.0) and (((steady_state) and (pre ( not (steady_state)))) or ((steady_state) and (roll_hold and (FTP() or (pre (  not roll_hold ))))))), (abs ( roll_err ) <= 1.0) ))) ))))) and ((S( (( not (( not roll_hold) and (pre ( roll_hold )))) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ( not (( not roll_hold) and (pre ( roll_hold )))) )) => (S( (((S( (( not (steady_state)) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ( not (steady_state)) )) or (S( ((abs ( roll_err ) <= 1.0) and (((steady_state) and (pre ( not (steady_state)))) or ((steady_state) and (roll_hold and (FTP() or (pre (  not roll_hold ))))))), (abs ( roll_err ) <= 1.0) ))) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ((S( (( not (steady_state)) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ( not (steady_state)) )) or (S( ((abs ( roll_err ) <= 1.0) and (((steady_state) and (pre ( not (steady_state)))) or ((steady_state) and (roll_hold and (FTP() or (pre (  not roll_hold ))))))), (abs ( roll_err ) <= 1.0) ))) )))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs ( roll_err ) <= 1.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs ( roll_err ) <= 1.0)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b> and <b><i>(steady_state)</i></b> is satisfied.",
            "diagram": "Undefined svg."
        },
        "_id": "0fb3f190-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "MetricTemporalProperty",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "When not in M and when C the software shall within 3 secs satisfy P",
        "semantics": {
            "scope": {
                "type": "notin"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "C",
                    "P"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                12
            ],
            "regular_condition": "(C)",
            "qualifier_word": "when",
            "pre_condition": "(C)",
            "conditionTextRange": [
                14,
                23
            ],
            "component_name": "software",
            "componentTextRange": [
                25,
                36
            ],
            "duration": "3 secs",
            "timingTextRange": [
                44,
                56
            ],
            "post_condition": "(P)",
            "responseTextRange": [
                58,
                66
            ],
            "ft": "(G ((!Lin_<b><i>M</i></b>) | (Lin_<b><i>M</i></b> & (X ((F (Fin_<b><i>M</i></b> | LAST)) -> (((Fin_<b><i>M</i></b> | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(Fin_<b><i>M</i></b> | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))) & (!(Fin_<b><i>M</i></b> | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))))))))) & ((!<b><i>M</i></b>) -> ((F (Fin_<b><i>M</i></b> | LAST)) -> (((Fin_<b><i>M</i></b> | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(Fin_<b><i>M</i></b> | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))) & (!(Fin_<b><i>M</i></b> | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))))))",
            "pt": "(H ((LNin_<b><i>M</i></b> & (!FTP)) -> (Y (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) & FNin_<b><i>M</i></b>))))) & (((!LNin_<b><i>M</i></b>) S ((!LNin_<b><i>M</i></b>) & FNin_<b><i>M</i></b>)) -> (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) & FNin_<b><i>M</i></b>)))",
            "ftExpanded": "(G ((!(<b><i>M</i></b> & X (! <b><i>M</i></b>))) | ((<b><i>M</i></b> & X (! <b><i>M</i></b>)) & (X ((F (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)) -> (((((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))))))))) & ((!<b><i>M</i></b>) -> ((F (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)) -> (((((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))))))",
            "ptExpanded": "(H (((<b><i>M</i></b> & (Y ! <b><i>M</i></b>)) & (!(! Y TRUE))) -> (Y (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>)))))))) & (((!(<b><i>M</i></b> & (Y ! <b><i>M</i></b>))) S ((!(<b><i>M</i></b> & (Y ! <b><i>M</i></b>))) & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) -> (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))))",
            "component": "<b><i>software</i></b>",
            "CoCoSpecCode": "S( (((,,( ( ( (C) and (pre ( not (C)))) or ((C) and (( not M) and (FTP() or (pre ( M )))))) and ( not (P)), (H(((M and (pre (  not M ))) and ( not FTP())) => (pre (((,,( ( ( (C) and (pre ( not (C)))) or ((C) and (( not M) and (FTP() or (pre ( M )))))) and ( not (P)))) => (OTlore(3 secs-1, ((( not M) and (FTP() or (pre ( M )))) or (P)) ))) )",
            "diagramVariables": "M = <b><i>M</i></b>,  n = <b><i>3 secs</i></b>, Response = <b><i>(P)</i></b>.",
            "description": "We are working on formalizing this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
            "diagram": "Undefined svg."
        },
        "_id": "0fb418a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "sdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhakssdskdasjkdhaksdskdasjkdhaks",
        "fulltext": "TriplexSignalMonitor shall always satisfy no_fail => set_value = mid_value",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "no_fail",
                    "set_value",
                    "mid_value"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(no_fail => set_value = mid_value)",
            "responseTextRange": [
                34,
                73
            ],
            "ft": "G <b><i>(no_fail -> set_value = mid_value)</i></b>",
            "pt": "<b><i>(no_fail -> set_value = mid_value)</i></b> S (<b><i>(no_fail -> set_value = mid_value)</i></b> & FTP)",
            "ftExpanded": "G <b><i>(no_fail -> set_value = mid_value)</i></b>",
            "ptExpanded": "<b><i>(no_fail -> set_value = mid_value)</i></b> S (<b><i>(no_fail -> set_value = mid_value)</i></b> & (! Y TRUE))",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(no_fail -> set_value = mid_value)",
            "diagramVariables": "Response = <b><i>(no_fail -> set_value = mid_value)</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(no_fail -> set_value = mid_value)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fb48dd0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003b",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "In roll_hold mode RollHoldReference shall immediately satisfy abs_roll_angle < 6 => roll_hold_reference = 0",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollHoldReference",
            "componentTextRange": [
                18,
                34
            ],
            "timingTextRange": [
                42,
                52
            ],
            "post_condition": "(abs_roll_angle < 6 => roll_hold_reference = 0)",
            "responseTextRange": [
                54,
                106
            ],
            "ft": "(G ((!Fin_<b><i>roll_hold</i></b>) | (Fin_<b><i>roll_hold</i></b> & (X ((F (Lin_<b><i>roll_hold</i></b> | LAST)) -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>))))) & (<b><i>roll_hold</i></b> -> ((F (Lin_<b><i>roll_hold</i></b> | LAST)) -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>))",
            "pt": "(H ((Lin_<b><i>roll_hold</i></b> & (!FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((!Lin_<b><i>roll_hold</i></b>) S ((!Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>) & Fin_<b><i>roll_hold</i></b>)))",
            "ftExpanded": "(G ((!((! <b><i>roll_hold</i></b>) & X <b><i>roll_hold</i></b>)) | (((! <b><i>roll_hold</i></b>) & X <b><i>roll_hold</i></b>) & (X ((F ((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST)) -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>))))) & (<b><i>roll_hold</i></b> -> ((F ((<b><i>roll_hold</i></b> & X (! <b><i>roll_hold</i></b>)) | LAST)) -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>))",
            "ptExpanded": "(H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (!(! Y TRUE))) -> (Y (((<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))) -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))) -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>)))))))) & (((!((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((!((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))) -> (((<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))) -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))) -> <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>) & (<b><i>roll_hold</i></b> & ((! Y TRUE) | (Y ! <b><i>roll_hold</i></b>))))))",
            "component": "<b><i>RollHoldReference</i></b>",
            "CoCoSpecCode": "(H(((( not roll_hold) and (pre ( roll_hold ))) and ( not FTP())) => (pre (S( (((roll_hold and (FTP() or (pre (  not roll_hold )))) => (abs_roll_angle < 6 => roll_hold_reference = 0)) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ((roll_hold and (FTP() or (pre (  not roll_hold )))) => (abs_roll_angle < 6 => roll_hold_reference = 0)) ))))) and ((S( (( not (( not roll_hold) and (pre ( roll_hold )))) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ( not (( not roll_hold) and (pre ( roll_hold )))) )) => (S( (((roll_hold and (FTP() or (pre (  not roll_hold )))) => (abs_roll_angle < 6 => roll_hold_reference = 0)) and (roll_hold and (FTP() or (pre (  not roll_hold ))))), ((roll_hold and (FTP() or (pre (  not roll_hold )))) => (abs_roll_angle < 6 => roll_hold_reference = 0)) )))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollHoldReference</i></b>\" shall satisfy <b><i>(abs_roll_angle < 6 => roll_hold_reference = 0)</i></b>. This is only enforced when \"<b><i>RollHoldReference</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0fb50300-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Testing after",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "after initialization mode AUTOPILOT  shall after 3 seconds satisfy xin > 0",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "xin"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                24
            ],
            "component_name": "AUTOPILOT",
            "componentTextRange": [
                26,
                34
            ],
            "duration": "3 seconds",
            "timingTextRange": [
                43,
                57
            ],
            "post_condition": "(xin > 0)",
            "responseTextRange": [
                59,
                73
            ],
            "ft": "((!Lin_<b><i>initialization</i></b>) U (Lin_<b><i>initialization</i></b> & (X ((!(F[<=<b><i>3 seconds</i></b>] (!(!<b><i>(xin > 0)</i></b>)))) & (F[<=<b><i>3 seconds</i></b>+1] <b><i>(xin > 0)</i></b>))))) | (G (!Lin_<b><i>initialization</i></b>))",
            "pt": "Under construction.",
            "ftExpanded": "((!(<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>))) U ((<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>)) & (X ((!(F[<=<b><i>3 seconds</i></b>] (!(!<b><i>(xin > 0)</i></b>)))) & (F[<=<b><i>3 seconds</i></b>+1] <b><i>(xin > 0)</i></b>))))) | (G (!(<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>))))",
            "ptExpanded": "Under construction.",
            "component": "<b><i>AUTOPILOT</i></b>",
            "CoCoSpecCode": "Under construction.",
            "diagramVariables": "M = <b><i>initialization</i></b>,  n = <b><i>3 seconds</i></b>, Response = <b><i>(xin > 0)</i></b>.",
            "description": "After <b><i>3 seconds</i></b>, the component \"<b><i>AUTOPILOT</i></b>\" shall satisfy <b><i>(xin > 0)</i></b>. This is only enforced strictly after the first occurence of <b><i>initialization</i></b> (if <b><i>initialization</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_after_satisfaction.svg"
        },
        "_id": "0fb52a10-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "SIM-001SP",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "After phase_1 the simulation shall always satisfy VelDiff < 5 feet per minute",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "VelDiff"
                ],
                "modes": [
                    "phase_1"
                ]
            },
            "scope_mode": "phase_1",
            "scopeTextRange": [
                0,
                12
            ],
            "component_name": "simulation",
            "componentTextRange": [
                14,
                27
            ],
            "timingTextRange": [
                35,
                40
            ],
            "post_condition": "(VelDiff < 5)",
            "responseTextRange": [
                42,
                60
            ],
            "ft": "((!Lin_<b><i>phase_1</i></b>) U (Lin_<b><i>phase_1</i></b> & (X (G <b><i>(VelDiff < 5)</i></b>)))) | (G (!Lin_<b><i>phase_1</i></b>))",
            "pt": "(O FLin_<b><i>phase_1</i></b>) -> (<b><i>(VelDiff < 5)</i></b> S (<b><i>(VelDiff < 5)</i></b> & FLin_<b><i>phase_1</i></b>))",
            "ftExpanded": "((!(<b><i>phase_1</i></b> & X (! <b><i>phase_1</i></b>))) U ((<b><i>phase_1</i></b> & X (! <b><i>phase_1</i></b>)) & (X (G <b><i>(VelDiff < 5)</i></b>)))) | (G (!(<b><i>phase_1</i></b> & X (! <b><i>phase_1</i></b>))))",
            "ptExpanded": "(O (((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)) & Y (H (! ((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)))))) -> (<b><i>(VelDiff < 5)</i></b> S (<b><i>(VelDiff < 5)</i></b> & (((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)) & Y (H (! ((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)))))))",
            "component": "<b><i>simulation</i></b>",
            "CoCoSpecCode": "(O((( not phase_1) and (pre ( phase_1 ))) and pre (H( not (( not phase_1) and (pre ( phase_1 ))))))) => (S( ((VelDiff < 5) and ((( not phase_1) and (pre ( phase_1 ))) and pre (H( not (( not phase_1) and (pre ( phase_1 ))))))), (VelDiff < 5) ))",
            "diagramVariables": "M = <b><i>phase_1</i></b>, Response = <b><i>(VelDiff < 5)</i></b>.",
            "description": "Always, the component \"<b><i>simulation</i></b>\" shall satisfy <b><i>(VelDiff < 5)</i></b>. This is only enforced strictly after the first occurence of <b><i>phase_1</i></b> (if <b><i>phase_1</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "0fb55120-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Kandy1",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "In reality we want to check it within 1-sigma which is 70% of the time (?)",
        "fulltext": "when GPSavailable the AVAprototype shall always satisfy difference(measured, actual) <1",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "GPSavailable",
                    "difference",
                    "measured",
                    "actual"
                ],
                "modes": []
            },
            "regular_condition": "(GPSavailable)",
            "qualifier_word": "when",
            "pre_condition": "(GPSavailable)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "AVAprototype",
            "componentTextRange": [
                18,
                33
            ],
            "timingTextRange": [
                41,
                46
            ],
            "post_condition": "(difference ( measured , actual ) < 1)",
            "responseTextRange": [
                48,
                86
            ],
            "ft": "(G (((!<b><i>(GPSavailable)</i></b>) & (X <b><i>(GPSavailable)</i></b>)) -> (X (G <b><i>(difference ( measured , actual ) < 1)</i></b>)))) & (<b><i>(GPSavailable)</i></b> -> (G <b><i>(difference ( measured , actual ) < 1)</i></b>))",
            "pt": "(((!<b><i>(GPSavailable)</i></b>) S ((!<b><i>(GPSavailable)</i></b>) & FTP)) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & ((<b><i>(GPSavailable)</i></b> & (Y (!<b><i>(GPSavailable)</i></b>))) | (<b><i>(GPSavailable)</i></b> & FTP))))) S ((((!<b><i>(GPSavailable)</i></b>) S ((!<b><i>(GPSavailable)</i></b>) & FTP)) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & ((<b><i>(GPSavailable)</i></b> & (Y (!<b><i>(GPSavailable)</i></b>))) | (<b><i>(GPSavailable)</i></b> & FTP))))) & FTP)",
            "ftExpanded": "(G (((!<b><i>(GPSavailable)</i></b>) & (X <b><i>(GPSavailable)</i></b>)) -> (X (G <b><i>(difference ( measured , actual ) < 1)</i></b>)))) & (<b><i>(GPSavailable)</i></b> -> (G <b><i>(difference ( measured , actual ) < 1)</i></b>))",
            "ptExpanded": "(((!<b><i>(GPSavailable)</i></b>) S ((!<b><i>(GPSavailable)</i></b>) & (! Y TRUE))) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & ((<b><i>(GPSavailable)</i></b> & (Y (!<b><i>(GPSavailable)</i></b>))) | (<b><i>(GPSavailable)</i></b> & (! Y TRUE)))))) S ((((!<b><i>(GPSavailable)</i></b>) S ((!<b><i>(GPSavailable)</i></b>) & (! Y TRUE))) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & ((<b><i>(GPSavailable)</i></b> & (Y (!<b><i>(GPSavailable)</i></b>))) | (<b><i>(GPSavailable)</i></b> & (! Y TRUE)))))) & (! Y TRUE))",
            "component": "<b><i>AVAprototype</i></b>",
            "CoCoSpecCode": "S( (((S( (( not (GPSavailable)) and FTP()), ( not (GPSavailable)) )) or (S( ((difference ( measured , actual ) < 1) and (((GPSavailable) and (pre ( not (GPSavailable)))) or ((GPSavailable) and FTP()))), (difference ( measured , actual ) < 1) ))) and FTP()), ((S( (( not (GPSavailable)) and FTP()), ( not (GPSavailable)) )) or (S( ((difference ( measured , actual ) < 1) and (((GPSavailable) and (pre ( not (GPSavailable)))) or ((GPSavailable) and FTP()))), (difference ( measured , actual ) < 1) ))) )",
            "diagramVariables": "Response = <b><i>(difference ( measured , actual ) < 1)</i></b>.",
            "description": "Upon <b><i>(GPSavailable)</i></b> becoming true, always, the component \"<b><i>AVAprototype</i></b>\" shall satisfy <b><i>(difference ( measured , actual ) < 1)</i></b>.",
            "diagram": "Undefined svg."
        },
        "_id": "0fb59f40-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Kandy2a",
        "parent_reqid": "Kandy2",
        "project": "TestRequirements",
        "rationale": "This is required to achieve the desired orbit of the payloads. It should happen within 1-sigma (70% of time)?",
        "fulltext": "After BoostCompleted the AvaPrototype shall always satisfy flightPathAngleDiff < 0.5",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flightPathAngleDiff"
                ],
                "modes": [
                    "BoostCompleted"
                ]
            },
            "scope_mode": "BoostCompleted",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "AvaPrototype",
            "componentTextRange": [
                21,
                36
            ],
            "timingTextRange": [
                44,
                49
            ],
            "post_condition": "(flightPathAngleDiff < 0.5)",
            "responseTextRange": [
                51,
                83
            ],
            "ft": "((!Lin_<b><i>BoostCompleted</i></b>) U (Lin_<b><i>BoostCompleted</i></b> & (X (G <b><i>(flightPathAngleDiff < 0.5)</i></b>)))) | (G (!Lin_<b><i>BoostCompleted</i></b>))",
            "pt": "(O FLin_<b><i>BoostCompleted</i></b>) -> (<b><i>(flightPathAngleDiff < 0.5)</i></b> S (<b><i>(flightPathAngleDiff < 0.5)</i></b> & FLin_<b><i>BoostCompleted</i></b>))",
            "ftExpanded": "((!(<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>))) U ((<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>)) & (X (G <b><i>(flightPathAngleDiff < 0.5)</i></b>)))) | (G (!(<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>))))",
            "ptExpanded": "(O (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))) -> (<b><i>(flightPathAngleDiff < 0.5)</i></b> S (<b><i>(flightPathAngleDiff < 0.5)</i></b> & (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))))",
            "component": "<b><i>AvaPrototype</i></b>",
            "CoCoSpecCode": "(O((( not BoostCompleted) and (pre ( BoostCompleted ))) and pre (H( not (( not BoostCompleted) and (pre ( BoostCompleted ))))))) => (S( ((flightPathAngleDiff < 0.5) and ((( not BoostCompleted) and (pre ( BoostCompleted ))) and pre (H( not (( not BoostCompleted) and (pre ( BoostCompleted ))))))), (flightPathAngleDiff < 0.5) ))",
            "diagramVariables": "M = <b><i>BoostCompleted</i></b>, Response = <b><i>(flightPathAngleDiff < 0.5)</i></b>.",
            "description": "Always, the component \"<b><i>AvaPrototype</i></b>\" shall satisfy <b><i>(flightPathAngleDiff < 0.5)</i></b>. This is only enforced strictly after the first occurence of <b><i>BoostCompleted</i></b> (if <b><i>BoostCompleted</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "0fb5c650-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Kandy2b",
        "parent_reqid": "Kandy2",
        "project": "TestRequirements",
        "rationale": "This is the goal (and Kandy2a is what is the least expected)",
        "fulltext": "After BoostCompleted the AvaPrototype shall always satisfy flightPathAngleDiff < 0.1",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flightPathAngleDiff"
                ],
                "modes": [
                    "BoostCompleted"
                ]
            },
            "scope_mode": "BoostCompleted",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "AvaPrototype",
            "componentTextRange": [
                21,
                36
            ],
            "timingTextRange": [
                44,
                49
            ],
            "post_condition": "(flightPathAngleDiff < 0.1)",
            "responseTextRange": [
                51,
                83
            ],
            "ft": "((!Lin_<b><i>BoostCompleted</i></b>) U (Lin_<b><i>BoostCompleted</i></b> & (X (G <b><i>(flightPathAngleDiff < 0.1)</i></b>)))) | (G (!Lin_<b><i>BoostCompleted</i></b>))",
            "pt": "(O FLin_<b><i>BoostCompleted</i></b>) -> (<b><i>(flightPathAngleDiff < 0.1)</i></b> S (<b><i>(flightPathAngleDiff < 0.1)</i></b> & FLin_<b><i>BoostCompleted</i></b>))",
            "ftExpanded": "((!(<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>))) U ((<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>)) & (X (G <b><i>(flightPathAngleDiff < 0.1)</i></b>)))) | (G (!(<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>))))",
            "ptExpanded": "(O (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))) -> (<b><i>(flightPathAngleDiff < 0.1)</i></b> S (<b><i>(flightPathAngleDiff < 0.1)</i></b> & (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))))",
            "component": "<b><i>AvaPrototype</i></b>",
            "CoCoSpecCode": "(O((( not BoostCompleted) and (pre ( BoostCompleted ))) and pre (H( not (( not BoostCompleted) and (pre ( BoostCompleted ))))))) => (S( ((flightPathAngleDiff < 0.1) and ((( not BoostCompleted) and (pre ( BoostCompleted ))) and pre (H( not (( not BoostCompleted) and (pre ( BoostCompleted ))))))), (flightPathAngleDiff < 0.1) ))",
            "diagramVariables": "M = <b><i>BoostCompleted</i></b>, Response = <b><i>(flightPathAngleDiff < 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>AvaPrototype</i></b>\" shall satisfy <b><i>(flightPathAngleDiff < 0.1)</i></b>. This is only enforced strictly after the first occurence of <b><i>BoostCompleted</i></b> (if <b><i>BoostCompleted</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "0fb5ed60-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-AFTER",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "only after p shall the sw , after 2 ticks, satisfy q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyAfter",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "q"
                ],
                "modes": [
                    "p"
                ]
            },
            "scope_mode": "p",
            "scopeTextRange": [
                0,
                11
            ],
            "component_name": "sw",
            "componentTextRange": [
                19,
                24
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                26,
                41
            ],
            "post_condition": "(q)",
            "responseTextRange": [
                43,
                51
            ],
            "ft": "(((F[<=<b><i>2</i></b>] <b><i>(q)</i></b>) | (F[<<b><i>2</i></b>] (FLin_<b><i>p</i></b> | LAST))) | ((G[<=<b><i>2</i></b>+1] (! <b><i>(q)</i></b>)) | ((FLin_<b><i>p</i></b> | LAST) V (! <b><i>(q)</i></b>))))",
            "pt": "((H ((FLin_<b><i>p</i></b> & (! FTP)) -> (Y (H ((O[=<b><i>2</i></b>+1] FTP) -> (((O[<=<b><i>2</i></b>] FTP) | (! <b><i>(q)</i></b>)) | (Y (O <b><i>(q)</i></b>)))))))) & ((H (! FLin_<b><i>p</i></b>)) -> (H ((O[=<b><i>2</i></b>+1] FTP) -> (((O[<=<b><i>2</i></b>] FTP) | (! <b><i>(q)</i></b>)) | (Y (O <b><i>(q)</i></b>)))))))",
            "ftExpanded": "(((F[<=<b><i>2</i></b>] <b><i>(q)</i></b>) | (F[<<b><i>2</i></b>] (((<b><i>p</i></b> & (! LAST)) & (X (! <b><i>p</i></b>))) | LAST))) | ((G[<=<b><i>2</i></b>+1] (! <b><i>(q)</i></b>)) | ((((<b><i>p</i></b> & (! LAST)) & (X (! <b><i>p</i></b>))) | LAST) V (! <b><i>(q)</i></b>))))",
            "ptExpanded": "((H (((((! <b><i>p</i></b>) & (Y <b><i>p</i></b>)) & (Y (H (! ((! <b><i>p</i></b>) & (Y <b><i>p</i></b>)))))) & (Y TRUE)) -> (Y (H ((O[=<b><i>2</i></b>+1] (! (Y TRUE))) -> (((O[<=<b><i>2</i></b>] (! (Y TRUE))) | (! <b><i>(q)</i></b>)) | (Y (O <b><i>(q)</i></b>)))))))) & ((H (! (((! <b><i>p</i></b>) & (Y <b><i>p</i></b>)) & (Y (H (! ((! <b><i>p</i></b>) & (Y <b><i>p</i></b>)))))))) -> (H ((O[=<b><i>2</i></b>+1] (! (Y TRUE))) -> (((O[<=<b><i>2</i></b>] (! (Y TRUE))) | (! <b><i>(q)</i></b>)) | (Y (O <b><i>(q)</i></b>)))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H((((( not p) and (pre (p))) and pre (H( not (( not p) and (pre (p)))))) and ( not FTP)) => (pre (H((OT(2+1,2+1,FTP)) => (((OT(2,0,FTP)) or ( not (q))) or (pre (O((q)))))))))) and ((H( not ((( not p) and (pre (p))) and pre (H( not (( not p) and (pre (p)))))))) => (H((OT(2+1,2+1,FTP)) => (((OT(2,0,FTP)) or ( not (q))) or (pre (O((q)))))))))",
            "diagramVariables": "M = <b><i>p</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(q)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and including) the first interval where <b><i>p</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must either hold at some point with distance <=<b><i>2</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>2</i></b>), or RES must remain false for <b><i>2</i></b>+1 time points starting at the trigger (i.e., at trigger, trigger+1, ..., and trigger+<b><i>2</i></b>+1), or to the end of the interval if it ends sooner than trigger+<b><i>2</i></b>+1.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyAfter_null_after_satisfaction.svg"
        },
        "_id": "0fb63b80-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-UNLESS-ALWAYS-EXPRS",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "unless x * x < 0, the component shall always satisfy abs(x)>= 0 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "abs"
                ],
                "modes": []
            },
            "regular_condition": "(! (x * x < 0))",
            "qualifier_word": "unless",
            "pre_condition": "(x * x < 0)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "component",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                43
            ],
            "post_condition": "(abs ( x ) >= 0)",
            "responseTextRange": [
                45,
                62
            ],
            "ft": "((LAST V (((! <b><i>(! (x * x < 0))</i></b>) & ((! LAST) & (X <b><i>(! (x * x < 0))</i></b>))) -> (X (LAST V <b><i>(abs ( x ) >= 0)</i></b>)))) & (<b><i>(! (x * x < 0))</i></b> -> (LAST V <b><i>(abs ( x ) >= 0)</i></b>)))",
            "pt": "(H ((H (! <b><i>(! (x * x < 0))</i></b>)) | <b><i>(abs ( x ) >= 0)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(! (x * x < 0))</i></b>) & ((! LAST) & (X <b><i>(! (x * x < 0))</i></b>))) -> (X (LAST V <b><i>(abs ( x ) >= 0)</i></b>)))) & (<b><i>(! (x * x < 0))</i></b> -> (LAST V <b><i>(abs ( x ) >= 0)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(! (x * x < 0))</i></b>)) | <b><i>(abs ( x ) >= 0)</i></b>))",
            "component": "<b><i>component</i></b>",
            "CoCoSpecCode": "(H((H( not (not (x * x < 0)))) or (abs ( x ) >= 0)))",
            "diagramVariables": "TC = <b><i>(! (x * x < 0))</i></b>, Response = <b><i>(abs ( x ) >= 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! (x * x < 0))</i></b> is true and any point in the interval where <b><i>(! (x * x < 0))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "0fb6b0b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-006",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when liquid_level_2 the liquid_mixer shall until ( timer_60sec_expire | emergency_button)  satisfy stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "timer_60sec_expire",
                    "emergency_button",
                    "stirring_motor"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "liquid_level_2",
            "regular_condition": "liquid_level_2",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "stop_condition": "(( timer_60sec_expire | emergency_button ))",
            "timingTextRange": [
                43,
                88
            ],
            "post_condition": "(stirring_motor)",
            "responseTextRange": [
                91,
                112
            ],
            "regular_condition_coco": "liquid_level_2",
            "ft": "((LAST V (((! <b><i>liquid_level_2</i></b>) & ((! LAST) & (X <b><i>liquid_level_2</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>liquid_level_2</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "pt": "(H ((H (! <b><i>liquid_level_2</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>liquid_level_2</i></b> & ((Y (! <b><i>liquid_level_2</i></b>)) | FTP)))) -> <b><i>(stirring_motor)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>liquid_level_2</i></b>) & ((! LAST) & (X <b><i>liquid_level_2</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>liquid_level_2</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>liquid_level_2</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>liquid_level_2</i></b> & ((Y (! <b><i>liquid_level_2</i></b>)) | (! (Y TRUE)))))) -> <b><i>(stirring_motor)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not liquid_level_2)) or ((SI( (liquid_level_2 and ((pre ( not liquid_level_2)) or FTP)), ( not (( timer_60sec_expire | emergency_button ))) )) => (stirring_motor))))",
            "diagramVariables": "TC = <b><i>liquid_level_2</i></b>, SC = <b><i>(( timer_60sec_expire | emergency_button ))</i></b>, Response = <b><i>(stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>liquid_level_2</i></b> is true and any point in the interval where <b><i>liquid_level_2</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "0fb6d7c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "ARBITER-1",
        "parent_reqid": "",
        "project": "ARBITER",
        "rationale": "",
        "comments": "",
        "fulltext": "the arbiter shall always satisfy grant => noMoreGrantsUntilRequest",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "grant",
                    "noMoreGrantsUntilRequest"
                ],
                "modes": []
            },
            "component_name": "arbiter",
            "componentTextRange": [
                0,
                10
            ],
            "timingTextRange": [
                18,
                23
            ],
            "post_condition": "(grant => noMoreGrantsUntilRequest)",
            "responseTextRange": [
                25,
                65
            ],
            "ft": "(LAST V <b><i>(grant -> noMoreGrantsUntilRequest)</i></b>)",
            "pt": "(H <b><i>(grant -> noMoreGrantsUntilRequest)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(grant -> noMoreGrantsUntilRequest)</i></b>)",
            "ptExpanded": "(H <b><i>(grant -> noMoreGrantsUntilRequest)</i></b>)",
            "component": "<b><i>arbiter</i></b>",
            "CoCoSpecCode": "(H((grant -> noMoreGrantsUntilRequest)))",
            "diagramVariables": "Response = <b><i>(grant -> noMoreGrantsUntilRequest)</i></b>.",
            "description": "Always, the component \"<b><i>arbiter</i></b>\" shall satisfy <b><i>(grant -> noMoreGrantsUntilRequest)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fb725e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "HANK-1",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "when mcvdt_cmd_fcs_dps2 > 50, Regulator shall, within 100 ticks, satisfy mcvdt_cmd_fcs_dps2 < 50",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "regular_condition": "mcvdt_cmd_fcs_dps2 > 50",
            "pre_conditions": [
                "mcvdt_cmd_fcs_dps2 > 50"
            ],
            "component_name": "Regulator",
            "duration_upper": "100 ticks",
            "post_condition": "mcvdt_cmd_fcs_dps2 < 50",
            "ltlTemplate": "G ($regular_condition$ -> (F[$duration_upper$] $post_condition$))",
            "ltlFormula": "G (<b><i>mcvdt_cmd_fcs_dps2 > 50</i></b> -> (F[<b><i>100 ticks</i></b>] <b><i>mcvdt_cmd_fcs_dps2 < 50</i></b>))",
            "ltlDescription": "If the condition <b><i>mcvdt_cmd_fcs_dps2 > 50</i></b> holds,  component <b><i>Regulator</i></b> shall , within <b><i>100 ticks</i></b>,  satisfy <b><i>mcvdt_cmd_fcs_dps2 < 50</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when mcvdt_cmd_fcs_dps2 > 50",
            "componentField": "Regulator",
            "timingField": "within 100 ticks",
            "responsesField": "satisfy mcvdt_cmd_fcs_dps2 < 50"
        },
        "_id": "0fb77400-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-MULTIVARIATE-COND",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "When p(x,y), OR if (if q(x,y) then s), the sw shall satisfy q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "x",
                    "y",
                    "q",
                    "s"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(( if q ( x , y ) then s ))",
            "regular_condition": "((p ( x , y )) | (( if q ( x , y ) then s )))",
            "conditionTextRange": [
                0,
                37
            ],
            "component_name": "sw",
            "componentTextRange": [
                39,
                44
            ],
            "post_condition": "(q)",
            "responseTextRange": [
                52,
                60
            ],
            "ft": "((LAST V (((! <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b>) & ((! LAST) & (X <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b>))) -> (X ((! LAST) U <b><i>(q)</i></b>)))) & (<b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b> -> ((! LAST) U <b><i>(q)</i></b>)))",
            "pt": "((H (! <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b>)) | (! ((! <b><i>(q)</i></b>) S ((! <b><i>(q)</i></b>) & (<b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b> & ((Y (! <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b>) & ((! LAST) & (X <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b>))) -> (X ((! LAST) U <b><i>(q)</i></b>)))) & (<b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b> -> ((! LAST) U <b><i>(q)</i></b>)))",
            "ptExpanded": "((H (! <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b>)) | (! ((! <b><i>(q)</i></b>) S ((! <b><i>(q)</i></b>) & (<b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b> & ((Y (! <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H( not ((p ( x , y )) or (( if q ( x , y ) then s ))))) or ( not (SI( (((p ( x , y )) or (( if q ( x , y ) then s ))) and ((pre ( not ((p ( x , y )) or (( if q ( x , y ) then s ))))) or FTP)), ( not (q)) ))))",
            "diagramVariables": "TC = <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b>, Response = <b><i>(q)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b> is true and any point in the interval where <b><i>((p ( x , y )) | (( if q ( x , y ) then s )))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "0fb7c220-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-EXCL",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "strictly after M, unless p, the sw shall  satisfy q",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": true,
                "required": false
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "M",
            "regular_condition": "(!(p))",
            "qualifier_word": "unless",
            "pre_condition": "(p)",
            "component_name": "sw",
            "post_condition": "q",
            "ltlTemplate": "G ((!$scope_mode$) | ($scope_mode$ & (X ($regular_condition$ -> $post_condition$))))",
            "ltlFormula": "G ((!<b><i>M</i></b>) | (<b><i>M</i></b> & (X (<b><i>(!(p))</i></b> -> <b><i>q</i></b>))))",
            "ltlDescription": "If the condition <b><i>(!(p))</i></b> holds,  component <b><i>sw</i></b> shall  satisfy <b><i>q</i></b>. \nNote that this requirement is only relevant and imposed after the first time that <b><i>sw</i></b> exits mode <b><i>M</i></b> for the first time."
        },
        "input": {
            "scopeField": "strictly after M",
            "conditionsField": "unless p",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy q"
        },
        "_id": "0fb7e930-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-CONDITION-UNLESS3",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "unless p & q, the sw shall  satisfy r",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "regular_condition": "!(p & q)",
            "qualifier_word": "unless",
            "pre_condition": "(p & q)",
            "component_name": "sw",
            "post_condition": "r",
            "ltlTemplate": "G ($regular_condition$ -> $post_condition$)",
            "ltlFormula": "G (<b><i>!(p & q)</i></b> -> <b><i>r</i></b>)",
            "ltlDescription": "If the condition <b><i>!(p & q)</i></b> holds,  component <b><i>sw</i></b> shall  satisfy <b><i>r</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "unless p & q",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy r"
        },
        "_id": "0fb85e60-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TEMP-COND-IN-MODE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in flight mode when persisted(5,turbulence) the pilot shall within 1 minute satisfy announce_fasten_seat_belts",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "persisted",
                    "turbulence",
                    "announce_fasten_seat_belts"
                ],
                "modes": [
                    "flight"
                ]
            },
            "scope_mode": "flight",
            "scopeTextRange": [
                0,
                13
            ],
            "qualifier_word": "when",
            "pre_condition": "(persisted ( 5 , turbulence ))",
            "regular_condition": "((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))",
            "conditionTextRange": [
                15,
                42
            ],
            "component_name": "pilot",
            "componentTextRange": [
                44,
                52
            ],
            "duration": [
                "1"
            ],
            "timingTextRange": [
                60,
                74
            ],
            "post_condition": "(announce_fasten_seat_belts)",
            "responseTextRange": [
                76,
                109
            ],
            "diagramVariables": "M = <b><i>flight</i></b>, TC = <b><i>(persisted ( 5 , turbulence ))</i></b>,  n = <b><i>1</i></b>, Response = <b><i>(announce_fasten_seat_belts)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>flight</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(persisted ( 5 , turbulence ))</i></b> is true and any point in the interval where <b><i>(persisted ( 5 , turbulence ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>1</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>1</i></b>). If the interval ends sooner than trigger+<b><i>1</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_within_satisfaction.svg",
            "regular_condition_coco": "((HT(5,0,turbulence)) and (HT(4,0,( ! ( $scope_mode$ & ( ( ! ( Y TRUE ) ) | ( Y ( ! $scope_mode$ ) ) ) ) ))))",
            "ft": "((LAST V ((! (Fin_<b><i>flight</i></b> & (! LAST))) | (X (((Lin_<b><i>flight</i></b> | LAST) V (((! <b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b>) & ((! LAST) & ((X <b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b>) & (! (Lin_<b><i>flight</i></b> | LAST))))) -> ((X ((F[<=<b><i>1</i></b>] <b><i>(announce_fasten_seat_belts)</i></b>) | (F[<<b><i>1</i></b>] (Lin_<b><i>flight</i></b> | LAST)))) & (! (Lin_<b><i>flight</i></b> | LAST))))) & (<b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b> -> ((F[<=<b><i>1</i></b>] <b><i>(announce_fasten_seat_belts)</i></b>) | (F[<<b><i>1</i></b>] (Lin_<b><i>flight</i></b> | LAST)))))))) & ($scope_mode$ -> (((Lin_$scope_mode$ | LAST) V (((! <b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b>) & ((! LAST) & ((X <b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b>) & (! (Lin_$scope_mode$ | LAST))))) -> ((X ((F[<=<b><i>1</i></b>] <b><i>(announce_fasten_seat_belts)</i></b>) | (F[<<b><i>1</i></b>] (Lin_$scope_mode$ | LAST)))) & (! (Lin_$scope_mode$ | LAST))))) & (<b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b> -> ((F[<=<b><i>1</i></b>] <b><i>(announce_fasten_seat_belts)</i></b>) | (F[<<b><i>1</i></b>] (Lin_$scope_mode$ | LAST)))))))",
            "pt": "((H ((Lin_<b><i>flight</i></b> & (! FTP)) -> (Y (((O[=<b><i>1</i></b>] ((<b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b> & ((Y (! <b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b>)) | Fin_<b><i>flight</i></b>)) & (! <b><i>(announce_fasten_seat_belts)</i></b>))) -> (O[<<b><i>1</i></b>] (Fin_<b><i>flight</i></b> | <b><i>(announce_fasten_seat_belts)</i></b>))) S (((O[=<b><i>1</i></b>] ((<b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b> & ((Y (! <b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b>)) | Fin_<b><i>flight</i></b>)) & (! <b><i>(announce_fasten_seat_belts)</i></b>))) -> (O[<<b><i>1</i></b>] (Fin_<b><i>flight</i></b> | <b><i>(announce_fasten_seat_belts)</i></b>))) & Fin_<b><i>flight</i></b>))))) & (((! Lin_$scope_mode$) S ((! Lin_$scope_mode$) & Fin_$scope_mode$)) -> (((O[=<b><i>1</i></b>] ((<b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b> & ((Y (! <b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b>)) | Fin_$scope_mode$)) & (! <b><i>(announce_fasten_seat_belts)</i></b>))) -> (O[<<b><i>1</i></b>] (Fin_$scope_mode$ | <b><i>(announce_fasten_seat_belts)</i></b>))) S (((O[=<b><i>1</i></b>] ((<b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b> & ((Y (! <b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b>)) | Fin_$scope_mode$)) & (! <b><i>(announce_fasten_seat_belts)</i></b>))) -> (O[<<b><i>1</i></b>] (Fin_$scope_mode$ | <b><i>(announce_fasten_seat_belts)</i></b>))) & Fin_$scope_mode$))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>flight</i></b>) & (! LAST)) & (X <b><i>flight</i></b>)) & (! LAST))) | (X (((((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST) V (((! <b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b>) & ((! LAST) & ((X <b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b>) & (! (((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST))))) -> ((X ((F[<=<b><i>1</i></b>] <b><i>(announce_fasten_seat_belts)</i></b>) | (F[<<b><i>1</i></b>] (((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST)))) & (! (((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST))))) & (<b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b> -> ((F[<=<b><i>1</i></b>] <b><i>(announce_fasten_seat_belts)</i></b>) | (F[<<b><i>1</i></b>] (((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST)))))))) & (<b><i>flight</i></b> -> (((((<b><i>flight</i></b> & (! LAST)) & (X (! <b><i>flight</i></b>))) | LAST) V (((! <b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b>) & ((! LAST) & ((X <b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b>) & (! ((($scope_mode$ & (! LAST)) & (X (! $scope_mode$))) | LAST))))) -> ((X ((F[<=<b><i>1</i></b>] <b><i>(announce_fasten_seat_belts)</i></b>) | (F[<<b><i>1</i></b>] ((($scope_mode$ & (! LAST)) & (X (! $scope_mode$))) | LAST)))) & (! ((($scope_mode$ & (! LAST)) & (X (! $scope_mode$))) | LAST))))) & (<b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b> -> ((F[<=<b><i>1</i></b>] <b><i>(announce_fasten_seat_belts)</i></b>) | (F[<<b><i>1</i></b>] ((($scope_mode$ & (! LAST)) & (X (! $scope_mode$))) | LAST)))))))",
            "ptExpanded": "((H ((((! <b><i>flight</i></b>) & (Y <b><i>flight</i></b>)) & (Y TRUE)) -> (Y (((O[=<b><i>1</i></b>] ((<b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b> & ((Y (! <b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b>)) | (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))))) & (! <b><i>(announce_fasten_seat_belts)</i></b>))) -> (O[<<b><i>1</i></b>] ((<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))) | <b><i>(announce_fasten_seat_belts)</i></b>))) S (((O[=<b><i>1</i></b>] ((<b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b> & ((Y (! <b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b>)) | (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))))) & (! <b><i>(announce_fasten_seat_belts)</i></b>))) -> (O[<<b><i>1</i></b>] ((<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))) | <b><i>(announce_fasten_seat_belts)</i></b>))) & (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>))))))))) & (((! ((! <b><i>flight</i></b>) & (Y <b><i>flight</i></b>))) S ((! ((! <b><i>flight</i></b>) & (Y <b><i>flight</i></b>))) & (<b><i>flight</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight</i></b>)))))) -> (((O[=<b><i>1</i></b>] ((<b><i>((H[<=5] turbulence) & (H[<5] (! (<b><i>flight</i></b> & ((!(Y TRUE)) | (Y (!<b><i>flight</i></b>)))))))</i></b> & ((Y (! <b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b>)) | ($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$)))))) & (! <b><i>(announce_fasten_seat_belts)</i></b>))) -> (O[<<b><i>1</i></b>] (($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$)))) | <b><i>(announce_fasten_seat_belts)</i></b>))) S (((O[=<b><i>1</i></b>] ((<b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b> & ((Y (! <b><i>((H[<=5] turbulence) & (H[<5] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))</i></b>)) | ($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$)))))) & (! <b><i>(announce_fasten_seat_belts)</i></b>))) -> (O[<<b><i>1</i></b>] (($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$)))) | <b><i>(announce_fasten_seat_belts)</i></b>))) & ($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$))))))))",
            "component": "<b><i>pilot</i></b>",
            "CoCoSpecCode": "((H(((( not flight) and (pre (flight))) and ( not FTP)) => (pre (SI( (flight and (FTP or (pre ( not flight)))), ((OT(1,1,( ( ((HT(5,0,turbulence)) and (HT(4,0,( ! ( flight & ( ( ! ( Y TRUE ) ) | ( Y ( ! flight ) ) ) ) )))) & ( ( Y ( ! ((HT(5,0,turbulence)) and (HT(4,0,( ! ( flight & ( ( ! ( Y TRUE ) ) | ( Y ( ! flight ) ) ) ) )))) ) ) | ( flight & ( FTP | ( Y ! flight ) ) ) ) ) & ( ! (announce_fasten_seat_belts) ) ))) => (OT(1-1,0,( ( flight & ( FTP | ( Y ! flight ) ) ) | (announce_fasten_seat_belts) )))) ))))) and ((SI( (flight and (FTP or (pre ( not flight)))), ( not (( not flight) and (pre (flight)))) )) => (SI( (flight and (FTP or (pre ( not flight)))), ((OT(1,1,( ( ((HT(5,0,turbulence)) and (HT(4,0,( ! ( $scope_mode$ & ( ( ! ( Y TRUE ) ) | ( Y ( ! $scope_mode$ ) ) ) ) )))) & ( ( Y ( ! ((HT(5,0,turbulence)) and (HT(4,0,( ! ( $scope_mode$ & ( ( ! ( Y TRUE ) ) | ( Y ( ! $scope_mode$ ) ) ) ) )))) ) ) | ( $scope_mode$ & ( FTP | ( Y ! $scope_mode$ ) ) ) ) ) & ( ! (announce_fasten_seat_belts) ) ))) => (OT(1-1,0,( ( $scope_mode$ & ( FTP | ( Y ! $scope_mode$ ) ) ) | (announce_fasten_seat_belts) )))) ))))"
        },
        "_id": "0fb88570-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-BEFORE-IMMEDIATELY",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "before M the sw shall immediately satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                7
            ],
            "component_name": "sw",
            "componentTextRange": [
                9,
                14
            ],
            "timingTextRange": [
                22,
                32
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                34,
                42
            ],
            "ft": "No meaning assigned.",
            "pt": "No meaning assigned.",
            "ftExpanded": "No meaning assigned.",
            "ptExpanded": "No meaning assigned.",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "No meaning assigned.",
            "diagramVariables": "M = <b><i>M</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "Unclear requirement. We are not sure how to interpret this requirement.",
            "diagram": "Undefined svg."
        },
        "_id": "0fb8d390-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AOS-R2U2-1",
        "parent_reqid": "",
        "project": "AOS",
        "rationale": "",
        "fulltext": "the vehicle shall always satisfy (! U_batt_low & ! U_batt_high)",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "U_batt_low",
                    "U_batt_high"
                ],
                "modes": []
            },
            "component_name": "vehicle",
            "componentTextRange": [
                0,
                10
            ],
            "timingTextRange": [
                18,
                23
            ],
            "post_condition": "(( ! U_batt_low & ! U_batt_high ))",
            "responseTextRange": [
                25,
                62
            ],
            "ft": "G <b><i>(( ! U_batt_low & ! U_batt_high ))</i></b>",
            "pt": "(<b><i>(( ! U_batt_low & ! U_batt_high ))</i></b> S (<b><i>(( ! U_batt_low & ! U_batt_high ))</i></b> & FTP)) S ((<b><i>(( ! U_batt_low & ! U_batt_high ))</i></b> S (<b><i>(( ! U_batt_low & ! U_batt_high ))</i></b> & FTP)) & FTP)",
            "ftExpanded": "G <b><i>(( ! U_batt_low & ! U_batt_high ))</i></b>",
            "ptExpanded": "(<b><i>(( ! U_batt_low & ! U_batt_high ))</i></b> S (<b><i>(( ! U_batt_low & ! U_batt_high ))</i></b> & (! Y TRUE))) S ((<b><i>(( ! U_batt_low & ! U_batt_high ))</i></b> S (<b><i>(( ! U_batt_low & ! U_batt_high ))</i></b> & (! Y TRUE))) & (! Y TRUE))",
            "component": "<b><i>vehicle</i></b>",
            "CoCoSpecCode": "S( ((S( ((( not U_batt_low and not U_batt_high )) and FTP()), (( not U_batt_low and not U_batt_high )) )) and FTP()), (S( ((( not U_batt_low and not U_batt_high )) and FTP()), (( not U_batt_low and not U_batt_high )) )) )",
            "diagramVariables": "Response = <b><i>(( ! U_batt_low & ! U_batt_high ))</i></b>.",
            "description": "Always, the component \"<b><i>vehicle</i></b>\" shall satisfy <b><i>(( ! U_batt_low & ! U_batt_high ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fb921b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-CONDITION-WHEN",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "when p, the sw shall  satisfy q",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "regular_condition": "(p)",
            "qualifier_word": "when",
            "pre_condition": "(p)",
            "component_name": "sw",
            "post_condition": "q",
            "ltlTemplate": "G ($regular_condition$ -> $post_condition$)",
            "ltlFormula": "G (<b><i>(p)</i></b> -> <b><i>q</i></b>)",
            "ltlDescription": "If the condition <b><i>(p)</i></b> holds,  component <b><i>sw</i></b> shall  satisfy <b><i>q</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when p",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy q"
        },
        "_id": "0fb996e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-NOT-IN",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "only when not in M mode shall the sw always satisfy p",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "unhandled"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                22
            ],
            "component_name": "sw",
            "componentTextRange": [
                30,
                35
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                44,
                52
            ],
            "ft": "Unhandled.",
            "pt": "Unexpected case - SemanticsAnalyzer replaceTemplateVarsWithArgs",
            "ftExpanded": "Unexpected case - SemanticsAnalyzer replaceTemplateVarsWithArgs",
            "ptExpanded": "Unexpected case - SemanticsAnalyzer replaceTemplateVarsWithArgs",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "Unexpected case - SemanticsAnalyzer replaceTemplateVarsWithArgs",
            "diagramVariables": "Response = <b><i>(p)</i></b>.",
            "description": "The formalization cannot be provided.\n Reason:  \"scope\" fields are accepted by grammar but are not yet supported by FRET semantics."
        },
        "_id": "0fb9bdf0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-010",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint  satisfy ! valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_1"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "emergency_button",
            "regular_condition": "emergency_button",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                68,
                84
            ],
            "regular_condition_coco": "emergency_button",
            "ft": "((LAST V (((! <b><i>emergency_button</i></b>) & ((! LAST) & (X <b><i>emergency_button</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>emergency_button</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "pt": "(H ((Y (<b><i>emergency_button</i></b> & ((Y (! <b><i>emergency_button</i></b>)) | FTP))) -> (<b><i>(! valve_1)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>emergency_button</i></b>) & ((! LAST) & (X <b><i>emergency_button</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>emergency_button</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>emergency_button</i></b> & ((Y (! <b><i>emergency_button</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_1)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre (emergency_button and ((pre ( not emergency_button)) or FTP))) => ((! valve_1) or FTP)))",
            "diagramVariables": "TC = <b><i>emergency_button</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>emergency_button</i></b> is true and any point in the interval where <b><i>emergency_button</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fba0c10-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-COND-UNLESS4",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "unless p and unless q, the sw shall  satisfy r",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "regular_condition": "(!(p) & !(q))",
            "qualifier_word": "unless",
            "pre_condition": "(q)",
            "component_name": "sw",
            "post_condition": "r",
            "ltlTemplate": "G ($regular_condition$ -> $post_condition$)",
            "ltlFormula": "G (<b><i>(!(p) & !(q))</i></b> -> <b><i>r</i></b>)",
            "ltlDescription": "If the condition <b><i>(!(p) & !(q))</i></b> holds,  component <b><i>sw</i></b> shall  satisfy <b><i>r</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "unless p and unless q",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy r"
        },
        "_id": "0fba3320-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-NEXT",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "abc shall, after 0 ticks, satisfy Q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Q"
                ],
                "modes": []
            },
            "component_name": "abc",
            "componentTextRange": [
                0,
                2
            ],
            "duration": [
                "0"
            ],
            "timingTextRange": [
                9,
                24
            ],
            "post_condition": "(Q)",
            "responseTextRange": [
                26,
                34
            ],
            "ft": "(((G[<=<b><i>0</i></b>] (! <b><i>(Q)</i></b>)) | (LAST V (! <b><i>(Q)</i></b>))) & ((F[<=<b><i>0</i></b>+1] <b><i>(Q)</i></b>) | (F[<<b><i>0</i></b>+1] LAST)))",
            "pt": "((H ((O[<=<b><i>0</i></b>] FTP) -> (! <b><i>(Q)</i></b>))) & (H ((H (! <b><i>(Q)</i></b>)) -> (O[<<b><i>0</i></b>+1] FTP))))",
            "ftExpanded": "(((G[<=<b><i>0</i></b>] (! <b><i>(Q)</i></b>)) | (LAST V (! <b><i>(Q)</i></b>))) & ((F[<=<b><i>0</i></b>+1] <b><i>(Q)</i></b>) | (F[<<b><i>0</i></b>+1] LAST)))",
            "ptExpanded": "((H ((O[<=<b><i>0</i></b>] (! (Y TRUE))) -> (! <b><i>(Q)</i></b>))) & (H ((H (! <b><i>(Q)</i></b>)) -> (O[<<b><i>0</i></b>+1] (! (Y TRUE))))))",
            "component": "<b><i>abc</i></b>",
            "CoCoSpecCode": "((H((OT(0,0,FTP)) => ( not (Q)))) and (H((H( not (Q))) => (OT(0,0,FTP)))))",
            "diagramVariables": " n = <b><i>0</i></b>, Response = <b><i>(Q)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>0</i></b> from the trigger; moreover, RES must hold at the point that is at distance <b><i>0</i></b>+1 from the trigger, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg"
        },
        "_id": "0fba8140-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "WITHIN_EXAMPLE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "In M mode if COND the component shall within 5 seconds satisfy RES",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "COND",
                    "RES"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                8
            ],
            "regular_condition": "(COND)",
            "qualifier_word": "if",
            "pre_condition": "(COND)",
            "conditionTextRange": [
                10,
                16
            ],
            "component_name": "component",
            "componentTextRange": [
                18,
                30
            ],
            "duration": [
                "5"
            ],
            "timingTextRange": [
                38,
                53
            ],
            "post_condition": "(RES)",
            "responseTextRange": [
                55,
                65
            ],
            "ft": "((LAST V ((! (Fin_<b><i>M</i></b> & (! LAST))) | (X (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(COND)</i></b>) & ((! LAST) & ((X <b><i>(COND)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((F[<=<b><i>5</i></b>] <b><i>(RES)</i></b>) | (F[<<b><i>5</i></b>] (Lin_<b><i>M</i></b> | LAST)))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(COND)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(RES)</i></b>) | (F[<<b><i>5</i></b>] (Lin_<b><i>M</i></b> | LAST)))))))) & (<b><i>M</i></b> -> (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(COND)</i></b>) & ((! LAST) & ((X <b><i>(COND)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((F[<=<b><i>5</i></b>] <b><i>(RES)</i></b>) | (F[<<b><i>5</i></b>] (Lin_<b><i>M</i></b> | LAST)))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(COND)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(RES)</i></b>) | (F[<<b><i>5</i></b>] (Lin_<b><i>M</i></b> | LAST)))))))",
            "pt": "((H ((Lin_<b><i>M</i></b> & (! FTP)) -> (Y (((O[=<b><i>5</i></b>] ((<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>(RES)</i></b>))) -> (O[<<b><i>5</i></b>] (Fin_<b><i>M</i></b> | <b><i>(RES)</i></b>))) S (((O[=<b><i>5</i></b>] ((<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>(RES)</i></b>))) -> (O[<<b><i>5</i></b>] (Fin_<b><i>M</i></b> | <b><i>(RES)</i></b>))) & Fin_<b><i>M</i></b>))))) & (((! Lin_<b><i>M</i></b>) S ((! Lin_<b><i>M</i></b>) & Fin_<b><i>M</i></b>)) -> (((O[=<b><i>5</i></b>] ((<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>(RES)</i></b>))) -> (O[<<b><i>5</i></b>] (Fin_<b><i>M</i></b> | <b><i>(RES)</i></b>))) S (((O[=<b><i>5</i></b>] ((<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>(RES)</i></b>))) -> (O[<<b><i>5</i></b>] (Fin_<b><i>M</i></b> | <b><i>(RES)</i></b>))) & Fin_<b><i>M</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) & (! LAST))) | (X (((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (((! <b><i>(COND)</i></b>) & ((! LAST) & ((X <b><i>(COND)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) -> ((X ((F[<=<b><i>5</i></b>] <b><i>(RES)</i></b>) | (F[<<b><i>5</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) & (<b><i>(COND)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(RES)</i></b>) | (F[<<b><i>5</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))))))) & (<b><i>M</i></b> -> (((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (((! <b><i>(COND)</i></b>) & ((! LAST) & ((X <b><i>(COND)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) -> ((X ((F[<=<b><i>5</i></b>] <b><i>(RES)</i></b>) | (F[<<b><i>5</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) & (<b><i>(COND)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(RES)</i></b>) | (F[<<b><i>5</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))))))",
            "ptExpanded": "((H ((((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y TRUE)) -> (Y (((O[=<b><i>5</i></b>] ((<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(RES)</i></b>))) -> (O[<<b><i>5</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(RES)</i></b>))) S (((O[=<b><i>5</i></b>] ((<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(RES)</i></b>))) -> (O[<<b><i>5</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(RES)</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))) & (((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) S ((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (((O[=<b><i>5</i></b>] ((<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(RES)</i></b>))) -> (O[<<b><i>5</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(RES)</i></b>))) S (((O[=<b><i>5</i></b>] ((<b><i>(COND)</i></b> & ((Y (! <b><i>(COND)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(RES)</i></b>))) -> (O[<<b><i>5</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(RES)</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))",
            "component": "<b><i>component</i></b>",
            "CoCoSpecCode": "((H(((( not M) and (pre (M))) and ( not FTP)) => (pre (SI( (M and (FTP or (pre ( not M)))), ((OT(5,5,( ( (COND) and ( ( Y ( not (COND) ) ) or ( M and ( FTP or ( Y not M ) ) ) ) ) and ( not (RES) ) ))) => (OT(5-1,0,( ( M and ( FTP or ( Y not M ) ) ) or (RES) )))) ))))) and ((SI( (M and (FTP or (pre ( not M)))), ( not (( not M) and (pre (M)))) )) => (SI( (M and (FTP or (pre ( not M)))), ((OT(5,5,( ( (COND) and ( ( Y ( not (COND) ) ) or ( M and ( FTP or ( Y not M ) ) ) ) ) and ( not (RES) ) ))) => (OT(5-1,0,( ( M and ( FTP or ( Y not M ) ) ) or (RES) )))) ))))",
            "diagramVariables": "M = <b><i>M</i></b>, TC = <b><i>(COND)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(RES)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(COND)</i></b> is true and any point in the interval where <b><i>(COND)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_within_satisfaction.svg"
        },
        "_id": "0fbacf60-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-STRING",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "\"\\\\The sw shall do the \\\"right\\\" thing.\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fbb1d80-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-IF-THEN-3",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "The autopilot shall always satisfy if allGood then state = nominal",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "allGood",
                    "state",
                    "nominal"
                ],
                "modes": []
            },
            "component_name": "autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(allGood => state = nominal)",
            "responseTextRange": [
                27,
                65
            ],
            "ft": "(LAST V <b><i>(allGood -> state = nominal)</i></b>)",
            "pt": "(H <b><i>(allGood -> state = nominal)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(allGood -> state = nominal)</i></b>)",
            "ptExpanded": "(H <b><i>(allGood -> state = nominal)</i></b>)",
            "component": "<b><i>autopilot</i></b>",
            "CoCoSpecCode": "(H((allGood => state = nominal)))",
            "diagramVariables": "Response = <b><i>(allGood => state = nominal)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbb6ba0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-NESTED-TERM-CONDITIONS",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "if p(x,f(y)) the sw shall eventually satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "x",
                    "f",
                    "y",
                    "r"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(p ( x , f ( y ) ))",
            "regular_condition": "(p ( x , f ( y ) ))",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "sw",
            "componentTextRange": [
                13,
                18
            ],
            "timingTextRange": [
                26,
                35
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                37,
                45
            ],
            "ft": "((LAST V (((! <b><i>(p ( x , f ( y ) ))</i></b>) & ((! LAST) & (X <b><i>(p ( x , f ( y ) ))</i></b>))) -> (X ((! LAST) U <b><i>(r)</i></b>)))) & (<b><i>(p ( x , f ( y ) ))</i></b> -> ((! LAST) U <b><i>(r)</i></b>)))",
            "pt": "((H (! <b><i>(p ( x , f ( y ) ))</i></b>)) | (! ((! <b><i>(r)</i></b>) S ((! <b><i>(r)</i></b>) & (<b><i>(p ( x , f ( y ) ))</i></b> & ((Y (! <b><i>(p ( x , f ( y ) ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(p ( x , f ( y ) ))</i></b>) & ((! LAST) & (X <b><i>(p ( x , f ( y ) ))</i></b>))) -> (X ((! LAST) U <b><i>(r)</i></b>)))) & (<b><i>(p ( x , f ( y ) ))</i></b> -> ((! LAST) U <b><i>(r)</i></b>)))",
            "ptExpanded": "((H (! <b><i>(p ( x , f ( y ) ))</i></b>)) | (! ((! <b><i>(r)</i></b>) S ((! <b><i>(r)</i></b>) & (<b><i>(p ( x , f ( y ) ))</i></b> & ((Y (! <b><i>(p ( x , f ( y ) ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H( not (p ( x , f ( y ) )))) or ( not (SI( ((p ( x , f ( y ) )) and ((pre ( not (p ( x , f ( y ) )))) or FTP)), ( not (r)) ))))",
            "diagramVariables": "TC = <b><i>(p ( x , f ( y ) ))</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(p ( x , f ( y ) ))</i></b> is true and any point in the interval where <b><i>(p ( x , f ( y ) ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0fbb92b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-002",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from TRANSITION to STANDBY when the pilot is in control (standby).",
        "fulltext": "FSM shall always satisfy (standby & state = ap_transition_state) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "standby",
                    "state",
                    "ap_transition_state",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( standby & state = ap_transition_state ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                91
            ],
            "ft": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( standby and state = ap_transition_state ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbbb9c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-005",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBYwhen the pilot is in control (standby).",
        "fulltext": "FSM shall always satisfy (state=ap_nominal_state & standby)  => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "standby",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                87
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and standby ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbc07e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-003",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from TRANSITION to NOMINAL when the system is supported and sensor data is good.",
        "fulltext": "FSM shall always satisfy (state = ap_transition_state & good & supported) => STATE = ap_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_transition_state",
                    "good",
                    "supported",
                    "STATE",
                    "ap_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)",
            "responseTextRange": [
                17,
                100
            ],
            "ft": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_transition_state and good and supported ) => STATE = ap_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbc2ef0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-008",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from STANDBY to TRANSITION when the pilot is not in control (not standby)",
        "fulltext": " FSM shall always satisfy (state = ap_standby_state & !standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                92
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbc7d10-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-011",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The sensor shall change states from NOMINAL to TRANSITION when the autopilot is not requesting support (not request)",
        "fulltext": "FSM shall always  satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                18,
                101
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbca420-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-009",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from STANDBY to MANEUVER when a failure occurs (apfail)",
        "fulltext": "FSM shall always satisfy (state = ap_standby_state & apfail )=> STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "apfail",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                88
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and apfail ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbcf240-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-012",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The sensor shall change states from FAULT to TRANSITION when the autopilot is not requesting support (not request) and limits are not exceeded (not limits)",
        "fulltext": "FSM shall  always  satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_fault_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                19,
                110
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_fault_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbd1950-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-010",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The sensor shall change states from NOMINAL to FAULT when limits are exceeded",
        "fulltext": "FSM shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "limits",
                    "SENSTATE",
                    "sen_fault_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)",
            "responseTextRange": [
                17,
                93
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and limits ) => SENSTATE = sen_fault_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbd6770-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-013",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The sensor shall change states from TRANSITION to NOMINAL when the autopilot is requesting support (request) and the autopilot reports the correct active mode (mode)",
        "fulltext": "FSM shall always satisfy (senstate = sen_transition_state & request) => SENSTATE = sen_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_transition_state",
                    "request",
                    "SENSTATE",
                    "sen_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_transition_state & request ) => SENSTATE = sen_nominal_state)",
            "responseTextRange": [
                17,
                99
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_transition_state and request ) => SENSTATE = sen_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_transition_state & request ) => SENSTATE = sen_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbd8e80-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-007",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from PULLUP to TRANSITION when the system is supported and sensor data is good",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & supported & good) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                101
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbdb590-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-004",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "",
        "fulltext": "FSM shall always satisfy (! good & state = ap_nominal_state) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "good",
                    "state",
                    "ap_nominal_state",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                88
            ],
            "ft": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( not good and state = ap_nominal_state ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbe03b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-001",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).",
        "fulltext": "FSM  shall  always  satisfy (limits & !standby & !apfail & supported) => pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "limits",
                    "standby",
                    "apfail",
                    "supported",
                    "pullup"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( limits & ! standby & ! apfail & supported ) => pullup)",
            "responseTextRange": [
                20,
                78
            ],
            "ft": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "pt": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ptExpanded": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( limits and not standby and not apfail and supported ) => pullup)))",
            "diagramVariables": "Response = <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbe51d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-006",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from MANEUVER to STANDBY when the pilot is in control (standby) and sensor data is good",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & standby & good) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "standby",
                    "good",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                96
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and standby and good ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fbec700-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-FOR-0",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "the sw shall for 0 ticks satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "r"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "duration": [
                "0"
            ],
            "timingTextRange": [
                13,
                23
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                25,
                33
            ],
            "ft": "((G[<=<b><i>0</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))",
            "pt": "(H ((O[<=<b><i>0</i></b>] FTP) -> <b><i>(r)</i></b>))",
            "ftExpanded": "((G[<=<b><i>0</i></b>] <b><i>(r)</i></b>) | (LAST V <b><i>(r)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>0</i></b>] (! (Y TRUE))) -> <b><i>(r)</i></b>))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((OT(0,0,FTP)) => (r)))",
            "diagramVariables": " n = <b><i>0</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>0</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>0</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>0</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "0fbf1520-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN-1",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "when in RESET mode, when BL <= IC & IC <= TL, the tustin_integrator shall  satisfy YOUT = IC",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "RESET",
            "regular_condition": "BL <= IC & IC <= TL",
            "pre_conditions": [
                "BL <= IC & IC <= TL"
            ],
            "component_name": "tustin_integrator",
            "post_condition": "YOUT = IC",
            "ltlTemplate": "G (($scope_mode$ & $regular_condition$) -> $post_condition$)",
            "ltlFormula": "G ((<b><i>RESET</i></b> & <b><i>BL <= IC & IC <= TL</i></b>) -> <b><i>YOUT = IC</i></b>)",
            "ltlDescription": "If the condition <b><i>BL <= IC & IC <= TL</i></b> holds,  component <b><i>tustin_integrator</i></b> shall  satisfy <b><i>YOUT = IC</i></b>. \nNote that this requirement is only imposed when <b><i>tustin_integrator</i></b> is in mode <b><i>RESET</i></b>."
        },
        "input": {
            "scopeField": "when in RESET mode",
            "conditionsField": "when BL <= IC & IC <= TL",
            "componentField": "the tustin_integrator",
            "timingField": "",
            "responsesField": "satisfy YOUT = IC"
        },
        "_id": "0fbf3c30-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G18",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_7 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_0",
                    "Current_System_Mode_1",
                    "Current_System_Mode_2",
                    "Current_System_Mode_3",
                    "Current_System_Mode_4",
                    "Current_System_Mode_6",
                    "Current_System_Mode_8"
                ],
                "modes": [
                    "Current_System_Mode_7"
                ]
            },
            "scope_mode": "Current_System_Mode_7",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_7</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_7</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_7</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_7</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_7 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_7</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_7</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fbf8a50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G14",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_2 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_0",
                    "Current_System_Mode_1",
                    "Current_System_Mode_3",
                    "Current_System_Mode_4",
                    "Current_System_Mode_6",
                    "Current_System_Mode_7",
                    "Current_System_Mode_8"
                ],
                "modes": [
                    "Current_System_Mode_2"
                ]
            },
            "scope_mode": "Current_System_Mode_2",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_2</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_2</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_2</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_2</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_2 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_2</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_2</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fbfb160-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G5",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_1 Infusion_Manager shall always satisfy (! System_On) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_1"
                ]
            },
            "scope_mode": "Current_System_Mode_1",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(( ! System_On ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                102
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_1 => (( not System_On ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_1</i></b>, Response = <b><i>(( ! System_On ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_1</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fbfd870-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G19",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_8 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_0",
                    "Current_System_Mode_1",
                    "Current_System_Mode_2",
                    "Current_System_Mode_3",
                    "Current_System_Mode_4",
                    "Current_System_Mode_6",
                    "Current_System_Mode_7"
                ],
                "modes": [
                    "Current_System_Mode_8"
                ]
            },
            "scope_mode": "Current_System_Mode_8",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_8 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_8</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_8</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc02690-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G15",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_3 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_0",
                    "Current_System_Mode_1",
                    "Current_System_Mode_2",
                    "Current_System_Mode_4",
                    "Current_System_Mode_6",
                    "Current_System_Mode_7",
                    "Current_System_Mode_8"
                ],
                "modes": [
                    "Current_System_Mode_3"
                ]
            },
            "scope_mode": "Current_System_Mode_3",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_3</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_3</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_3</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_3</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_3 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_3</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_3</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc04da0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G20",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_0 Infusion_Manager shall always satisfy Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_0"
                ]
            },
            "scope_mode": "Current_System_Mode_0",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                85
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_0 => (Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_0</i></b>, Response = <b><i>(Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_0</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc09bc0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G12",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_0 Infusion_Manager shall always satisfy !( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_1",
                    "Current_System_Mode_2",
                    "Current_System_Mode_3",
                    "Current_System_Mode_4",
                    "Current_System_Mode_6",
                    "Current_System_Mode_7",
                    "Current_System_Mode_8"
                ],
                "modes": [
                    "Current_System_Mode_0"
                ]
            },
            "scope_mode": "Current_System_Mode_0",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                231
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_0 => (not ( Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_0</i></b>, Response = <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_0</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc0c2d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G21",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_1 Infusion_Manager shall always satisfy Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_1"
                ]
            },
            "scope_mode": "Current_System_Mode_1",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                85
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_1 => (Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_1</i></b>, Response = <b><i>(Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_1</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc110f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G16",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_4 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_0",
                    "Current_System_Mode_1",
                    "Current_System_Mode_2",
                    "Current_System_Mode_3",
                    "Current_System_Mode_6",
                    "Current_System_Mode_7",
                    "Current_System_Mode_8"
                ],
                "modes": [
                    "Current_System_Mode_4"
                ]
            },
            "scope_mode": "Current_System_Mode_4",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_4</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_4</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_4</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_4</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_4 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_4</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_4</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc13800-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G22",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_6 Infusion_Manager shall always satisfy Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_6"
                ]
            },
            "scope_mode": "Current_System_Mode_6",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                85
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_6</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_6</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_6</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_6</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_6 => (Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_6</i></b>, Response = <b><i>(Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_6</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc13801-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G23",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_7 Infusion_Manager shall always satisfy Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": [
                    "Current_System_Mode_7"
                ]
            },
            "scope_mode": "Current_System_Mode_7",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                55,
                97
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_7</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_7</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_7</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_7</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_7 => (Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_7</i></b>, Response = <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_7</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc18620-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G13",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_1 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_0",
                    "Current_System_Mode_2",
                    "Current_System_Mode_3",
                    "Current_System_Mode_4",
                    "Current_System_Mode_6",
                    "Current_System_Mode_7",
                    "Current_System_Mode_8"
                ],
                "modes": [
                    "Current_System_Mode_1"
                ]
            },
            "scope_mode": "Current_System_Mode_1",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_1 => (not ( Current_System_Mode_0 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_1</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_1</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc1d440-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G17",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_6 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_0",
                    "Current_System_Mode_1",
                    "Current_System_Mode_2",
                    "Current_System_Mode_3",
                    "Current_System_Mode_4",
                    "Current_System_Mode_7",
                    "Current_System_Mode_8"
                ],
                "modes": [
                    "Current_System_Mode_6"
                ]
            },
            "scope_mode": "Current_System_Mode_6",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_6</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_6</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_6</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_6</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_6 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_6</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_6</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc1fb50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G24",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_8 Infusion_Manager shall always satisfy Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": [
                    "Current_System_Mode_8"
                ]
            },
            "scope_mode": "Current_System_Mode_8",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                55,
                97
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_8 => (Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_8</i></b>, Response = <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_8</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc24970-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G8",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ( System_On & Highest_Level_Alarm = 2 ) => ( (!Current_System_Mode_3) | (!Current_System_Mode_4) )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Current_System_Mode_3",
                    "Current_System_Mode_4"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 2 ) => ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))",
            "responseTextRange": [
                30,
                135
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 2 ) => ( ( not Current_System_Mode_3 ) or ( not Current_System_Mode_4 ) ))))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 2 ) => ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc27080-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G2",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (!FTP & Current_System_Mode_0_pre & System_On) => ( Current_System_Mode_1 & Commanded_Flow_Rate = 0)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FTP",
                    "Current_System_Mode_0_pre",
                    "System_On",
                    "Current_System_Mode_1",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( ! FTP & Current_System_Mode_0_pre & System_On ) => ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))",
            "responseTextRange": [
                30,
                137
            ],
            "ft": "(LAST V <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>)",
            "pt": "(H <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( not FTP and Current_System_Mode_0_pre and System_On ) => ( Current_System_Mode_1 and Commanded_Flow_Rate = 0 ))))",
            "diagramVariables": "Response = <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) => ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc29790-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "g3",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ( ! System_On ) => Current_System_Mode_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode_0"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( ! System_On ) => Current_System_Mode_0)",
            "responseTextRange": [
                30,
                77
            ],
            "ft": "(LAST V <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "pt": "(H <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( not System_On ) => Current_System_Mode_0)))",
            "diagramVariables": "Response = <b><i>(( ! System_On ) => Current_System_Mode_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc2bea0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G9",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "if !FTP Infusion_Manager shall always satisfy (System_On & Infusion_Cancel) => Current_System_Mode_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FTP",
                    "System_On",
                    "Infusion_Cancel",
                    "Current_System_Mode_1"
                ],
                "modes": []
            },
            "regular_condition": "(! FTP)",
            "qualifier_word": "if",
            "pre_condition": "(! FTP)",
            "conditionTextRange": [
                0,
                6
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                8,
                23
            ],
            "timingTextRange": [
                31,
                36
            ],
            "post_condition": "(( System_On & Infusion_Cancel ) => Current_System_Mode_1)",
            "responseTextRange": [
                38,
                99
            ],
            "ft": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))",
            "pt": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((H( not (not FTP))) or (( System_On and Infusion_Cancel ) => Current_System_Mode_1)))",
            "diagramVariables": "TC = <b><i>(! FTP)</i></b>, Response = <b><i>(( System_On & Infusion_Cancel ) => Current_System_Mode_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! FTP)</i></b> is true and any point in the interval where <b><i>(! FTP)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "0fc30cc0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G10",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "if ! FTP Infusion_Manager shall always satisfy (System_On & Infusion_Inhibit) => Commanded_Flow_Rate <= Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FTP",
                    "System_On",
                    "Infusion_Inhibit",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "regular_condition": "(! FTP)",
            "qualifier_word": "if",
            "pre_condition": "(! FTP)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                9,
                24
            ],
            "timingTextRange": [
                32,
                37
            ],
            "post_condition": "(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)",
            "responseTextRange": [
                39,
                116
            ],
            "ft": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))",
            "pt": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((H( not (not FTP))) or (( System_On and Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)))",
            "diagramVariables": "TC = <b><i>(! FTP)</i></b>, Response = <b><i>(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! FTP)</i></b> is true and any point in the interval where <b><i>(! FTP)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "0fc35ae0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "g4",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_0 Infusion_Manager shall always satisfy ( ! System_On ) => Commanded_Flow_Rate =0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_0"
                ]
            },
            "scope_mode": "Current_System_Mode_0",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(( ! System_On ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                103
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_0 => (( not System_On ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_0</i></b>, Response = <b><i>(( ! System_On ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_0</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc3a900-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G11",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Configured < 1) => Current_System_Mode_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Configured",
                    "Current_System_Mode_1"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Configured < 1 ) => Current_System_Mode_1)",
            "responseTextRange": [
                30,
                90
            ],
            "ft": "(LAST V <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "pt": "(H <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Configured < 1 ) => Current_System_Mode_1)))",
            "diagramVariables": "Response = <b><i>(( System_On & Configured < 1 ) => Current_System_Mode_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc3d010-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G0",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_0",
                    "Current_System_Mode_1",
                    "Current_System_Mode_2",
                    "Current_System_Mode_3",
                    "Current_System_Mode_4",
                    "Current_System_Mode_6",
                    "Current_System_Mode_7",
                    "Current_System_Mode_8"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                30,
                228
            ],
            "ft": "(LAST V <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>)",
            "pt": "(H <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>)",
            "ptExpanded": "(H <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "Response = <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc41e30-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G6",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 4) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                30,
                101
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc44540-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G25",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ( System_On & !Patient_Bolus_Request & (! Current_System_Mode_4_pre)) => !Current_System_Mode_4",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Patient_Bolus_Request",
                    "Current_System_Mode_4_pre",
                    "Current_System_Mode_4"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) => ! Current_System_Mode_4)",
            "responseTextRange": [
                30,
                132
            ],
            "ft": "(LAST V <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "pt": "(H <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and not Patient_Bolus_Request and ( not Current_System_Mode_4_pre ) ) => not Current_System_Mode_4)))",
            "diagramVariables": "Response = <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) => ! Current_System_Mode_4)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc49360-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G1",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall immediately satisfy System_On => Current_System_Mode_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode_1"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(System_On => Current_System_Mode_1)",
            "responseTextRange": [
                35,
                76
            ],
            "ft": "<b><i>(System_On -> Current_System_Mode_1)</i></b>",
            "pt": "(H (FTP -> <b><i>(System_On -> Current_System_Mode_1)</i></b>))",
            "ftExpanded": "<b><i>(System_On -> Current_System_Mode_1)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(System_On -> Current_System_Mode_1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(FTP => (System_On => Current_System_Mode_1)))",
            "diagramVariables": "Response = <b><i>(System_On => Current_System_Mode_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "0fc49361-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G7",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 3) => Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                30,
                113
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc4e180-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST_IN_NULL_ALWAYS",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in m mode the software shall always satisfy p",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": [
                    "m"
                ]
            },
            "scope_mode": "m",
            "scopeTextRange": [
                0,
                8
            ],
            "component_name": "software",
            "componentTextRange": [
                10,
                21
            ],
            "timingTextRange": [
                29,
                34
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                36,
                44
            ],
            "ft": "(((((! Fin_<b><i>m</i></b>) U (Fin_<b><i>m</i></b> & (X ((F (Lin_<b><i>m</i></b> | LAST)) -> (! (((! (<b><i>(p)</i></b> & LAST)) & (! (Lin_<b><i>m</i></b> | LAST))) U ((! <b><i>(p)</i></b>) & (! (<b><i>(p)</i></b> & LAST))))))))) | (G (! Fin_<b><i>m</i></b>))) U LAST) & (<b><i>m</i></b> -> ((F (Lin_<b><i>m</i></b> | LAST)) -> (! (((! (<b><i>(p)</i></b> & LAST)) & (! (Lin_<b><i>m</i></b> | LAST))) U ((! <b><i>(p)</i></b>) & (! (<b><i>(p)</i></b> & LAST))))))))",
            "pt": "((H ((Lin_<b><i>m</i></b> & (! FTP)) -> (Y (<b><i>(p)</i></b> S (<b><i>(p)</i></b> & Fin_<b><i>m</i></b>))))) & (((! Lin_<b><i>m</i></b>) S ((! Lin_<b><i>m</i></b>) & Fin_<b><i>m</i></b>)) -> (<b><i>(p)</i></b> S (<b><i>(p)</i></b> & Fin_<b><i>m</i></b>))))",
            "ftExpanded": "(((((! ((! <b><i>m</i></b>) & (X <b><i>m</i></b>))) U (((! <b><i>m</i></b>) & (X <b><i>m</i></b>)) & (X ((F (((<b><i>m</i></b> & (! LAST)) & (X (! <b><i>m</i></b>))) | LAST)) -> (! (((! (<b><i>(p)</i></b> & LAST)) & (! (((<b><i>m</i></b> & (! LAST)) & (X (! <b><i>m</i></b>))) | LAST))) U ((! <b><i>(p)</i></b>) & (! (<b><i>(p)</i></b> & LAST))))))))) | (G (! ((! <b><i>m</i></b>) & (X <b><i>m</i></b>))))) U LAST) & (<b><i>m</i></b> -> ((F (((<b><i>m</i></b> & (! LAST)) & (X (! <b><i>m</i></b>))) | LAST)) -> (! (((! (<b><i>(p)</i></b> & LAST)) & (! (((<b><i>m</i></b> & (! LAST)) & (X (! <b><i>m</i></b>))) | LAST))) U ((! <b><i>(p)</i></b>) & (! (<b><i>(p)</i></b> & LAST))))))))",
            "ptExpanded": "((H ((((! <b><i>m</i></b>) & (Y <b><i>m</i></b>)) & (Y TRUE)) -> (Y (<b><i>(p)</i></b> S (<b><i>(p)</i></b> & (<b><i>m</i></b> & ((! (Y TRUE)) | (Y (! <b><i>m</i></b>))))))))) & (((! ((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) S ((! ((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) & (<b><i>m</i></b> & ((! (Y TRUE)) | (Y (! <b><i>m</i></b>)))))) -> (<b><i>(p)</i></b> S (<b><i>(p)</i></b> & (<b><i>m</i></b> & ((! (Y TRUE)) | (Y (! <b><i>m</i></b>))))))))",
            "component": "<b><i>software</i></b>",
            "CoCoSpecCode": "((H(((( not m) and (pre (m))) and ( not FTP)) -> (pre (SI( (m and (FTP or (pre ( not m)))), (p) ))))) and ((SI( (m and (FTP or (pre ( not m)))), ( not (( not m) and (pre (m)))) )) -> (SI( (m and (FTP or (pre ( not m)))), (p) ))))",
            "diagramVariables": "M = <b><i>m</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "Always, the component \"<b><i>software</i></b>\" shall satisfy <b><i>(p)</i></b>. This is only enforced when \"<b><i>software</i></b>\" is in mode <b><i>m</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc50890-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-BEFORE-SCOPE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "before LiftOff mode the sw shall always satisfy CountDown > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "CountDown"
                ],
                "modes": [
                    "LiftOff"
                ]
            },
            "scope_mode": "LiftOff",
            "scopeTextRange": [
                0,
                18
            ],
            "component_name": "sw",
            "componentTextRange": [
                20,
                25
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(CountDown > 0)",
            "responseTextRange": [
                40,
                60
            ],
            "ft": "(((FFin_<b><i>LiftOff</i></b> | LAST) V <b><i>(CountDown > 0)</i></b>) | <b><i>LiftOff</i></b>)",
            "pt": "((H ((FFin_<b><i>LiftOff</i></b> & (! FTP)) -> (Y (H <b><i>(CountDown > 0)</i></b>)))) & ((H (! FFin_<b><i>LiftOff</i></b>)) -> (H <b><i>(CountDown > 0)</i></b>)))",
            "ftExpanded": "((((((! <b><i>LiftOff</i></b>) & (! LAST)) & (X <b><i>LiftOff</i></b>)) | LAST) V <b><i>(CountDown > 0)</i></b>) | <b><i>LiftOff</i></b>)",
            "ptExpanded": "((H ((((<b><i>LiftOff</i></b> & ((! (Y TRUE)) | (Y (! <b><i>LiftOff</i></b>)))) & ((Y (H (! <b><i>LiftOff</i></b>))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (H <b><i>(CountDown > 0)</i></b>)))) & ((H (! ((<b><i>LiftOff</i></b> & ((! (Y TRUE)) | (Y (! <b><i>LiftOff</i></b>)))) & ((Y (H (! <b><i>LiftOff</i></b>))) | (! (Y TRUE)))))) -> (H <b><i>(CountDown > 0)</i></b>)))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H((((LiftOff and (FTP or (pre ( not LiftOff)))) and ((pre (H( not LiftOff))) or FTP)) and ( not FTP)) => (pre (H((CountDown > 0)))))) and ((H( not ((LiftOff and (FTP or (pre ( not LiftOff)))) and ((pre (H( not LiftOff))) or FTP)))) => (H((CountDown > 0)))))",
            "diagramVariables": "M = <b><i>LiftOff</i></b>, Response = <b><i>(CountDown > 0)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and exclusive of) the first point where <b><i>LiftOff</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/before_null_always_satisfaction.svg"
        },
        "_id": "0fc556b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-011",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint  satisfy ! valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_2"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "emergency_button",
            "regular_condition": "emergency_button",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! valve_2)",
            "responseTextRange": [
                68,
                84
            ],
            "regular_condition_coco": "emergency_button",
            "ft": "((LAST V (((! <b><i>emergency_button</i></b>) & ((! LAST) & (X <b><i>emergency_button</i></b>))) -> (X (LAST | (X <b><i>(! valve_2)</i></b>))))) & (<b><i>emergency_button</i></b> -> (LAST | (X <b><i>(! valve_2)</i></b>))))",
            "pt": "(H ((Y (<b><i>emergency_button</i></b> & ((Y (! <b><i>emergency_button</i></b>)) | FTP))) -> (<b><i>(! valve_2)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>emergency_button</i></b>) & ((! LAST) & (X <b><i>emergency_button</i></b>))) -> (X (LAST | (X <b><i>(! valve_2)</i></b>))))) & (<b><i>emergency_button</i></b> -> (LAST | (X <b><i>(! valve_2)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>emergency_button</i></b> & ((Y (! <b><i>emergency_button</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_2)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre (emergency_button and ((pre ( not emergency_button)) or FTP))) => ((! valve_2) or FTP)))",
            "diagramVariables": "TC = <b><i>emergency_button</i></b>, Response = <b><i>(! valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>emergency_button</i></b> is true and any point in the interval where <b><i>emergency_button</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fc57dc0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-012",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint  satisfy ! stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "stirring_motor"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "emergency_button",
            "regular_condition": "emergency_button",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! stirring_motor)",
            "responseTextRange": [
                68,
                91
            ],
            "regular_condition_coco": "emergency_button",
            "ft": "((LAST V (((! <b><i>emergency_button</i></b>) & ((! LAST) & (X <b><i>emergency_button</i></b>))) -> (X (LAST | (X <b><i>(! stirring_motor)</i></b>))))) & (<b><i>emergency_button</i></b> -> (LAST | (X <b><i>(! stirring_motor)</i></b>))))",
            "pt": "(H ((Y (<b><i>emergency_button</i></b> & ((Y (! <b><i>emergency_button</i></b>)) | FTP))) -> (<b><i>(! stirring_motor)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>emergency_button</i></b>) & ((! LAST) & (X <b><i>emergency_button</i></b>))) -> (X (LAST | (X <b><i>(! stirring_motor)</i></b>))))) & (<b><i>emergency_button</i></b> -> (LAST | (X <b><i>(! stirring_motor)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>emergency_button</i></b> & ((Y (! <b><i>emergency_button</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! stirring_motor)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre (emergency_button and ((pre ( not emergency_button)) or FTP))) => ((! stirring_motor) or FTP)))",
            "diagramVariables": "TC = <b><i>emergency_button</i></b>, Response = <b><i>(! stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>emergency_button</i></b> is true and any point in the interval where <b><i>emergency_button</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fc5a4d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-AFTER-IMMEDIATELY",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "Only after M mode shall the sw immediately satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyAfter",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "sw",
            "componentTextRange": [
                24,
                29
            ],
            "timingTextRange": [
                31,
                41
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                43,
                51
            ],
            "ft": "(! <b><i>(R)</i></b>)",
            "pt": "((H ((FLin_<b><i>M</i></b> & (! FTP)) -> (Y (H (FTP -> (! <b><i>(R)</i></b>)))))) & ((H (! FLin_<b><i>M</i></b>)) -> (H (FTP -> (! <b><i>(R)</i></b>)))))",
            "ftExpanded": "(! <b><i>(R)</i></b>)",
            "ptExpanded": "((H (((((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)))))) & (Y TRUE)) -> (Y (H ((! (Y TRUE)) -> (! <b><i>(R)</i></b>)))))) & ((H (! (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)))))))) -> (H ((! (Y TRUE)) -> (! <b><i>(R)</i></b>)))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H((((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M)))))) and ( not FTP)) => (pre (H(FTP => ( not (R))))))) and ((H( not ((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M)))))))) => (H(FTP => ( not (R))))))",
            "diagramVariables": "M = <b><i>M</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and including) the first interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, trigger and RES cannot hold at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyAfter_null_immediately_satisfaction.svg"
        },
        "_id": "0fc61a00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-OP",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in mode M if occurred(5,P) & persisted(4,!P) the sw shall within 3 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "occurred",
                    "P",
                    "persisted",
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                8
            ],
            "qualifier_word": "if",
            "pre_condition": "(occurred ( 5 , P ) & persisted ( 4 , ! P ))",
            "regular_condition": "(occurred ( 5 , P ) & persisted ( 4 , ! P ))",
            "conditionTextRange": [
                10,
                43
            ],
            "component_name": "sw",
            "componentTextRange": [
                45,
                50
            ],
            "duration": "3",
            "timingTextRange": [
                58,
                71
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                73,
                81
            ],
            "diagramVariables": "M = <b><i>M</i></b>, TC = <b><i>(occurred ( 5 , P ) & persisted ( 4 , ! P ))</i></b>,  n = <b><i>3</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(occurred ( 5 , P ) & persisted ( 4 , ! P ))</i></b> is true and any point in the interval where <b><i>(occurred ( 5 , P ) & persisted ( 4 , ! P ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3</i></b>). If the interval ends sooner than trigger+<b><i>3</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_within_satisfaction.svg",
            "regular_condition_unexp_pt": "((((! Fin_$scope_mode$) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! Fin_$scope_mode$))))",
            "regular_condition_unexp_ft": "(occurred(5,P) & persisted(4,(! P)))",
            "regular_condition_SMV_pt": "((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))",
            "regular_condition_SMV_ft": "(occurred(5,P) & persisted(4,(! P)))",
            "regular_condition_coco": "(((S( P, ( not ($scope_mode$ and (FTP or (pre ( not $scope_mode$))))) )) and (OT(5,0,P))) and ((HT(4,0,( not P))) and (HT(3,0,( not ($scope_mode$ and (FTP or (pre ( not $scope_mode$)))))))))",
            "post_condition_unexp_pt": "R",
            "post_condition_unexp_ft": "R",
            "post_condition_SMV_pt": "R",
            "post_condition_SMV_ft": "R",
            "post_condition_coco": "R",
            "ft": "((LAST V ((! (Fin_<b><i>M</i></b> & (! LAST))) | (X (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(occurred(5,P) & persisted(4,(! P)))</i></b>) & ((! LAST) & ((X <b><i>(occurred(5,P) & persisted(4,(! P)))</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>R</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(occurred(5,P) & persisted(4,(! P)))</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>R</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))))))) & (<b><i>M</i></b> -> (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(occurred(5,P) & persisted(4,(! P)))</i></b>) & ((! LAST) & ((X <b><i>(occurred(5,P) & persisted(4,(! P)))</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>R</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(occurred(5,P) & persisted(4,(! P)))</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>R</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))))))",
            "pt": "((H ((Lin_<b><i>M</i></b> & (! FTP)) -> (Y (((O[=<b><i>3</i></b>] ((<b><i>((((! Fin_M) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! Fin_M))))</i></b> & ((Y (! <b><i>((((! Fin_M) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! Fin_M))))</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>R</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_<b><i>M</i></b> | <b><i>R</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>((((! Fin_M) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! Fin_M))))</i></b> & ((Y (! <b><i>((((! Fin_M) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! Fin_M))))</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>R</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_<b><i>M</i></b> | <b><i>R</i></b>))) & Fin_<b><i>M</i></b>))))) & (((! Lin_<b><i>M</i></b>) S ((! Lin_<b><i>M</i></b>) & Fin_<b><i>M</i></b>)) -> (((O[=<b><i>3</i></b>] ((<b><i>((((! Fin_M) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! Fin_M))))</i></b> & ((Y (! <b><i>((((! Fin_M) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! Fin_M))))</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>R</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_<b><i>M</i></b> | <b><i>R</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>((((! Fin_M) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! Fin_M))))</i></b> & ((Y (! <b><i>((((! Fin_M) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! Fin_M))))</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>R</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_<b><i>M</i></b> | <b><i>R</i></b>))) & Fin_<b><i>M</i></b>))))",
            "ptExpanded": "((H ((((! M) & (Y M)) & (Y TRUE)) -> (Y (((O[=3] ((((((! (M & ((!(Y TRUE)) | (Y (!M))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (M & ((!(Y TRUE)) | (Y (!M)))))))) & ((Y (! ((((! (M & ((!(Y TRUE)) | (Y (!M))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (M & ((!(Y TRUE)) | (Y (!M)))))))))) | (M & ((! (Y TRUE)) | (Y (! M)))))) & (! R))) -> (O[<3] ((M & ((! (Y TRUE)) | (Y (! M)))) | R))) S (((O[=3] ((((((! (M & ((!(Y TRUE)) | (Y (!M))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (M & ((!(Y TRUE)) | (Y (!M)))))))) & ((Y (! ((((! (M & ((!(Y TRUE)) | (Y (!M))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (M & ((!(Y TRUE)) | (Y (!M)))))))))) | (M & ((! (Y TRUE)) | (Y (! M)))))) & (! R))) -> (O[<3] ((M & ((! (Y TRUE)) | (Y (! M)))) | R))) & (M & ((! (Y TRUE)) | (Y (! M))))))))) & (((! ((! M) & (Y M))) S ((! ((! M) & (Y M))) & (M & ((! (Y TRUE)) | (Y (! M)))))) -> (((O[=3] ((((((! (M & ((!(Y TRUE)) | (Y (!M))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (M & ((!(Y TRUE)) | (Y (!M)))))))) & ((Y (! ((((! (M & ((!(Y TRUE)) | (Y (!M))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (M & ((!(Y TRUE)) | (Y (!M)))))))))) | (M & ((! (Y TRUE)) | (Y (! M)))))) & (! R))) -> (O[<3] ((M & ((! (Y TRUE)) | (Y (! M)))) | R))) S (((O[=3] ((((((! (M & ((!(Y TRUE)) | (Y (!M))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (M & ((!(Y TRUE)) | (Y (!M)))))))) & ((Y (! ((((! (M & ((!(Y TRUE)) | (Y (!M))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (M & ((!(Y TRUE)) | (Y (!M)))))))))) | (M & ((! (Y TRUE)) | (Y (! M)))))) & (! R))) -> (O[<3] ((M & ((! (Y TRUE)) | (Y (! M)))) | R))) & (M & ((! (Y TRUE)) | (Y (! M))))))))",
            "ftExpanded": "((LAST V ((! ((((! M) & (! LAST)) & (X M)) & (! LAST))) | (X (((((M & (! LAST)) & (X (! M))) | LAST) V (((! (occurred(5,P) & persisted(4,(! P)))) & ((! LAST) & ((X (occurred(5,P) & persisted(4,(! P)))) & (! (((M & (! LAST)) & (X (! M))) | LAST))))) -> ((X ((F[<=3] R) | (F[<3] (((M & (! LAST)) & (X (! M))) | LAST)))) & (! (((M & (! LAST)) & (X (! M))) | LAST))))) & ((occurred(5,P) & persisted(4,(! P))) -> ((F[<=3] R) | (F[<3] (((M & (! LAST)) & (X (! M))) | LAST)))))))) & (M -> (((((M & (! LAST)) & (X (! M))) | LAST) V (((! (occurred(5,P) & persisted(4,(! P)))) & ((! LAST) & ((X (occurred(5,P) & persisted(4,(! P)))) & (! (((M & (! LAST)) & (X (! M))) | LAST))))) -> ((X ((F[<=3] R) | (F[<3] (((M & (! LAST)) & (X (! M))) | LAST)))) & (! (((M & (! LAST)) & (X (! M))) | LAST))))) & ((occurred(5,P) & persisted(4,(! P))) -> ((F[<=3] R) | (F[<3] (((M & (! LAST)) & (X (! M))) | LAST)))))))",
            "CoCoSpecCode": "((H(((( not M) and (pre (M))) and ( not FTP)) => (pre (SI( (M and (FTP or (pre ( not M)))), ((OT(3,3,( ( (((S( P, ( not (M and (FTP or (pre ( not M))))) )) and (OT(5,0,P))) and ((HT(4,0,( not P))) and (HT(3,0,( not (M and (FTP or (pre ( not M))))))))) and ( ( Y ( not (((S( P, ( not (M and (FTP or (pre ( not M))))) )) and (OT(5,0,P))) and ((HT(4,0,( not P))) and (HT(3,0,( not (M and (FTP or (pre ( not M))))))))) ) ) or ( M and ( FTP or ( Y not M ) ) ) ) ) and ( not R ) ))) => (OT(3-1,0,( ( M and ( FTP or ( Y not M ) ) ) or R )))) ))))) and ((SI( (M and (FTP or (pre ( not M)))), ( not (( not M) and (pre (M)))) )) => (SI( (M and (FTP or (pre ( not M)))), ((OT(3,3,( ( (((S( P, ( not (M and (FTP or (pre ( not M))))) )) and (OT(5,0,P))) and ((HT(4,0,( not P))) and (HT(3,0,( not (M and (FTP or (pre ( not M))))))))) and ( ( Y ( not (((S( P, ( not (M and (FTP or (pre ( not M))))) )) and (OT(5,0,P))) and ((HT(4,0,( not P))) and (HT(3,0,( not (M and (FTP or (pre ( not M))))))))) ) ) or ( M and ( FTP or ( Y not M ) ) ) ) ) and ( not R ) ))) => (OT(3-1,0,( ( M and ( FTP or ( Y not M ) ) ) or R )))) ))))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0fc66820-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-assumption1",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "the liquid_mixer shall immediately satisfy ! liquid_level_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1"
                ],
                "modes": []
            },
            "component_name": "liquid_mixer",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(! liquid_level_1)",
            "responseTextRange": [
                35,
                58
            ],
            "ft": "<b><i>(! liquid_level_1)</i></b>",
            "pt": "(H (FTP -> <b><i>(! liquid_level_1)</i></b>))",
            "ftExpanded": "<b><i>(! liquid_level_1)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(! liquid_level_1)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(FTP => (not liquid_level_1)))",
            "diagramVariables": "Response = <b><i>(! liquid_level_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "0fc68f30-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TRIGGER-COND-NEXT-2",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "Upon Trig the sw shall at the next timepoint satisfy if Cond then Resp",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Trig",
                    "Cond",
                    "Resp"
                ],
                "modes": []
            },
            "regular_condition": "(Trig)",
            "qualifier_word": "upon",
            "pre_condition": "(Trig)",
            "conditionTextRange": [
                0,
                8
            ],
            "component_name": "sw",
            "componentTextRange": [
                10,
                15
            ],
            "timingTextRange": [
                23,
                43
            ],
            "post_condition": "(Cond => Resp)",
            "responseTextRange": [
                45,
                69
            ],
            "ft": "((LAST V (((! <b><i>(Trig)</i></b>) & ((! LAST) & (X <b><i>(Trig)</i></b>))) -> (X (LAST | (X <b><i>(Cond -> Resp)</i></b>))))) & (<b><i>(Trig)</i></b> -> (LAST | (X <b><i>(Cond -> Resp)</i></b>))))",
            "pt": "(H ((Y (<b><i>(Trig)</i></b> & ((Y (! <b><i>(Trig)</i></b>)) | FTP))) -> (<b><i>(Cond -> Resp)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(Trig)</i></b>) & ((! LAST) & (X <b><i>(Trig)</i></b>))) -> (X (LAST | (X <b><i>(Cond -> Resp)</i></b>))))) & (<b><i>(Trig)</i></b> -> (LAST | (X <b><i>(Cond -> Resp)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(Trig)</i></b> & ((Y (! <b><i>(Trig)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(Cond -> Resp)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((pre ((Trig) and ((pre ( not (Trig))) or FTP))) => ((Cond => Resp) or FTP)))",
            "diagramVariables": "TC = <b><i>(Trig)</i></b>, Response = <b><i>(Cond => Resp)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(Trig)</i></b> is true and any point in the interval where <b><i>(Trig)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fc6b640-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TCM-G-200",
        "parent_reqid": "",
        "project": "TCM",
        "rationale": "If the altitude control is engaged, once the plane is within 250 ft of the commanded altitude, the plane will remain within 250 ft of the commanded altitude.",
        "fulltext": "in altitude_control_engaged, when abs(altitude - commanded_altitude) <= 250 the autopilot shall always satisfy abs(altitude - commanded_altitude) <= 250",
        "semantics": {
            "scope": "in",
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "scope_mode": "altitude_control_engaged",
            "regular_condition": "abs ( altitude - commanded_altitude ) <= 250",
            "pre_conditions": [
                "abs ( altitude - commanded_altitude ) <= 250"
            ],
            "component_name": "autopilot",
            "post_condition": "abs ( altitude - commanded_altitude ) <= 250",
            "ltlTemplate": "G ($scope_mode$ IMP ($regular_condition$ IMP G $post_condition$))",
            "ltlFormula": "G (<b><i>altitude_control_engaged</i></b> IMP (<b><i>abs ( altitude - commanded_altitude ) <= 250</i></b> IMP G <b><i>abs ( altitude - commanded_altitude ) <= 250</i></b>))",
            "ltlDescription": "If the condition <b><i>abs ( altitude - commanded_altitude ) <= 250</i></b> holds,  component <b><i>autopilot</i></b> shall , always thereafter,  satisfy <b><i>abs ( altitude - commanded_altitude ) <= 250</i></b>. \nNote that this requirement is only imposed when <b><i>autopilot</i></b> is in mode <b><i>altitude_control_engaged</i></b>."
        },
        "input": {
            "scopeField": "in altitude_control_engaged",
            "conditionsField": "when abs(altitude - commanded_altitude) <= 250",
            "componentField": "the autopilot",
            "timingField": "always",
            "responsesField": "satisfy abs(altitude - commanded_altitude) <= 250"
        },
        "_id": "0fc70460-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-Exponentiation",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when in flight_mode when x+y<2 & x*y < 1 the sw shall always satisfy x^2>=0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "y"
                ],
                "modes": [
                    "flight_mode"
                ]
            },
            "scope_mode": "flight_mode",
            "scopeTextRange": [
                0,
                18
            ],
            "qualifier_word": "when",
            "pre_condition": "(x + y < 2 & x * y < 1)",
            "regular_condition": "(x + y < 2 & x * y < 1)",
            "conditionTextRange": [
                20,
                39
            ],
            "component_name": "sw",
            "componentTextRange": [
                41,
                46
            ],
            "timingTextRange": [
                54,
                59
            ],
            "post_condition": "(x ^ 2 >= 0)",
            "responseTextRange": [
                61,
                74
            ],
            "ft": "((LAST V ((! (Fin_<b><i>flight_mode</i></b> & (! LAST))) | (X (((Lin_<b><i>flight_mode</i></b> | LAST) V (((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & ((! LAST) & ((X <b><i>(x + y < 2 & x * y < 1)</i></b>) & (! (Lin_<b><i>flight_mode</i></b> | LAST))))) -> ((X ((Lin_<b><i>flight_mode</i></b> | LAST) V <b><i>(x ^ 2 >= 0)</i></b>)) & (! (Lin_<b><i>flight_mode</i></b> | LAST))))) & (<b><i>(x + y < 2 & x * y < 1)</i></b> -> ((Lin_<b><i>flight_mode</i></b> | LAST) V <b><i>(x ^ 2 >= 0)</i></b>)))))) & (<b><i>flight_mode</i></b> -> (((Lin_<b><i>flight_mode</i></b> | LAST) V (((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & ((! LAST) & ((X <b><i>(x + y < 2 & x * y < 1)</i></b>) & (! (Lin_<b><i>flight_mode</i></b> | LAST))))) -> ((X ((Lin_<b><i>flight_mode</i></b> | LAST) V <b><i>(x ^ 2 >= 0)</i></b>)) & (! (Lin_<b><i>flight_mode</i></b> | LAST))))) & (<b><i>(x + y < 2 & x * y < 1)</i></b> -> ((Lin_<b><i>flight_mode</i></b> | LAST) V <b><i>(x ^ 2 >= 0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>flight_mode</i></b> & (! FTP)) -> (Y ((((! <b><i>(x + y < 2 & x * y < 1)</i></b>) S ((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & Fin_<b><i>flight_mode</i></b>)) | <b><i>(x ^ 2 >= 0)</i></b>) S ((((! <b><i>(x + y < 2 & x * y < 1)</i></b>) S ((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & Fin_<b><i>flight_mode</i></b>)) | <b><i>(x ^ 2 >= 0)</i></b>) & Fin_<b><i>flight_mode</i></b>))))) & (((! Lin_<b><i>flight_mode</i></b>) S ((! Lin_<b><i>flight_mode</i></b>) & Fin_<b><i>flight_mode</i></b>)) -> ((((! <b><i>(x + y < 2 & x * y < 1)</i></b>) S ((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & Fin_<b><i>flight_mode</i></b>)) | <b><i>(x ^ 2 >= 0)</i></b>) S ((((! <b><i>(x + y < 2 & x * y < 1)</i></b>) S ((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & Fin_<b><i>flight_mode</i></b>)) | <b><i>(x ^ 2 >= 0)</i></b>) & Fin_<b><i>flight_mode</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>flight_mode</i></b>) & (! LAST)) & (X <b><i>flight_mode</i></b>)) & (! LAST))) | (X (((((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST) V (((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & ((! LAST) & ((X <b><i>(x + y < 2 & x * y < 1)</i></b>) & (! (((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST))))) -> ((X ((((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST) V <b><i>(x ^ 2 >= 0)</i></b>)) & (! (((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST))))) & (<b><i>(x + y < 2 & x * y < 1)</i></b> -> ((((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST) V <b><i>(x ^ 2 >= 0)</i></b>)))))) & (<b><i>flight_mode</i></b> -> (((((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST) V (((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & ((! LAST) & ((X <b><i>(x + y < 2 & x * y < 1)</i></b>) & (! (((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST))))) -> ((X ((((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST) V <b><i>(x ^ 2 >= 0)</i></b>)) & (! (((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST))))) & (<b><i>(x + y < 2 & x * y < 1)</i></b> -> ((((<b><i>flight_mode</i></b> & (! LAST)) & (X (! <b><i>flight_mode</i></b>))) | LAST) V <b><i>(x ^ 2 >= 0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>flight_mode</i></b>) & (Y <b><i>flight_mode</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(x + y < 2 & x * y < 1)</i></b>) S ((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & (<b><i>flight_mode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight_mode</i></b>)))))) | <b><i>(x ^ 2 >= 0)</i></b>) S ((((! <b><i>(x + y < 2 & x * y < 1)</i></b>) S ((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & (<b><i>flight_mode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight_mode</i></b>)))))) | <b><i>(x ^ 2 >= 0)</i></b>) & (<b><i>flight_mode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight_mode</i></b>))))))))) & (((! ((! <b><i>flight_mode</i></b>) & (Y <b><i>flight_mode</i></b>))) S ((! ((! <b><i>flight_mode</i></b>) & (Y <b><i>flight_mode</i></b>))) & (<b><i>flight_mode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight_mode</i></b>)))))) -> ((((! <b><i>(x + y < 2 & x * y < 1)</i></b>) S ((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & (<b><i>flight_mode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight_mode</i></b>)))))) | <b><i>(x ^ 2 >= 0)</i></b>) S ((((! <b><i>(x + y < 2 & x * y < 1)</i></b>) S ((! <b><i>(x + y < 2 & x * y < 1)</i></b>) & (<b><i>flight_mode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight_mode</i></b>)))))) | <b><i>(x ^ 2 >= 0)</i></b>) & (<b><i>flight_mode</i></b> & ((! (Y TRUE)) | (Y (! <b><i>flight_mode</i></b>))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((( not flight_mode) and (pre (flight_mode))) and ( not FTP)) => (pre (SI( (flight_mode and (FTP or (pre ( not flight_mode)))), ((SI( (flight_mode and (FTP or (pre ( not flight_mode)))), ( not (x + y < 2 and x * y < 1)) )) or (x ^ 2 >= 0)) ))))) and ((SI( (flight_mode and (FTP or (pre ( not flight_mode)))), ( not (( not flight_mode) and (pre (flight_mode)))) )) => (SI( (flight_mode and (FTP or (pre ( not flight_mode)))), ((SI( (flight_mode and (FTP or (pre ( not flight_mode)))), ( not (x + y < 2 and x * y < 1)) )) or (x ^ 2 >= 0)) ))))",
            "diagramVariables": "M = <b><i>flight_mode</i></b>, TC = <b><i>(x + y < 2 & x * y < 1)</i></b>, Response = <b><i>(x ^ 2 >= 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>flight_mode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(x + y < 2 & x * y < 1)</i></b> is true and any point in the interval where <b><i>(x + y < 2 & x * y < 1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "0fc75280-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-EXCL-REQ",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "strictly after m mode (which is required to occur) the sw shall  satisfy p",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": true,
                "required": true
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "m",
            "component_name": "sw",
            "post_condition": "p",
            "ltlTemplate": "(!$scope_mode$) U ($scope_mode$ & (X (G $post_condition$)))",
            "ltlFormula": "(!<b><i>m</i></b>) U (<b><i>m</i></b> & (X (G <b><i>p</i></b>)))",
            "ltlDescription": "Component <b><i>sw</i></b> shall  satisfy <b><i>p</i></b>. \nNote that this requirement is only relevant and imposed after the first time that <b><i>sw</i></b> exits mode <b><i>m</i></b> for the first time."
        },
        "input": {
            "scopeField": "strictly after m mode (which is required to occur)",
            "conditionsField": "",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy p"
        },
        "_id": "0fc7a0a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003d",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The roll reference shall be set to the cockpit turn knob command, up to a 30 degree limit, if the turn knob is commanding 3 degrees or more in either direction. (we removed the \"up to a 30 degree limit\" part)",
        "fulltext": "RollAutopilot shall always satisfy (TurnKnob >= 3.0 | TurnKnob <= -3.0) & (TurnKnob <= 30.0 | TurnKnob >= -30.0) => roll_hold_reference = TurnKnob",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "TurnKnob",
                    "roll_hold_reference"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)",
            "responseTextRange": [
                27,
                145
            ],
            "ft": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "pt": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ptExpanded": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((( TurnKnob >= 3.0 or TurnKnob <= -3.0 ) and ( TurnKnob <= 30.0 or TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)))",
            "diagramVariables": "Response = <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc7c7b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-004",
        "parent_reqid": "NN.R1",
        "project": "LM_requirements",
        "rationale": "The absolute error between the zt truth data and the output z shall never exceed a tolerance of 0.01, for the equivalent input of (xt, yt).",
        "fulltext": "NN shall for 200 secs satisfy ( x = xt & y = yt  => AbsoluteErrorZtMinusZ <= 0.01)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "xt",
                    "y",
                    "yt",
                    "AbsoluteErrorZtMinusZ"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))",
            "responseTextRange": [
                22,
                81
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (( x = xt and y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "0fc7eec0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from TRANSITION to STANDBY when the pilot is in control (standby).",
        "fulltext": "FSM_Autopilot shall always satisfy (standby & state = ap_transition_state) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "standby",
                    "state",
                    "ap_transition_state",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( standby & state = ap_transition_state ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                101
            ],
            "ft": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( standby and state = ap_transition_state ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc83ce0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001C",
        "parent_reqid": "EUL-001",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_13 = - SinTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_13",
                    "SinTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_13 = - SinTheta)",
            "responseTextRange": [
                19,
                48
            ],
            "ft": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_13 = - SinTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_13 = - SinTheta)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc863f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TSM-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy (single_fail_reported & failure_in_progress => set_val = pre_set_val)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "single_fail_reported",
                    "failure_in_progress",
                    "set_val",
                    "pre_set_val"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))",
            "responseTextRange": [
                34,
                110
            ],
            "ft": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "pt": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ptExpanded": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( single_fail_reported and failure_in_progress => set_val = pre_set_val ))))",
            "diagramVariables": "Response = <b><i>(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc88b00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-002B",
        "parent_reqid": "AP-002",
        "project": "LM_requirements",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "in roll_hold mode RollAutopilot shall always satisfy roll_cmd = roll_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "roll_hold_mode_cmd"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                43
            ],
            "post_condition": "(roll_cmd = roll_hold_mode_cmd)",
            "responseTextRange": [
                45,
                81
            ],
            "ft": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>))",
            "pt": "(H (<b><i>roll_hold</i></b> -> <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>))",
            "ptExpanded": "(H (<b><i>roll_hold</i></b> -> <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H(roll_hold => (roll_cmd = roll_hold_mode_cmd)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fc8d920-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001I",
        "parent_reqid": "EUL-001",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_33 = CosPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_33",
                    "CosPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_33 = CosPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_33 = CosPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc90030-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EB-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on  =  TRUE) &  abs(check_1_1  - 1.0)<eps6  &  abs(check_1_2)<eps6  &  abs(check_1_3)<eps6  & abs(check_2_1)<eps6  &  abs(check_2_2  -  1.0)<eps6  &  abs(check_2_3)<eps6  & abs(check_3_1)<eps6 & abs(check_3_2)< eps6 & abs(check_3_3 - 1.0)<eps6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "TRUE",
                    "abs",
                    "check_1_1",
                    "eps6",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)",
            "responseTextRange": [
                19,
                300
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) and abs ( check_1_1 - 1.0 ) < eps6 and abs ( check_1_2 ) < eps6 and abs ( check_1_3 ) < eps6 and abs ( check_2_1 ) < eps6 and abs ( check_2_2 - 1.0 ) < eps6 and abs ( check_2_3 ) < eps6 and abs ( check_3_1 ) < eps6 and abs ( check_3_2 ) < eps6 and abs ( check_3_3 - 1.0 ) < eps6)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fc92740-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "",
        "fulltext": "only after m c shall satisfy p",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyAfter",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": [
                    "m"
                ]
            },
            "scope_mode": "m",
            "scopeTextRange": [
                0,
                11
            ],
            "component_name": "c",
            "componentTextRange": [
                13,
                13
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                21,
                29
            ],
            "ft": "((FLin_<b><i>m</i></b> | LAST) V (! <b><i>(p)</i></b>))",
            "pt": "((H ((FLin_<b><i>m</i></b> & (! FTP)) -> (Y (H (! <b><i>(p)</i></b>))))) & ((H (! FLin_<b><i>m</i></b>)) -> (H (! <b><i>(p)</i></b>))))",
            "ftExpanded": "((((<b><i>m</i></b> & (! LAST)) & (X (! <b><i>m</i></b>))) | LAST) V (! <b><i>(p)</i></b>))",
            "ptExpanded": "((H (((((! <b><i>m</i></b>) & (Y <b><i>m</i></b>)) & (Y (H (! ((! <b><i>m</i></b>) & (Y <b><i>m</i></b>)))))) & (Y TRUE)) -> (Y (H (! <b><i>(p)</i></b>))))) & ((H (! (((! <b><i>m</i></b>) & (Y <b><i>m</i></b>)) & (Y (H (! ((! <b><i>m</i></b>) & (Y <b><i>m</i></b>)))))))) -> (H (! <b><i>(p)</i></b>))))",
            "component": "<b><i>c</i></b>",
            "CoCoSpecCode": "((H((((( not m) and (pre (m))) and pre (H( not (( not m) and (pre (m)))))) and ( not FTP)) => (pre (H( not (p)))))) and ((H( not ((( not m) and (pre (m))) and pre (H( not (( not m) and (pre (m)))))))) => (H( not (p)))))",
            "diagramVariables": "M = <b><i>m</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and including) the first interval where <b><i>m</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyAfter_null_null_satisfaction.svg"
        },
        "_id": "0fc94e50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G002",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy (g != chargepos => g= hottest(H))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "g",
                    "chargepos",
                    "hottest",
                    "H"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(( g != chargepos => g = hottest ( H ) ))",
            "responseTextRange": [
                44,
                84
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>) S ((! <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>) S ((! <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (( g not= chargepos => g = hottest ( H ) ))) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(( g != chargepos => g = hottest ( H ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0fc99c70-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Meaningless_One",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "Before initialization UAV shall immediately satisfy yout > 0",
        "semantics": {
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                20
            ],
            "component_name": "UAV",
            "componentTextRange": [
                22,
                24
            ],
            "timingTextRange": [
                32,
                42
            ],
            "post_condition": "(yout > 0)",
            "responseTextRange": [
                44,
                59
            ],
            "ft": "No meaning assigned.",
            "pt": "No meaning assigned.",
            "ftExpanded": "No meaning assigned.",
            "ptExpanded": "No meaning assigned.",
            "component": "<b><i>UAV</i></b>",
            "CoCoSpecCode": "No meaning assigned.",
            "diagramVariables": "M = <b><i>initialization</i></b>, Response = <b><i>(yout > 0)</i></b>.",
            "description": "Unclear requirement. We are not sure how to interpret this requirement.",
            "diagram": "Undefined svg."
        },
        "_id": "0fc9c380-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-010a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in hdg mode, when hdg_steady_state Autopilot shall always satisfy abs_hdg_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_steady_state",
                    "abs_hdg_err"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                16
            ],
            "regular_condition": "(hdg_steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(hdg_steady_state)",
            "conditionTextRange": [
                18,
                38
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                40,
                48
            ],
            "timingTextRange": [
                56,
                61
            ],
            "post_condition": "(abs_hdg_err <= 1.0)",
            "responseTextRange": [
                63,
                88
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg</i></b> & (! LAST))) | (X (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>hdg</i></b> & (! FTP)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) & Fin_<b><i>hdg</i></b>))))) & (((! Lin_<b><i>hdg</i></b>) S ((! Lin_<b><i>hdg</i></b>) & Fin_<b><i>hdg</i></b>)) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) & Fin_<b><i>hdg</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg</i></b>) & (! LAST)) & (X <b><i>hdg</i></b>)) & (! LAST))) | (X (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) S ((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg) and (pre (hdg))) and ( not FTP)) => (pre (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (SI( ((hdg_steady_state) and ((pre ( not (hdg_steady_state))) or (hdg and (FTP or (pre ( not hdg)))))), (abs_hdg_err <= 1.0) ))) ))))) and ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (( not hdg) and (pre (hdg)))) )) => (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (SI( ((hdg_steady_state) and ((pre ( not (hdg_steady_state))) or (hdg and (FTP or (pre ( not hdg)))))), (abs_hdg_err <= 1.0) ))) ))))",
            "diagramVariables": "M = <b><i>hdg</i></b>, TC = <b><i>(hdg_steady_state)</i></b>, Response = <b><i>(abs_hdg_err <= 1.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_hdg_err <= 1.0)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>hdg</i></b> and <b><i>(hdg_steady_state)</i></b> is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "0fc9ea90-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "\"Using a \ffirst order fi\fnite backward difference equation, the spatial \rderivatives of \u000edeltaz/ deltaxt shall never exceed a top bound of +10 or \rbottom bound of -35.\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fca11a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NLG-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy (Vv * yout) > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Vv",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( Vv * yout ) > 0)",
            "responseTextRange": [
                24,
                46
            ],
            "ft": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "pt": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((( Vv * yout ) > 0)))",
            "diagramVariables": "Response = <b><i>(( Vv * yout ) > 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(( Vv * yout ) > 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fca38b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-005",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "",
        "fulltext": "NeuralNetwork shall always satisfy  (x1 - x2) < epsilon  => F(x1) = F(x2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x1",
                    "x2",
                    "epsilon",
                    "F"
                ],
                "modes": []
            },
            "component_name": "NeuralNetwork",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( x1 - x2 ) < epsilon => F ( x1 ) = F ( x2 ))",
            "responseTextRange": [
                27,
                72
            ],
            "ft": "(LAST V <b><i>(( x1 - x2 ) < epsilon -> F ( x1 ) = F ( x2 ))</i></b>)",
            "pt": "(H <b><i>(( x1 - x2 ) < epsilon -> F ( x1 ) = F ( x2 ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( x1 - x2 ) < epsilon -> F ( x1 ) = F ( x2 ))</i></b>)",
            "ptExpanded": "(H <b><i>(( x1 - x2 ) < epsilon -> F ( x1 ) = F ( x2 ))</i></b>)",
            "component": "<b><i>NeuralNetwork</i></b>",
            "CoCoSpecCode": "(H((( x1 - x2 ) < epsilon => F ( x1 ) = F ( x2 ))))",
            "diagramVariables": "Response = <b><i>(( x1 - x2 ) < epsilon => F ( x1 ) = F ( x2 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fca5fc0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NLG-002&3",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - Xtarg) >= r & dot((yout - Xtarg),(yout - Xv)) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "Xtarg",
                    "r",
                    "dot",
                    "Xv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)",
            "responseTextRange": [
                24,
                91
            ],
            "ft": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "pt": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - Xtarg ) >= r and dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)))",
            "diagramVariables": "Response = <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcad4f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUI-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy yout <= TL &  yout >= BL",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "TL",
                    "BL"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(yout <= TL & yout >= BL)",
            "responseTextRange": [
                31,
                62
            ],
            "ft": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "pt": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ptExpanded": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((yout <= TL and yout >= BL)))",
            "diagramVariables": "Response = <b><i>(yout <= TL & yout >= BL)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(yout <= TL & yout >= BL)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcafc00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001A",
        "parent_reqid": "EUL-001",
        "project": "LM_requirements",
        "rationale": "The Rotation Matrix Output, DCM321, of this Function Shall Equal a 3x3 Matrix Product of a 3x3 Euler 3 (Roll) Rotation Matrix times a 3x3 Euler 2 (Pitch) Rotation Matrix times a 3x3 Euler 1 (Heading) Rotation Matrix.",
        "fulltext": "Euler shall always satisfy DCM321_11 = CosTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_11",
                    "CosTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_11 = CosTheta * CosPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_11 = CosTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcb4a20-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EB-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on  =  TRUE) &  abs(check_1_1  - 1.0)<eps12  &  abs(check_1_2)<eps12  &  abs(check_1_3)<eps12  & abs(check_2_1)<eps12  &  abs(check_2_2  -  1.0)<eps12  &  abs(check_2_3)<eps12  & abs(check_3_1)<eps12 & abs(check_3_2)< eps12 & abs(check_3_3 - 1.0)<eps12",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "TRUE",
                    "abs",
                    "check_1_1",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)",
            "responseTextRange": [
                19,
                309
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) and abs ( check_1_1 - 1.0 ) < eps12 and abs ( check_1_2 ) < eps12 and abs ( check_1_3 ) < eps12 and abs ( check_2_1 ) < eps12 and abs ( check_2_2 - 1.0 ) < eps12 and abs ( check_2_3 ) < eps12 and abs ( check_3_1 ) < eps12 and abs ( check_3_2 ) < eps12 and abs ( check_3_3 - 1.0 ) < eps12)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcb9840-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy !(Cb | Cc1 | Cc2 | Cd)  => roll_hold_reference = roll_angle",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Cb",
                    "Cc1",
                    "Cc2",
                    "Cd",
                    "roll_hold_reference",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)",
            "responseTextRange": [
                50,
                116
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (not ( Cb or Cc1 or Cc2 or Cd ) => roll_hold_reference = roll_angle)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (not ( Cb or Cc1 or Cc2 or Cd ) => roll_hold_reference = roll_angle)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0fcbbf50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBYwhen the pilot is in control (standby).",
        "fulltext": "FSM_Autopilot shall always satisfy (state=ap_nominal_state & standby)  => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "standby",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                97
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and standby ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcbe660-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "SWIM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "2.\tWhen a low speed warning is allowed, as computed by the SWIM Airspeed algorithm, a low speed warning shall be true when the vehicle air data impact pressure is less than the warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished where:\n\nThe warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished is computed as\n\nSWIM_Qcmin_lbspft2 = [(-2.0906 + 0.020306*Auto GCAS Minimum Vcas) + 0.1] * (70.7184 (lbspft2/in Hg))",
        "fulltext": "SWIM shall always satisfy ((lowSpeedWarningAllowed  & vehAirPress < warningTrigForMinPress) => lowSpeedWarningTrue)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lowSpeedWarningAllowed",
                    "vehAirPress",
                    "warningTrigForMinPress",
                    "lowSpeedWarningTrue"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))",
            "responseTextRange": [
                18,
                114
            ],
            "ft": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "pt": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( lowSpeedWarningAllowed and vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))))",
            "diagramVariables": "Response = <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcc3480-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TSM-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "In the no-fail state, a mis-compare, which shall be characterized by one branch differing with the other two branches by a unique trip level that lasts for more than the persistence limit, shall be reported to failure management as a failure.",
        "fulltext": "TriplexSignalMonitor shall always satisfy ((pre_no_fail & failure_must_be_latched)=> single_fail_reported)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pre_no_fail",
                    "failure_must_be_latched",
                    "single_fail_reported"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))",
            "responseTextRange": [
                34,
                105
            ],
            "ft": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "pt": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( ( pre_no_fail and failure_must_be_latched ) => single_fail_reported ))))",
            "diagramVariables": "Response = <b><i>(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcc82a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUI-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy (BL <= IC & IC <= TL & RESET)  => yout = IC",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "BL",
                    "IC",
                    "TL",
                    "RESET",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(( BL <= IC & IC <= TL & RESET ) => yout = IC)",
            "responseTextRange": [
                31,
                81
            ],
            "ft": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "pt": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ptExpanded": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((( BL <= IC and IC <= TL and RESET ) => yout = IC)))",
            "diagramVariables": "Response = <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcca9b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EB-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB shall always satisfy Buminusd_norm<0.0001",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Buminusd_norm"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(Buminusd_norm < 0.0001)",
            "responseTextRange": [
                16,
                43
            ],
            "ft": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "pt": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ptExpanded": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((Buminusd_norm < 0.0001)))",
            "diagramVariables": "Response = <b><i>(Buminusd_norm < 0.0001)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(Buminusd_norm < 0.0001)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fccf7d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-003B",
        "parent_reqid": "NN-003",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByYt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)",
            "responseTextRange": [
                22,
                83
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByYt <= 10.0 and DeltaZDividedByYt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true for <b><i>200</i></b> time points starting at the trigger, or to the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "0fcd45f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from TRANSITION to NOMINAL when the system is supported and sensor data is good.",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_transition_state & good & supported) => STATE = ap_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_transition_state",
                    "good",
                    "supported",
                    "STATE",
                    "ap_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)",
            "responseTextRange": [
                27,
                110
            ],
            "ft": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_transition_state and good and supported ) => STATE = ap_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcd6d00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-008v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from STANDBY to TRANSITION when the pilot is not in control (not standby)",
        "fulltext": " FSM_Autopilot shall always satisfy (state = ap_standby_state & !standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                102
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcdbb20-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NLG-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "\"When the UAV relative position to the target is less than the\rminimum stando\u000b distance, NLGuidance shall command the nearest inertial position \rin order to reestablish the minimum standoff distance while maintaining the target \ron the port-side of the vehicle.\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fcde230-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-011v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from NOMINAL to TRANSITION when the autopilot is not requesting support (not request)",
        "fulltext": "FSM_Sensor shall always  satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                25,
                108
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Sensor</i></b>\" shall satisfy <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fce3050-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-010b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in hdg mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                40,
                63
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>hdg</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg</i></b> & (! FTP)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>hdg</i></b>))))) & (((! Lin_<b><i>hdg</i></b>) S ((! Lin_<b><i>hdg</i></b>) & Fin_<b><i>hdg</i></b>)) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>hdg</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg</i></b>) & (! LAST)) & (X <b><i>hdg</i></b>)) & (! LAST))) | (X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>hdg</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>)) & (Y TRUE)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) S ((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg) and (pre (hdg))) and ( not FTP)) => (pre (SI( (hdg and (FTP or (pre ( not hdg)))), (overshoot <= 0.1) ))))) and ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (( not hdg) and (pre (hdg)))) )) => (SI( (hdg and (FTP or (pre ( not hdg)))), (overshoot <= 0.1) ))))",
            "diagramVariables": "M = <b><i>hdg</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(overshoot <= 0.1)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>hdg</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fce5760-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-003",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "",
        "fulltext": "NeuralNetwork shall always satisfy angle <= 90 & angle >= -90",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "angle"
                ],
                "modes": []
            },
            "component_name": "NeuralNetwork",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(angle <= 90 & angle >= -90)",
            "responseTextRange": [
                27,
                60
            ],
            "ft": "(LAST V <b><i>(angle <= 90 & angle >= -90)</i></b>)",
            "pt": "(H <b><i>(angle <= 90 & angle >= -90)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(angle <= 90 & angle >= -90)</i></b>)",
            "ptExpanded": "(H <b><i>(angle <= 90 & angle >= -90)</i></b>)",
            "component": "<b><i>NeuralNetwork</i></b>",
            "CoCoSpecCode": "(H((angle <= 90 and angle >= -90)))",
            "diagramVariables": "Response = <b><i>(angle <= 90 & angle >= -90)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcea580-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-002C",
        "parent_reqid": "EUL-002",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_31",
                    "VI_1",
                    "R_31",
                    "VI_2",
                    "R_32",
                    "VI_3",
                    "R_33"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "pt": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)))",
            "diagramVariables": "Response = <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcef3a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Test1",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "C shall after 10 secs satisfy p",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": []
            },
            "component_name": "C",
            "componentTextRange": [
                0,
                0
            ],
            "duration": [
                "10"
            ],
            "timingTextRange": [
                8,
                20
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                22,
                30
            ],
            "ft": "(((G[<=<b><i>10</i></b>] (! <b><i>(p)</i></b>)) | (LAST V (! <b><i>(p)</i></b>))) & ((F[<=<b><i>10</i></b>+1] <b><i>(p)</i></b>) | (F[<<b><i>10</i></b>+1] LAST)))",
            "pt": "((H ((O[<=<b><i>10</i></b>] FTP) -> (! <b><i>(p)</i></b>))) & (H ((H (! <b><i>(p)</i></b>)) -> (O[<<b><i>10</i></b>+1] FTP))))",
            "ftExpanded": "(((G[<=<b><i>10</i></b>] (! <b><i>(p)</i></b>)) | (LAST V (! <b><i>(p)</i></b>))) & ((F[<=<b><i>10</i></b>+1] <b><i>(p)</i></b>) | (F[<<b><i>10</i></b>+1] LAST)))",
            "ptExpanded": "((H ((O[<=<b><i>10</i></b>] (! (Y TRUE))) -> (! <b><i>(p)</i></b>))) & (H ((H (! <b><i>(p)</i></b>)) -> (O[<<b><i>10</i></b>+1] (! (Y TRUE))))))",
            "component": "<b><i>C</i></b>",
            "CoCoSpecCode": "((H((OT(10,0,FTP)) => ( not (p)))) and (H((H( not (p))) => (OT(10,0,FTP)))))",
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>10</i></b> from the trigger; moreover, RES must hold at the point that is at distance <b><i>10</i></b>+1 from the trigger, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg"
        },
        "_id": "0fcf1ab0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "VariablesTest",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "in m if xA > 0 UAV shall satisfy yB > 0 & xin > 0",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "xA",
                    "yB",
                    "xin"
                ],
                "modes": [
                    "m"
                ]
            },
            "scope_mode": "m",
            "scopeTextRange": [
                0,
                3
            ],
            "regular_condition": "(xA > 0)",
            "qualifier_word": "if",
            "pre_condition": "(xA > 0)",
            "conditionTextRange": [
                5,
                13
            ],
            "component_name": "UAV",
            "componentTextRange": [
                15,
                17
            ],
            "post_condition": "(yB > 0 & xin > 0)",
            "responseTextRange": [
                25,
                48
            ],
            "ft": "(G ((!Fin_<b><i>m</i></b>) | (Fin_<b><i>m</i></b> & (X ((F (Lin_<b><i>m</i></b> | LAST)) -> ((Lin_<b><i>m</i></b> | LAST) V (<b><i>(xA > 0)</i></b> -> ((!(Lin_<b><i>m</i></b> | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))))) & (<b><i>m</i></b> -> ((F (Lin_<b><i>m</i></b> | LAST)) -> ((Lin_<b><i>m</i></b> | LAST) V (<b><i>(xA > 0)</i></b> -> ((!(Lin_<b><i>m</i></b> | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))",
            "pt": "(H (Lin_<b><i>m</i></b> -> (Y (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & Fin_<b><i>m</i></b>)) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>))))))) & (((!Lin_<b><i>m</i></b>) S ((!Lin_<b><i>m</i></b>) & Fin_<b><i>m</i></b>)) -> (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & Fin_<b><i>m</i></b>)) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>)))))",
            "ftExpanded": "(G ((!((! <b><i>m</i></b>) & X <b><i>m</i></b>)) | (((! <b><i>m</i></b>) & X <b><i>m</i></b>) & (X ((F ((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) -> (((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST) V (<b><i>(xA > 0)</i></b> -> ((!((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))))) & (<b><i>m</i></b> -> ((F ((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) -> (((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST) V (<b><i>(xA > 0)</i></b> -> ((!((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))",
            "ptExpanded": "(H (((! <b><i>m</i></b>) & (Y <b><i>m</i></b>)) -> (Y (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>))))))) & (((!((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) S ((!((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) -> (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>)))))",
            "component": "<b><i>UAV</i></b>",
            "CoCoSpecCode": "(H((( not m) and (pre ( m ))) => (pre ((S( (( not (xA > 0)) and (m and (FTP(_) or (pre (  not m ))))), ( not (xA > 0)) )) or ( not (S( (( not (yB > 0 and xin > 0)) and (xA > 0)), ( not (yB > 0 and xin > 0)) ))))))) and ((S( (( not (( not m) and (pre ( m )))) and (m and (FTP(_) or (pre (  not m ))))), ( not (( not m) and (pre ( m )))) )) => ((S( (( not (xA > 0)) and (m and (FTP(_) or (pre (  not m ))))), ( not (xA > 0)) )) or ( not (S( (( not (yB > 0 and xin > 0)) and (xA > 0)), ( not (yB > 0 and xin > 0)) )))))",
            "diagramVariables": "M = <b><i>m</i></b>, Response = <b><i>(yB > 0 & xin > 0)</i></b>.",
            "description": "At some future point, the component \"<b><i>UAV</i></b>\" shall satisfy <b><i>(yB > 0 & xin > 0)</i></b>. This is only enforced when \"<b><i>UAV</i></b>\" is in mode <b><i>m</i></b> and <b><i>(xA > 0)</i></b> is satisfied.",
            "diagram": "Undefined svg."
        },
        "_id": "0fcf41c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "KAN-002",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "The AVAPrototype shall achieve a reasonable flight path angle",
        "semantics": {},
        "_id": "0fcf68d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "\"Roll hold mode shall be the active mode whenever the autopilot\r is engaged and no other lateral mode is active.\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fcfb6f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command translational axial accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_airspeed_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_airspeed_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_airspeed_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                71
            ],
            "ft": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_airspeed_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fcfde00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-002a",
        "parent_reqid": "AP-002",
        "project": "LM_requirements",
        "rationale": "Roll hold mode shall be the active mode whenever the autopilot is engaged and no other lateral mode is active.",
        "fulltext": "in roll_hold mode RollAutopilot shall always satisfy autopilot_engaged & no_other_lateral_mode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "no_other_lateral_mode"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                43
            ],
            "post_condition": "(autopilot_engaged & no_other_lateral_mode)",
            "responseTextRange": [
                45,
                93
            ],
            "ft": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>))",
            "pt": "(H (<b><i>roll_hold</i></b> -> <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>))",
            "ptExpanded": "(H (<b><i>roll_hold</i></b> -> <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H(roll_hold => (autopilot_engaged and no_other_lateral_mode)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fd02c20-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Roll Regulator Shall not command angular roll accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_roll_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_roll_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_roll_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_roll_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd05330-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001d",
        "parent_reqid": "EUL-001",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_21 = (- CosPhi * SinPsi + SinPhi * SinTheta * CosPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_21",
                    "CosPhi",
                    "SinPsi",
                    "SinPhi",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))",
            "responseTextRange": [
                19,
                86
            ],
            "ft": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd0a150-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G001",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy (recharge => g =chargePos) & (g =chargePos => recharge )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "recharge",
                    "g",
                    "chargePos"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(( recharge => g = chargePos ) & ( g = chargePos => recharge ))",
            "responseTextRange": [
                44,
                107
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>) S ((! <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>) S ((! <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (( recharge => g = chargePos ) and ( g = chargePos => recharge ))) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(( recharge => g = chargePos ) & ( g = chargePos => recharge ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0fd0c860-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-001v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if autopilot & pre_autopilot & pre_limits FSM shall immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot",
                    "pre_autopilot",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(autopilot & pre_autopilot & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(autopilot & pre_autopilot & pre_limits)",
            "conditionTextRange": [
                0,
                40
            ],
            "component_name": "FSM",
            "componentTextRange": [
                42,
                44
            ],
            "timingTextRange": [
                52,
                62
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                64,
                77
            ],
            "ft": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((autopilot and pre_autopilot and pre_limits) and ((pre ( not (autopilot and pre_autopilot and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "Upon <b><i>(autopilot & pre_autopilot & pre_limits)</i></b> becoming true, immediately, the component \"<b><i>FSM</i></b>\" shall satisfy <b><i>(pullup)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "0fd11680-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TSM-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "\"In the single fail state, a good channel average of the remaining\r two good branches shall be used to determine the selected value.\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fd11681-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "C-003",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "",
        "fulltext": "when cross_track_error_received Controller shall within 10 ticks satisfy cross_track_error_received < epsilon",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "cross_track_error_received",
                    "epsilon"
                ],
                "modes": []
            },
            "regular_condition": "(cross_track_error_received)",
            "qualifier_word": "when",
            "pre_condition": "(cross_track_error_received)",
            "conditionTextRange": [
                0,
                30
            ],
            "component_name": "Controller",
            "componentTextRange": [
                32,
                41
            ],
            "duration": [
                "10"
            ],
            "timingTextRange": [
                49,
                63
            ],
            "post_condition": "(cross_track_error_received < epsilon)",
            "responseTextRange": [
                65,
                108
            ],
            "ft": "((LAST V (((! <b><i>(cross_track_error_received)</i></b>) & ((! LAST) & (X <b><i>(cross_track_error_received)</i></b>))) -> (X ((F[<=<b><i>10</i></b>] <b><i>(cross_track_error_received < epsilon)</i></b>) | (F[<<b><i>10</i></b>] LAST))))) & (<b><i>(cross_track_error_received)</i></b> -> ((F[<=<b><i>10</i></b>] <b><i>(cross_track_error_received < epsilon)</i></b>) | (F[<<b><i>10</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>10</i></b>] ((<b><i>(cross_track_error_received)</i></b> & ((Y (! <b><i>(cross_track_error_received)</i></b>)) | FTP)) & (! <b><i>(cross_track_error_received < epsilon)</i></b>))) -> (O[<<b><i>10</i></b>] (FTP | <b><i>(cross_track_error_received < epsilon)</i></b>))))",
            "ftExpanded": "((LAST V (((! <b><i>(cross_track_error_received)</i></b>) & ((! LAST) & (X <b><i>(cross_track_error_received)</i></b>))) -> (X ((F[<=<b><i>10</i></b>] <b><i>(cross_track_error_received < epsilon)</i></b>) | (F[<<b><i>10</i></b>] LAST))))) & (<b><i>(cross_track_error_received)</i></b> -> ((F[<=<b><i>10</i></b>] <b><i>(cross_track_error_received < epsilon)</i></b>) | (F[<<b><i>10</i></b>] LAST))))",
            "ptExpanded": "(H ((O[=<b><i>10</i></b>] ((<b><i>(cross_track_error_received)</i></b> & ((Y (! <b><i>(cross_track_error_received)</i></b>)) | (! (Y TRUE)))) & (! <b><i>(cross_track_error_received < epsilon)</i></b>))) -> (O[<<b><i>10</i></b>] ((! (Y TRUE)) | <b><i>(cross_track_error_received < epsilon)</i></b>))))",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "(H((OT(10,10,( ( (cross_track_error_received) and ( ( Y ( not (cross_track_error_received) ) ) or FTP ) ) and ( not (cross_track_error_received < epsilon) ) ))) => (OT(10-1,0,( FTP or (cross_track_error_received < epsilon) )))))",
            "diagramVariables": "TC = <b><i>(cross_track_error_received)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(cross_track_error_received < epsilon)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(cross_track_error_received)</i></b> is true and any point in the interval where <b><i>(cross_track_error_received)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <=<b><i>10</i></b> from the trigger, except if the end of the interval occurs sooner.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg"
        },
        "_id": "0fd164a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TSM-003b",
        "parent_reqid": "TSM-003",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =2 =>  set_val = 0.5 * (ia +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 2 => set_val = 0.5 * ( ia + ic ))",
            "responseTextRange": [
                34,
                75
            ],
            "ft": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 2 => set_val = 0.5 * ( ia + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 2 => set_val = 0.5 * ( ia + ic ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd18bb0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Roll Regulator Shall not command transient changes in angular roll acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy roll_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(roll_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                63
            ],
            "ft": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((roll_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd1d9d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "C-002",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "",
        "fulltext": "Controller shall always satisfy received_angle <= 90 & received_angle >=  -90",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "received_angle"
                ],
                "modes": []
            },
            "component_name": "Controller",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(received_angle <= 90 & received_angle >= -90)",
            "responseTextRange": [
                24,
                76
            ],
            "ft": "(LAST V <b><i>(received_angle <= 90 & received_angle >= -90)</i></b>)",
            "pt": "(H <b><i>(received_angle <= 90 & received_angle >= -90)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(received_angle <= 90 & received_angle >= -90)</i></b>)",
            "ptExpanded": "(H <b><i>(received_angle <= 90 & received_angle >= -90)</i></b>)",
            "component": "<b><i>Controller</i></b>",
            "CoCoSpecCode": "(H((received_angle <= 90 and received_angle >= -90)))",
            "diagramVariables": "Response = <b><i>(received_angle <= 90 & received_angle >= -90)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd200e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TestRequirement",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "In m1 AUTOPILOT shall satisfy p",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": [
                    "m1"
                ]
            },
            "scope_mode": "m1",
            "scopeTextRange": [
                0,
                4
            ],
            "component_name": "AUTOPILOT",
            "componentTextRange": [
                6,
                14
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                22,
                30
            ],
            "ft": "(G ((!Fin_<b><i>m1</i></b>) | (Fin_<b><i>m1</i></b> & (X ((F (Lin_<b><i>m1</i></b> | LAST)) -> ((!(Lin_<b><i>m1</i></b> | LAST)) U <b><i>(p)</i></b>)))))) & (<b><i>m1</i></b> -> ((F (Lin_<b><i>m1</i></b> | LAST)) -> ((!(Lin_<b><i>m1</i></b> | LAST)) U <b><i>(p)</i></b>)))",
            "pt": "(H (Lin_<b><i>m1</i></b> -> (Y (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & Fin_<b><i>m1</i></b>)))))) & (((!Lin_<b><i>m1</i></b>) S ((!Lin_<b><i>m1</i></b>) & Fin_<b><i>m1</i></b>)) -> (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & Fin_<b><i>m1</i></b>))))",
            "ftExpanded": "(G ((!((! <b><i>m1</i></b>) & X <b><i>m1</i></b>)) | (((! <b><i>m1</i></b>) & X <b><i>m1</i></b>) & (X ((F ((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) -> ((!((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) U <b><i>(p)</i></b>)))))) & (<b><i>m1</i></b> -> ((F ((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) -> ((!((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) U <b><i>(p)</i></b>)))",
            "ptExpanded": "(H (((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>)) -> (Y (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>))))))))) & (((!((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>))) S ((!((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>))) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>))))) -> (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>)))))))",
            "component": "<b><i>AUTOPILOT</i></b>",
            "CoCoSpecCode": "(H((( not m1) and (pre ( m1 ))) => (pre ( not (S( (( not (p)) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (p)) )))))) and ((S( (( not (( not m1) and (pre ( m1 )))) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (( not m1) and (pre ( m1 )))) )) => ( not (S( (( not (p)) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (p)) ))))",
            "diagramVariables": "M = <b><i>m1</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "At some future point, the component \"<b><i>AUTOPILOT</i></b>\" shall satisfy <b><i>(p)</i></b>. This is only enforced when \"<b><i>AUTOPILOT</i></b>\" is in mode <b><i>m1</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "0fd24f00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-009",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from STANDBY to MANEUVER when a failure occurs (apfail)",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & apfail )=> STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "apfail",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                98
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and apfail ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd27610-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-001v3",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if  htlore3_autopilot  &  htlore3_notpreprelimits  &  pre_limits  FSM  shall  immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "htlore3_autopilot",
                    "htlore3_notpreprelimits",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "conditionTextRange": [
                0,
                63
            ],
            "component_name": "FSM",
            "componentTextRange": [
                66,
                68
            ],
            "timingTextRange": [
                78,
                88
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                90,
                103
            ],
            "ft": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((htlore3_autopilot and htlore3_notpreprelimits and pre_limits) and ((pre ( not (htlore3_autopilot and htlore3_notpreprelimits and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "Upon <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> becoming true, immediately, the component \"<b><i>FSM</i></b>\" shall satisfy <b><i>(pullup)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "0fd2c430-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-004SP",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "NeuralNetwork shall for 200 sec satisfy (x = xt & y = yt) => abs_error(zt - z) <= 0.01",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "xt",
                    "y",
                    "yt",
                    "abs_error",
                    "zt",
                    "z"
                ],
                "modes": []
            },
            "component_name": "NeuralNetwork",
            "componentTextRange": [
                0,
                12
            ],
            "duration": "200 sec",
            "timingTextRange": [
                20,
                30
            ],
            "post_condition": "(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)",
            "responseTextRange": [
                32,
                85
            ],
            "ft": "(G[<=<b><i>200 sec</i></b>] <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) | (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> U (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> & (LAST | LAST)))",
            "pt": "((O[<=<b><i>200 sec</i></b>] FTP) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) S (((O[<=<b><i>200 sec</i></b>] FTP) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) & FTP)",
            "ftExpanded": "(G[<=<b><i>200 sec</i></b>] <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) | (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> U (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> & (LAST | LAST)))",
            "ptExpanded": "((O[<=<b><i>200 sec</i></b>] (! Y TRUE)) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) S (((O[<=<b><i>200 sec</i></b>] (! Y TRUE)) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) & (! Y TRUE))",
            "component": "<b><i>NeuralNetwork</i></b>",
            "CoCoSpecCode": "S( (((OTlore(200 sec, FTP() )) => (( x = xt and y = yt ) => abs_error ( zt - z ) <= 0.01)) and FTP()), ((OTlore(200 sec, FTP() )) => (( x = xt and y = yt ) => abs_error ( zt - z ) <= 0.01)) )",
            "diagramVariables": " n = <b><i>200 sec</i></b>, Response = <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>.",
            "description": "TIME, the component \"<b><i>NeuralNetwork</i></b>\" shall satisfy <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>.",
            "diagram": "Undefined svg."
        },
        "_id": "0fd2eb40-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Height Regulator Shall not command translational height accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_height_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_height_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_height_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                69
            ],
            "ft": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_height_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_height_output_exceeding_32 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_height_output_exceeding_32 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd31250-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-004v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBY when the pilot is in contronl (standby)",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_nominal_state & ! good & ! standby) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "good",
                    "standby",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                110
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and not good and not standby ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd36070-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G003",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy !obstacle(g)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "obstacle",
                    "g"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(! obstacle ( g ))",
            "responseTextRange": [
                44,
                63
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(! obstacle ( g ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(! obstacle ( g ))</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(! obstacle ( g ))</i></b>) S ((! <b><i>(! obstacle ( g ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(! obstacle ( g ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(! obstacle ( g ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(! obstacle ( g ))</i></b>) S ((! <b><i>(! obstacle ( g ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (not obstacle ( g ))) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(! obstacle ( g ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0fd38780-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-004a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in roll_hold mode, when steady_state Autopilot shall always satisfy abs_roller_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "steady_state",
                    "abs_roller_err"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                22
            ],
            "regular_condition": "(steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(steady_state)",
            "conditionTextRange": [
                24,
                40
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                42,
                50
            ],
            "timingTextRange": [
                58,
                63
            ],
            "post_condition": "(abs_roller_err <= 1.0)",
            "responseTextRange": [
                65,
                93
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (SI( ((steady_state) and ((pre ( not (steady_state))) or (roll_hold and (FTP or (pre ( not roll_hold)))))), (abs_roller_err <= 1.0) ))) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (SI( ((steady_state) and ((pre ( not (steady_state))) or (roll_hold and (FTP or (pre ( not roll_hold)))))), (abs_roller_err <= 1.0) ))) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, TC = <b><i>(steady_state)</i></b>, Response = <b><i>(abs_roller_err <= 1.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roller_err <= 1.0)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b> and <b><i>(steady_state)</i></b> is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "0fd3ae90-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-008v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "apfail",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                115
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby and not apfail ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd3d5a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NLG-005a",
        "parent_reqid": "NLG-005",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) < mag(r2) NLGuidance shall always satisfy yout = Xap1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap1"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "conditionTextRange": [
                0,
                33
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                35,
                44
            ],
            "timingTextRange": [
                52,
                57
            ],
            "post_condition": "(yout = Xap1)",
            "responseTextRange": [
                59,
                77
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or FTP)), (yout = Xap1) ))))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> is true and any point in the interval where <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "0fd3fcb0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-002",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "",
        "fulltext": "NeuralNetwork shall always satisfy distance >=0 & distance <= taxiwayWidth /2 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "distance",
                    "taxiwayWidth"
                ],
                "modes": []
            },
            "component_name": "NeuralNetwork",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(distance >= 0 & distance <= taxiwayWidth / 2)",
            "responseTextRange": [
                27,
                76
            ],
            "ft": "(LAST V <b><i>(distance >= 0 & distance <= taxiwayWidth / 2)</i></b>)",
            "pt": "(H <b><i>(distance >= 0 & distance <= taxiwayWidth / 2)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(distance >= 0 & distance <= taxiwayWidth / 2)</i></b>)",
            "ptExpanded": "(H <b><i>(distance >= 0 & distance <= taxiwayWidth / 2)</i></b>)",
            "component": "<b><i>NeuralNetwork</i></b>",
            "CoCoSpecCode": "(H((distance >= 0 and distance <= taxiwayWidth / 2)))",
            "diagramVariables": "Response = <b><i>(distance >= 0 & distance <= taxiwayWidth / 2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd423c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Pitch Regulator Shall not command transient changes in angular pitch acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy pitch_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pitch_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(pitch_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                64
            ],
            "ft": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((pitch_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd471e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TSM-003c",
        "parent_reqid": "TSM-003",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =4 => set_val = 0.5 * (ib +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ib",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 4 => set_val = 0.5 * ( ib + ic ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 4 => set_val = 0.5 * ( ib + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 4 => set_val = 0.5 * ( ib + ic ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd4e710-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "C-001",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "",
        "fulltext": "if receive_angle controller shall immediately satisfy command_sensible",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "receive_angle",
                    "command_sensible"
                ],
                "modes": []
            },
            "regular_condition": "(receive_angle)",
            "qualifier_word": "if",
            "pre_condition": "(receive_angle)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "controller",
            "componentTextRange": [
                17,
                26
            ],
            "timingTextRange": [
                34,
                44
            ],
            "post_condition": "(command_sensible)",
            "responseTextRange": [
                46,
                69
            ],
            "ft": "((LAST V (((! <b><i>(receive_angle)</i></b>) & ((! LAST) & (X <b><i>(receive_angle)</i></b>))) -> (X <b><i>(command_sensible)</i></b>))) & (<b><i>(receive_angle)</i></b> -> <b><i>(command_sensible)</i></b>))",
            "pt": "(H ((<b><i>(receive_angle)</i></b> & ((Y (! <b><i>(receive_angle)</i></b>)) | FTP)) -> <b><i>(command_sensible)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(receive_angle)</i></b>) & ((! LAST) & (X <b><i>(receive_angle)</i></b>))) -> (X <b><i>(command_sensible)</i></b>))) & (<b><i>(receive_angle)</i></b> -> <b><i>(command_sensible)</i></b>))",
            "ptExpanded": "(H ((<b><i>(receive_angle)</i></b> & ((Y (! <b><i>(receive_angle)</i></b>)) | (! (Y TRUE)))) -> <b><i>(command_sensible)</i></b>))",
            "component": "<b><i>controller</i></b>",
            "CoCoSpecCode": "(H(((receive_angle) and ((pre ( not (receive_angle))) or FTP)) => (command_sensible)))",
            "diagramVariables": "TC = <b><i>(receive_angle)</i></b>, Response = <b><i>(command_sensible)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(receive_angle)</i></b> is true and any point in the interval where <b><i>(receive_angle)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "0fd53530-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSMforPaper",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "FSM shall always satisfy (sensorLimits & autopilot) => pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "sensorLimits",
                    "autopilot",
                    "pullup"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( sensorLimits & autopilot ) => pullup)",
            "responseTextRange": [
                17,
                60
            ],
            "ft": "(LAST V <b><i>(( sensorLimits & autopilot ) -> pullup)</i></b>)",
            "pt": "(H <b><i>(( sensorLimits & autopilot ) -> pullup)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( sensorLimits & autopilot ) -> pullup)</i></b>)",
            "ptExpanded": "(H <b><i>(( sensorLimits & autopilot ) -> pullup)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( sensorLimits and autopilot ) => pullup)))",
            "diagramVariables": "Response = <b><i>(( sensorLimits & autopilot ) => pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd55c40-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NLG-005b",
        "parent_reqid": "NLG-005",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) >= mag(r2) NLGuidance shall always satisfy yout = Xap2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap2"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "conditionTextRange": [
                0,
                34
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                36,
                45
            ],
            "timingTextRange": [
                53,
                58
            ],
            "post_condition": "(yout = Xap2)",
            "responseTextRange": [
                60,
                78
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or FTP)), (yout = Xap2) ))))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> is true and any point in the interval where <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "0fd5aa60-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-002A",
        "parent_reqid": "EUL-002",
        "project": "LM_requirements",
        "rationale": "The Body Vector Output, Vb, of this Function Shall Equal a 3x1 Vector Product of the 3x3 Rotation Matrix Output, DCM321, times the Input Inertial Vector, Vi.",
        "fulltext": "Euler shall always satisfy R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_11",
                    "VI_1",
                    "R_11",
                    "VI_2",
                    "R_12",
                    "VI_3",
                    "R_13"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "pt": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)))",
            "diagramVariables": "Response = <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd5f880-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-004b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in roll_hold mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                23,
                31
            ],
            "timingTextRange": [
                39,
                44
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                46,
                69
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(overshoot <= 0.1)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fd61f90-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-008",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Yaw Regulator Shall not command transient changes in angular yaw acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy yaw_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yaw_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(yaw_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                62
            ],
            "ft": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((yaw_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd646a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-003A",
        "parent_reqid": "NN-003",
        "project": "LM_requirements",
        "rationale": "3.\tUsing a first order finite backward difference equation, the spatial derivatives of Δz/ Δxt = (z(n,1)-z(n-1))/(xt(n,1)-xt(n-1,1) and Δz/ Δyt = (z(n,1)-z(n-1))/(yt(n,1)-yt(n-1,1) shall never exceed a top bound of +10 or bottom bound of -35 (e.g. -35 <= Δz/ Δ(xt,yt) <= 10), where n denotes an index to the current values and n-1 denotes the prior values in the included truth data for xt and yt.    ",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByXt<= 10.0 & DeltaZDividedByXt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByXt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)",
            "responseTextRange": [
                22,
                82
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByXt <= 10.0 and DeltaZDividedByXt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true for <b><i>200</i></b> time points starting at the trigger, or to the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "0fd694c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G004",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy (atGoal & s0 != chargePos) => GoalSet = GoalSetMinusSo",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "atGoal",
                    "s0",
                    "chargePos",
                    "GoalSet",
                    "GoalSetMinusSo"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(( atGoal & s0 != chargePos ) => GoalSet = GoalSetMinusSo)",
            "responseTextRange": [
                44,
                105
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>) S ((! <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>) S ((! <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (( atGoal and s0 not= chargePos ) => GoalSet = GoalSetMinusSo)) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(( atGoal & s0 != chargePos ) => GoalSet = GoalSetMinusSo)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0fd6e2e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUI-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy normal => yout = normal_yout",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "normal",
                    "yout",
                    "normal_yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(normal => yout = normal_yout)",
            "responseTextRange": [
                31,
                66
            ],
            "ft": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "pt": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ptExpanded": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((normal => yout = normal_yout)))",
            "diagramVariables": "Response = <b><i>(normal => yout = normal_yout)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(normal => yout = normal_yout)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd75810-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Rover-001",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "",
        "fulltext": "Rover shall eventually satisfy cross_track_position = 0 & cross_track_angle =0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "cross_track_position",
                    "cross_track_angle"
                ],
                "modes": []
            },
            "component_name": "Rover",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                21
            ],
            "post_condition": "(cross_track_position = 0 & cross_track_angle = 0)",
            "responseTextRange": [
                23,
                77
            ],
            "ft": "((! LAST) U <b><i>(cross_track_position = 0 & cross_track_angle = 0)</i></b>)",
            "pt": "(O <b><i>(cross_track_position = 0 & cross_track_angle = 0)</i></b>)",
            "ftExpanded": "((! LAST) U <b><i>(cross_track_position = 0 & cross_track_angle = 0)</i></b>)",
            "ptExpanded": "(O <b><i>(cross_track_position = 0 & cross_track_angle = 0)</i></b>)",
            "component": "<b><i>Rover</i></b>",
            "CoCoSpecCode": "(O((cross_track_position = 0 and cross_track_angle = 0)))",
            "diagramVariables": "Response = <b><i>(cross_track_position = 0 & cross_track_angle = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg"
        },
        "_id": "0fd7a630-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy  abs_roll_rate <= 6.6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_rate"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_rate <= 6.6)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "pt": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_rate <= 6.6)))",
            "diagramVariables": "Response = <b><i>(abs_roll_rate <= 6.6)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roll_rate <= 6.6)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd7cd40-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "MetricTemporalProperty",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "When not in M and when C the software shall within 3 secs satisfy P",
        "semantics": {
            "scope": {
                "type": "notin"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "C",
                    "P"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                12
            ],
            "regular_condition": "(C)",
            "qualifier_word": "when",
            "pre_condition": "(C)",
            "conditionTextRange": [
                14,
                23
            ],
            "component_name": "software",
            "componentTextRange": [
                25,
                36
            ],
            "duration": "3 secs",
            "timingTextRange": [
                44,
                56
            ],
            "post_condition": "(P)",
            "responseTextRange": [
                58,
                66
            ],
            "ft": "(G ((!Lin_<b><i>M</i></b>) | (Lin_<b><i>M</i></b> & (X ((F (Fin_<b><i>M</i></b> | LAST)) -> (((Fin_<b><i>M</i></b> | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(Fin_<b><i>M</i></b> | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))) & (!(Fin_<b><i>M</i></b> | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))))))))) & ((!<b><i>M</i></b>) -> ((F (Fin_<b><i>M</i></b> | LAST)) -> (((Fin_<b><i>M</i></b> | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(Fin_<b><i>M</i></b> | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))) & (!(Fin_<b><i>M</i></b> | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))))))",
            "pt": "(H ((LNin_<b><i>M</i></b> & (!FTP)) -> (Y (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) & FNin_<b><i>M</i></b>))))) & (((!LNin_<b><i>M</i></b>) S ((!LNin_<b><i>M</i></b>) & FNin_<b><i>M</i></b>)) -> (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) & FNin_<b><i>M</i></b>)))",
            "ftExpanded": "(G ((!(<b><i>M</i></b> & X (! <b><i>M</i></b>))) | ((<b><i>M</i></b> & X (! <b><i>M</i></b>)) & (X ((F (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)) -> (((((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))))))))) & ((!<b><i>M</i></b>) -> ((F (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)) -> (((((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))))))",
            "ptExpanded": "(H (((<b><i>M</i></b> & (Y ! <b><i>M</i></b>)) & (!(! Y TRUE))) -> (Y (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>)))))))) & (((!(<b><i>M</i></b> & (Y ! <b><i>M</i></b>))) S ((!(<b><i>M</i></b> & (Y ! <b><i>M</i></b>))) & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) -> (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))))",
            "component": "<b><i>software</i></b>",
            "CoCoSpecCode": "S( (((,,( ( ( (C) and (pre ( not (C)))) or ((C) and (( not M) and (FTP() or (pre ( M )))))) and ( not (P)), (H(((M and (pre (  not M ))) and ( not FTP())) => (pre (((,,( ( ( (C) and (pre ( not (C)))) or ((C) and (( not M) and (FTP() or (pre ( M )))))) and ( not (P)))) => (OTlore(3 secs-1, ((( not M) and (FTP() or (pre ( M )))) or (P)) ))) )",
            "diagramVariables": "M = <b><i>M</i></b>,  n = <b><i>3 secs</i></b>, Response = <b><i>(P)</i></b>.",
            "description": "We are working on formalizing this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
            "diagram": "Undefined svg."
        },
        "_id": "0fd81b60-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-004",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "",
        "fulltext": "If imageReceived NeuralNetwork shall within 2 seconds satisfy outputDistance & outputAngle",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "imageReceived",
                    "outputDistance",
                    "outputAngle"
                ],
                "modes": []
            },
            "regular_condition": "(imageReceived)",
            "qualifier_word": "if",
            "pre_condition": "(imageReceived)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "NeuralNetwork",
            "componentTextRange": [
                17,
                29
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                37,
                52
            ],
            "post_condition": "(outputDistance & outputAngle)",
            "responseTextRange": [
                54,
                89
            ],
            "ft": "((LAST V (((! <b><i>(imageReceived)</i></b>) & ((! LAST) & (X <b><i>(imageReceived)</i></b>))) -> (X ((F[<=<b><i>2</i></b>] <b><i>(outputDistance & outputAngle)</i></b>) | (F[<<b><i>2</i></b>] LAST))))) & (<b><i>(imageReceived)</i></b> -> ((F[<=<b><i>2</i></b>] <b><i>(outputDistance & outputAngle)</i></b>) | (F[<<b><i>2</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>2</i></b>] ((<b><i>(imageReceived)</i></b> & ((Y (! <b><i>(imageReceived)</i></b>)) | FTP)) & (! <b><i>(outputDistance & outputAngle)</i></b>))) -> (O[<<b><i>2</i></b>] (FTP | <b><i>(outputDistance & outputAngle)</i></b>))))",
            "ftExpanded": "((LAST V (((! <b><i>(imageReceived)</i></b>) & ((! LAST) & (X <b><i>(imageReceived)</i></b>))) -> (X ((F[<=<b><i>2</i></b>] <b><i>(outputDistance & outputAngle)</i></b>) | (F[<<b><i>2</i></b>] LAST))))) & (<b><i>(imageReceived)</i></b> -> ((F[<=<b><i>2</i></b>] <b><i>(outputDistance & outputAngle)</i></b>) | (F[<<b><i>2</i></b>] LAST))))",
            "ptExpanded": "(H ((O[=<b><i>2</i></b>] ((<b><i>(imageReceived)</i></b> & ((Y (! <b><i>(imageReceived)</i></b>)) | (! (Y TRUE)))) & (! <b><i>(outputDistance & outputAngle)</i></b>))) -> (O[<<b><i>2</i></b>] ((! (Y TRUE)) | <b><i>(outputDistance & outputAngle)</i></b>))))",
            "component": "<b><i>NeuralNetwork</i></b>",
            "CoCoSpecCode": "(H((OT(2,2,( ( (imageReceived) and ( ( Y ( not (imageReceived) ) ) or FTP ) ) and ( not (outputDistance and outputAngle) ) ))) => (OT(2-1,0,( FTP or (outputDistance and outputAngle) )))))",
            "diagramVariables": "TC = <b><i>(imageReceived)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(outputDistance & outputAngle)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(imageReceived)</i></b> is true and any point in the interval where <b><i>(imageReceived)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <=<b><i>2</i></b> from the trigger, except if the end of the interval occurs sooner.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg"
        },
        "_id": "0fd89090-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001F",
        "parent_reqid": "EUL-001",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_23 = SinPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_23",
                    "SinPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_23 = SinPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_23 = SinPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd8b7a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "test1",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "\"This is a requirement\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fd8deb0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-012",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from FAULT to TRANSITION when the autopilot is not requesting support (not request) and limits are not exceeded (not limits)",
        "fulltext": "FSM_Sensor shall  always  satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_fault_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                18,
                23
            ],
            "post_condition": "(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                26,
                117
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_fault_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Sensor</i></b>\" shall satisfy <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd905c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-009",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command transient changes in translational axial acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy airspeed_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "airspeed_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(airspeed_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((airspeed_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd92cd0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-010",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from NOMINAL to FAULT when limits are exceeded",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "limits",
                    "SENSTATE",
                    "sen_fault_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)",
            "responseTextRange": [
                24,
                100
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and limits ) => SENSTATE = sen_fault_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Sensor</i></b>\" shall satisfy <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd97af0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "RollAutopilot shall always satisfy ! autopilot_engaged => roll_actuator_command = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "roll_actuator_command"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(! autopilot_engaged => roll_actuator_command = 0.0)",
            "responseTextRange": [
                27,
                84
            ],
            "ft": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "pt": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ptExpanded": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((not autopilot_engaged => roll_actuator_command = 0.0)))",
            "diagramVariables": "Response = <b><i>(! autopilot_engaged => roll_actuator_command = 0.0)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(! autopilot_engaged => roll_actuator_command = 0.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fd9a200-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy (roll_angle < 6.0 & roll_angle > -6.0) => roll_hold_reference =0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                123
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0fd9f020-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "\"The Rotation Matrix Output, DCM321, of this Function Shall \rEqual a 3x3 Matrix Product of a 3x3 Euler 3 (Roll) Rotation Matrix times a 3x3\r Euler 2 (Pitch) Rotation Matrix times a 3x3 Euler 1 (Heading) Rotation Matrix.\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fd9f021-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The minimum value of the NN output, z, shall always be greater than or equal to -0.2, regardless of the input values",
        "fulltext": "NN shall always satisfy z >= -0.2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "z"
            ],
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z >= -0.2)",
            "responseTextRange": [
                16,
                32
            ],
            "ft": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "pt": "(H <b><i>(z >= -0.2)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "ptExpanded": "(H <b><i>(z >= -0.2)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z >= -0.2)))",
            "diagramVariables": "Response = <b><i>(z >= -0.2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fda3e40-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-008",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "\"Heading Hold shall become the active mode when the pilot \rselects the heading switch in the cockpit and deactivate when the switch is deselected.\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fda6550-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy abs_roll_angle < 33.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_angle < 33.0)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "pt": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_angle < 33.0)))",
            "diagramVariables": "Response = <b><i>(abs_roll_angle < 33.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roll_angle < 33.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdab370-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-013",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from TRANSITION to NOMINAL when the autopilot is requesting support (request) and the autopilot reports the correct active mode (mode)",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_transition_state & request & MODE) => SENSTATE = sen_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_transition_state",
                    "request",
                    "MODE",
                    "SENSTATE",
                    "sen_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_transition_state & request & MODE ) => SENSTATE = sen_nominal_state)",
            "responseTextRange": [
                24,
                113
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_transition_state and request and MODE ) => SENSTATE = sen_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_transition_state & request & MODE ) => SENSTATE = sen_nominal_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Sensor</i></b>\" shall satisfy <b><i>(( senstate = sen_transition_state & request & MODE ) => SENSTATE = sen_nominal_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdb0190-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "SWIM-001a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The SWIM Airspeed algorithm shall output the minimum AGCAS airspeed required to perform a 2g flyup as follows:\n\nAuto GCAS Minimum Vcas (knots) = \nSQRT{[2*Load Factor*Gross Weight]/[Air Density at sea level * \n\t\tCoefficient of Lift Max*Wing Area]} / 1.6891 (ft/s/knots)\nwhere\n\tLoad Factor = 2 gs\n\tGross weight of the aircraft\n\tAir Density at sea level = 0.0023769 slugs/ft^3\n\tCoefficient of Lift Max = 1.24 (CAT I) and 1.10 (CAT III)\n\tWing Area of the F-16 = 300 ft^2\nThus,\nIF CAT I, Auto GCAS Minimum Vcas (knots)  = 1.25921 * SQRT(Gross Weight)  + 10.0\nIF CAT III, Auto GCAS Minimum Vcas (knots)  = 1.33694 * SQRT(Gross Weight) + 10.0",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT1) =>  (CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT1",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                97
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdb4fb0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NLG-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - pre_yout) <= T * mag(Vt + Vv)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "pre_yout",
                    "T",
                    "Vt",
                    "Vv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))",
            "responseTextRange": [
                24,
                71
            ],
            "ft": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "pt": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))))",
            "diagramVariables": "Response = <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdb76c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from PULLUP to TRANSITION when the system is supported and sensor data is good",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                111
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdbc4e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NLG-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout * Xr > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xr"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout * Xr > 0)",
            "responseTextRange": [
                24,
                44
            ],
            "ft": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "pt": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout * Xr > 0)))",
            "diagramVariables": "Response = <b><i>(yout * Xr > 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout * Xr > 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdc1300-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G005",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy GoalSet = goalsetWithChargePos",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "GoalSet",
                    "goalsetWithChargePos"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(GoalSet = goalsetWithChargePos)",
            "responseTextRange": [
                44,
                81
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(GoalSet = goalsetWithChargePos)</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(GoalSet = goalsetWithChargePos)</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(GoalSet = goalsetWithChargePos)</i></b>) S ((! <b><i>(GoalSet = goalsetWithChargePos)</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(GoalSet = goalsetWithChargePos)</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(GoalSet = goalsetWithChargePos)</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(GoalSet = goalsetWithChargePos)</i></b>) S ((! <b><i>(GoalSet = goalsetWithChargePos)</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (GoalSet = goalsetWithChargePos)) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(GoalSet = goalsetWithChargePos)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0fdc8830-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "RollAutopilot shall always satisfy abs_aileron_cmd <= 15.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_aileron_cmd"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(abs_aileron_cmd <= 15.0)",
            "responseTextRange": [
                27,
                57
            ],
            "ft": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "pt": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((abs_aileron_cmd <= 15.0)))",
            "diagramVariables": "Response = <b><i>(abs_aileron_cmd <= 15.0)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs_aileron_cmd <= 15.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdcd650-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (! good & state = ap_nominal_state) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "good",
                    "state",
                    "ap_nominal_state",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                98
            ],
            "ft": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( not good and state = ap_nominal_state ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdcfd60-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-007v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good & ! standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                123
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdd4b80-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003b",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy abs(roll_angle) < 6.0 => roll_hold_reference = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs",
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                107
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0fdd7290-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TSM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor  shall  always  satisfy  (no_fail => (set_val = mid_value))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "no_fail",
                    "set_val",
                    "mid_value"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                29,
                34
            ],
            "post_condition": "(( no_fail => ( set_val = mid_value ) ))",
            "responseTextRange": [
                37,
                79
            ],
            "ft": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "pt": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( no_fail => ( set_val = mid_value ) ))))",
            "diagramVariables": "Response = <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fddc0b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "SWIM-001b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT3) => (CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0)) ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT3",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                96
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdde7c0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-010",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Height Regulator Shall not command transient changes in translational height acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy height_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "height_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(height_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                65
            ],
            "ft": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((height_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(height_command_acceleration <= 32.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(height_command_acceleration <= 32.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fde35e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001G",
        "parent_reqid": "EUL-001",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_31 = SinPhi * SinPsi + CosTheta *SinTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_31",
                    "SinPhi",
                    "SinPsi",
                    "CosTheta",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)",
            "responseTextRange": [
                19,
                83
            ],
            "ft": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fde8400-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The maximum value of NN output, z, shall always be less than or equal to 1.1, regardless of the input values",
        "fulltext": "NN shall always satisfy z <=1.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "z"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z <= 1.1)",
            "responseTextRange": [
                16,
                30
            ],
            "ft": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "pt": "(H <b><i>(z <= 1.1)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "ptExpanded": "(H <b><i>(z <= 1.1)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z <= 1.1)))",
            "diagramVariables": "Response = <b><i>(z <= 1.1)</i></b>.",
            "description": "Always, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(z <= 1.1)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdeab10-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "Testing after",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "after initialization mode AUTOPILOT  shall after 3 seconds satisfy xin > 0",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "xin"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                24
            ],
            "component_name": "AUTOPILOT",
            "componentTextRange": [
                26,
                34
            ],
            "duration": "3 seconds",
            "timingTextRange": [
                43,
                57
            ],
            "post_condition": "(xin > 0)",
            "responseTextRange": [
                59,
                73
            ],
            "ft": "((!Lin_<b><i>initialization</i></b>) U (Lin_<b><i>initialization</i></b> & (X ((!(F[<=<b><i>3 seconds</i></b>] (!(!<b><i>(xin > 0)</i></b>)))) & (F[<=<b><i>3 seconds</i></b>+1] <b><i>(xin > 0)</i></b>))))) | (G (!Lin_<b><i>initialization</i></b>))",
            "pt": "Under construction.",
            "ftExpanded": "((!(<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>))) U ((<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>)) & (X ((!(F[<=<b><i>3 seconds</i></b>] (!(!<b><i>(xin > 0)</i></b>)))) & (F[<=<b><i>3 seconds</i></b>+1] <b><i>(xin > 0)</i></b>))))) | (G (!(<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>))))",
            "ptExpanded": "Under construction.",
            "component": "<b><i>AUTOPILOT</i></b>",
            "CoCoSpecCode": "Under construction.",
            "diagramVariables": "M = <b><i>initialization</i></b>,  n = <b><i>3 seconds</i></b>, Response = <b><i>(xin > 0)</i></b>.",
            "description": "After <b><i>3 seconds</i></b>, the component \"<b><i>AUTOPILOT</i></b>\" shall satisfy <b><i>(xin > 0)</i></b>. This is only enforced strictly after the first occurence of <b><i>initialization</i></b> (if <b><i>initialization</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_after_satisfaction.svg"
        },
        "_id": "0fded220-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-011v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                24,
                117
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Sensor</i></b>\" shall satisfy <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdf4750-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "SIM-001SP",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "After phase_1 the simulation shall always satisfy VelDiff < 5 feet per minute",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "VelDiff"
                ],
                "modes": [
                    "phase_1"
                ]
            },
            "scope_mode": "phase_1",
            "scopeTextRange": [
                0,
                12
            ],
            "component_name": "simulation",
            "componentTextRange": [
                14,
                27
            ],
            "timingTextRange": [
                35,
                40
            ],
            "post_condition": "(VelDiff < 5)",
            "responseTextRange": [
                42,
                60
            ],
            "ft": "((!Lin_<b><i>phase_1</i></b>) U (Lin_<b><i>phase_1</i></b> & (X (G <b><i>(VelDiff < 5)</i></b>)))) | (G (!Lin_<b><i>phase_1</i></b>))",
            "pt": "(O FLin_<b><i>phase_1</i></b>) -> (<b><i>(VelDiff < 5)</i></b> S (<b><i>(VelDiff < 5)</i></b> & FLin_<b><i>phase_1</i></b>))",
            "ftExpanded": "((!(<b><i>phase_1</i></b> & X (! <b><i>phase_1</i></b>))) U ((<b><i>phase_1</i></b> & X (! <b><i>phase_1</i></b>)) & (X (G <b><i>(VelDiff < 5)</i></b>)))) | (G (!(<b><i>phase_1</i></b> & X (! <b><i>phase_1</i></b>))))",
            "ptExpanded": "(O (((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)) & Y (H (! ((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)))))) -> (<b><i>(VelDiff < 5)</i></b> S (<b><i>(VelDiff < 5)</i></b> & (((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)) & Y (H (! ((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)))))))",
            "component": "<b><i>simulation</i></b>",
            "CoCoSpecCode": "(O((( not phase_1) and (pre ( phase_1 ))) and pre (H( not (( not phase_1) and (pre ( phase_1 ))))))) => (S( ((VelDiff < 5) and ((( not phase_1) and (pre ( phase_1 ))) and pre (H( not (( not phase_1) and (pre ( phase_1 ))))))), (VelDiff < 5) ))",
            "diagramVariables": "M = <b><i>phase_1</i></b>, Response = <b><i>(VelDiff < 5)</i></b>.",
            "description": "Always, the component \"<b><i>simulation</i></b>\" shall satisfy <b><i>(VelDiff < 5)</i></b>. This is only enforced strictly after the first occurence of <b><i>phase_1</i></b> (if <b><i>phase_1</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "0fdf6e60-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "KAN-001",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "In reality we want to check it within 1-sigma which is 70% of the time (?)",
        "fulltext": "when GPSavailable the AVAprototype shall always satisfy difference(measured, actual) <1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "GPSavailable",
                    "difference",
                    "measured",
                    "actual"
                ],
                "modes": []
            },
            "regular_condition": "(GPSavailable)",
            "qualifier_word": "when",
            "pre_condition": "(GPSavailable)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "AVAprototype",
            "componentTextRange": [
                18,
                33
            ],
            "timingTextRange": [
                41,
                46
            ],
            "post_condition": "(difference ( measured , actual ) < 1)",
            "responseTextRange": [
                48,
                86
            ],
            "ft": "((LAST V (((! <b><i>(GPSavailable)</i></b>) & ((! LAST) & (X <b><i>(GPSavailable)</i></b>))) -> (X (LAST V <b><i>(difference ( measured , actual ) < 1)</i></b>)))) & (<b><i>(GPSavailable)</i></b> -> (LAST V <b><i>(difference ( measured , actual ) < 1)</i></b>)))",
            "pt": "(H ((H (! <b><i>(GPSavailable)</i></b>)) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & (<b><i>(GPSavailable)</i></b> & ((Y (! <b><i>(GPSavailable)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(GPSavailable)</i></b>) & ((! LAST) & (X <b><i>(GPSavailable)</i></b>))) -> (X (LAST V <b><i>(difference ( measured , actual ) < 1)</i></b>)))) & (<b><i>(GPSavailable)</i></b> -> (LAST V <b><i>(difference ( measured , actual ) < 1)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(GPSavailable)</i></b>)) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & (<b><i>(GPSavailable)</i></b> & ((Y (! <b><i>(GPSavailable)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>AVAprototype</i></b>",
            "CoCoSpecCode": "(H((H( not (GPSavailable))) or (SI( ((GPSavailable) and ((pre ( not (GPSavailable))) or FTP)), (difference ( measured , actual ) < 1) ))))",
            "diagramVariables": "TC = <b><i>(GPSavailable)</i></b>, Response = <b><i>(difference ( measured , actual ) < 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(GPSavailable)</i></b> is true and any point in the interval where <b><i>(GPSavailable)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "0fdf9570-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Pitch Regulator shall not command angular pitch accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_pitch_output_exceeding_50 <= 100 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_pitch_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_pitch_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                68
            ],
            "ft": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_pitch_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fdfbc80-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "KAN-2a",
        "parent_reqid": "KAN-002",
        "project": "TestRequirements",
        "rationale": "This is required to achieve the desired orbit of the payloads. It should happen within 1-sigma (70% of time)?",
        "fulltext": "After BoostCompleted the AvaPrototype shall always satisfy flightPathAngleDiff < 0.5",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flightPathAngleDiff"
                ],
                "modes": [
                    "BoostCompleted"
                ]
            },
            "scope_mode": "BoostCompleted",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "AvaPrototype",
            "componentTextRange": [
                21,
                36
            ],
            "timingTextRange": [
                44,
                49
            ],
            "post_condition": "(flightPathAngleDiff < 0.5)",
            "responseTextRange": [
                51,
                83
            ],
            "ft": "(((! FLin_<b><i>BoostCompleted</i></b>) U (FLin_<b><i>BoostCompleted</i></b> & (X (LAST V <b><i>(flightPathAngleDiff < 0.5)</i></b>)))) | (LAST V (! FLin_<b><i>BoostCompleted</i></b>)))",
            "pt": "((O FLin_<b><i>BoostCompleted</i></b>) -> (<b><i>(flightPathAngleDiff < 0.5)</i></b> S (<b><i>(flightPathAngleDiff < 0.5)</i></b> & FLin_<b><i>BoostCompleted</i></b>)))",
            "ftExpanded": "(((! ((<b><i>BoostCompleted</i></b> & (! LAST)) & (X (! <b><i>BoostCompleted</i></b>)))) U (((<b><i>BoostCompleted</i></b> & (! LAST)) & (X (! <b><i>BoostCompleted</i></b>))) & (X (LAST V <b><i>(flightPathAngleDiff < 0.5)</i></b>)))) | (LAST V (! ((<b><i>BoostCompleted</i></b> & (! LAST)) & (X (! <b><i>BoostCompleted</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & (Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>))))))) -> (<b><i>(flightPathAngleDiff < 0.5)</i></b> S (<b><i>(flightPathAngleDiff < 0.5)</i></b> & (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & (Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))))))",
            "component": "<b><i>AvaPrototype</i></b>",
            "CoCoSpecCode": "((O((( not BoostCompleted) and (pre (BoostCompleted))) and pre (H( not (( not BoostCompleted) and (pre (BoostCompleted))))))) => (SI( ((( not BoostCompleted) and (pre (BoostCompleted))) and pre (H( not (( not BoostCompleted) and (pre (BoostCompleted)))))), (flightPathAngleDiff < 0.5) )))",
            "diagramVariables": "M = <b><i>BoostCompleted</i></b>, Response = <b><i>(flightPathAngleDiff < 0.5)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>BoostCompleted</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "0fe00aa0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NLG-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout(3) - Xtarg(3) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xtarg"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout ( 3 ) - Xtarg ( 3 ) = 0)",
            "responseTextRange": [
                24,
                53
            ],
            "ft": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "pt": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout ( 3 ) - Xtarg ( 3 ) = 0)))",
            "diagramVariables": "Response = <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe031b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-001v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).",
        "fulltext": "FSM  shall  always  satisfy (limits & !standby & !apfail & supported) => pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "limits",
                    "standby",
                    "apfail",
                    "supported",
                    "pullup"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( limits & ! standby & ! apfail & supported ) => pullup)",
            "responseTextRange": [
                20,
                78
            ],
            "ft": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "pt": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ptExpanded": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( limits and not standby and not apfail and supported ) => pullup)))",
            "diagramVariables": "Response = <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
            "description": "Always, the component \"<b><i>FSM</i></b>\" shall satisfy <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe07fd0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-008A",
        "parent_reqid": "AP-008",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy hdg_mode_is_active",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_mode_is_active"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(hdg_mode_is_active)",
            "responseTextRange": [
                44,
                69
            ],
            "ft": "(LAST V (<b><i>hdg_hold</i></b> -> <b><i>(hdg_mode_is_active)</i></b>))",
            "pt": "(H (<b><i>hdg_hold</i></b> -> <b><i>(hdg_mode_is_active)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>hdg_hold</i></b> -> <b><i>(hdg_mode_is_active)</i></b>))",
            "ptExpanded": "(H (<b><i>hdg_hold</i></b> -> <b><i>(hdg_mode_is_active)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H(hdg_hold => (hdg_mode_is_active)))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(hdg_mode_is_active)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>hdg_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fe0a6e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001E",
        "parent_reqid": "EUL-001",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_22 = (CosPhi * CosPsi + SinPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_22",
                    "CosPhi",
                    "CosPsi",
                    "SinPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                84
            ],
            "ft": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe0f500-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "\"The Body Vector Output, Vb, of this Function Shall Equal a\r3x1 Vector Product of the 3x3 Rotation Matrix Output, DCM321, times the Input\r Inertial Vector, Vi.\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fe11c10-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TSM-003a",
        "parent_reqid": "TSM-003",
        "project": "LM_requirements",
        "rationale": "In the single fail state, a good channel average of the remaining two good branches shall be used to determine the selected value (1)",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =1 => set_val = 0.5 * (ia +ib)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ib"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 1 => set_val = 0.5 * ( ia + ib ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "pt": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 1 => set_val = 0.5 * ( ia + ib ))))",
            "diagramVariables": "Response = <b><i>(FC = 1 => set_val = 0.5 * ( ia + ib ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe14320-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "KAN-2b",
        "parent_reqid": "KAN-002",
        "project": "TestRequirements",
        "rationale": "This is the goal (and Kandy2a is what is the least expected)",
        "fulltext": "After BoostCompleted the AvaPrototype shall always satisfy flightPathAngleDiff < 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flightPathAngleDiff"
                ],
                "modes": [
                    "BoostCompleted"
                ]
            },
            "scope_mode": "BoostCompleted",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "AvaPrototype",
            "componentTextRange": [
                21,
                36
            ],
            "timingTextRange": [
                44,
                49
            ],
            "post_condition": "(flightPathAngleDiff < 0.1)",
            "responseTextRange": [
                51,
                83
            ],
            "ft": "(((! FLin_<b><i>BoostCompleted</i></b>) U (FLin_<b><i>BoostCompleted</i></b> & (X (LAST V <b><i>(flightPathAngleDiff < 0.1)</i></b>)))) | (LAST V (! FLin_<b><i>BoostCompleted</i></b>)))",
            "pt": "((O FLin_<b><i>BoostCompleted</i></b>) -> (<b><i>(flightPathAngleDiff < 0.1)</i></b> S (<b><i>(flightPathAngleDiff < 0.1)</i></b> & FLin_<b><i>BoostCompleted</i></b>)))",
            "ftExpanded": "(((! ((<b><i>BoostCompleted</i></b> & (! LAST)) & (X (! <b><i>BoostCompleted</i></b>)))) U (((<b><i>BoostCompleted</i></b> & (! LAST)) & (X (! <b><i>BoostCompleted</i></b>))) & (X (LAST V <b><i>(flightPathAngleDiff < 0.1)</i></b>)))) | (LAST V (! ((<b><i>BoostCompleted</i></b> & (! LAST)) & (X (! <b><i>BoostCompleted</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & (Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>))))))) -> (<b><i>(flightPathAngleDiff < 0.1)</i></b> S (<b><i>(flightPathAngleDiff < 0.1)</i></b> & (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & (Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))))))",
            "component": "<b><i>AvaPrototype</i></b>",
            "CoCoSpecCode": "((O((( not BoostCompleted) and (pre (BoostCompleted))) and pre (H( not (( not BoostCompleted) and (pre (BoostCompleted))))))) => (SI( ((( not BoostCompleted) and (pre (BoostCompleted))) and pre (H( not (( not BoostCompleted) and (pre (BoostCompleted)))))), (flightPathAngleDiff < 0.1) )))",
            "diagramVariables": "M = <b><i>BoostCompleted</i></b>, Response = <b><i>(flightPathAngleDiff < 0.1)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>BoostCompleted</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "0fe1b850-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REG-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Yaw Regulator Shall not command angular yaw accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_yaw_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_yaw_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_yaw_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                66
            ],
            "ft": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_yaw_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe1df60-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-002B",
        "parent_reqid": "EUL-002",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_21",
                    "VI_1",
                    "R_21",
                    "VI_2",
                    "R_22",
                    "VI_3",
                    "R_23"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "pt": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)))",
            "diagramVariables": "Response = <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe22d80-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "NN-001",
        "parent_reqid": "",
        "project": "DeepTaxi",
        "rationale": "Pre Condition on the Neural Network component",
        "fulltext": "NeuralNetwork shall always satisfy image_pixel_values <= 255 & image_pixel_values >=0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "image_pixel_values"
                ],
                "modes": []
            },
            "component_name": "NeuralNetwork",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(image_pixel_values <= 255 & image_pixel_values >= 0)",
            "responseTextRange": [
                27,
                84
            ],
            "ft": "(LAST V <b><i>(image_pixel_values <= 255 & image_pixel_values >= 0)</i></b>)",
            "pt": "(H <b><i>(image_pixel_values <= 255 & image_pixel_values >= 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(image_pixel_values <= 255 & image_pixel_values >= 0)</i></b>)",
            "ptExpanded": "(H <b><i>(image_pixel_values <= 255 & image_pixel_values >= 0)</i></b>)",
            "component": "<b><i>NeuralNetwork</i></b>",
            "CoCoSpecCode": "(H((image_pixel_values <= 255 and image_pixel_values >= 0)))",
            "diagramVariables": "Response = <b><i>(image_pixel_values <= 255 & image_pixel_values >= 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe25490-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-008B",
        "parent_reqid": "AP-008",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy roll_cmd = hdg_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "hdg_hold_mode_cmd"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(roll_cmd = hdg_hold_mode_cmd)",
            "responseTextRange": [
                44,
                79
            ],
            "ft": "(LAST V (<b><i>hdg_hold</i></b> -> <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>))",
            "pt": "(H (<b><i>hdg_hold</i></b> -> <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>hdg_hold</i></b> -> <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>))",
            "ptExpanded": "(H (<b><i>hdg_hold</i></b> -> <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H(hdg_hold => (roll_cmd = hdg_hold_mode_cmd)))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>hdg_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0fe2a2b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The roll hold reference shall be set to 30 degrees in the same direction as the actual roll angle if the actual roll angle is greater than 30 degrees at the time of roll hold engagement.",
        "fulltext": "in roll_hold  mode RollAutopilot shall immediately satisfy abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign(roll_angle)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle",
                    "roll_hold_reference",
                    "sign",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                17
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                19,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))",
            "responseTextRange": [
                51,
                129
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0fe2f0d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001B",
        "parent_reqid": "EUL-001",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_12 = CosTheta * SinPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_12",
                    "CosTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_12 = CosTheta * SinPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_12 = CosTheta * SinPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe2f0d1-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "EUL-001H",
        "parent_reqid": "EUL-001",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_32 = (- SinPhi * CosPsi) + (CosPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_32",
                    "SinPhi",
                    "CosPsi",
                    "CosPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                88
            ],
            "ft": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe317e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "FSM-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from MANEUVER to STANDBY when the pilot is in control (standby) and sensor data is good",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & standby & good) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "standby",
                    "good",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                106
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and standby and good ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fe33ef0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-R1",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "the sw shall always satisfy if occurred(7,persisted(2,fault)) then lightOn",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "occurred",
                    "persisted",
                    "fault",
                    "lightOn"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                18
            ],
            "post_condition": "(occurred ( 7 , persisted ( 2 , fault ) ) => lightOn)",
            "responseTextRange": [
                20,
                73
            ],
            "diagramVariables": "Response = <b><i>(occurred ( 7 , persisted ( 2 , fault ) ) => lightOn)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "post_condition_unexp_pt": "((((! FTP) S ((H[<=2] fault) & (H[<2] (! FTP)))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! FTP))))) -> lightOn)",
            "post_condition_unexp_ft": "(occurred(7,persisted(2,fault)) -> lightOn)",
            "post_condition_SMV_pt": "((((! (!(Y TRUE))) S ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! (!(Y TRUE))))))) -> lightOn)",
            "post_condition_SMV_ft": "(occurred(7,persisted(2,fault)) -> lightOn)",
            "post_condition_coco": "(((S( ((HT(2,0,fault)) and (HT(1,0,( not FTP)))), ( not FTP) )) and (OT(7,0,((HT(2,0,fault)) and (HT(1,0,( not FTP))))))) => lightOn)",
            "ft": "(LAST V <b><i>(occurred(7,persisted(2,fault)) -> lightOn)</i></b>)",
            "pt": "(H <b><i>((((! FTP) S ((H[<=2] fault) & (H[<2] (! FTP)))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! FTP))))) -> lightOn)</i></b>)",
            "ptExpanded": "(H ((((! (!(Y TRUE))) S ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! (!(Y TRUE))))))) -> lightOn))",
            "ftExpanded": "(LAST V (occurred(7,persisted(2,fault)) -> lightOn))",
            "CoCoSpecCode": "(H((((S( ((HT(2,0,fault)) and (HT(1,0,( not FTP)))), ( not FTP) )) and (OT(7,0,((HT(2,0,fault)) and (HT(1,0,( not FTP))))))) => lightOn)))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0fe3b420-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-COND-UNLESS-WHEN",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "unless p and when q, the sw shall  satisfy r",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "regular_condition": "(!(p) & (q))",
            "qualifier_word": "when",
            "pre_condition": "(q)",
            "component_name": "sw",
            "post_condition": "r",
            "ltlTemplate": "G ($regular_condition$ -> $post_condition$)",
            "ltlFormula": "G (<b><i>(!(p) & (q))</i></b> -> <b><i>r</i></b>)",
            "ltlDescription": "If the condition <b><i>(!(p) & (q))</i></b> holds,  component <b><i>sw</i></b> shall  satisfy <b><i>r</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "unless p and when q",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy r"
        },
        "_id": "0fe40240-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TEMP-COND-ELAPSED",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in mode M if occurred(5,P) & persisted(4,!P) the sw shall within 3 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "occurred",
                    "P",
                    "persisted",
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                8
            ],
            "qualifier_word": "if",
            "pre_condition": "(occurred ( 5 , P ) & persisted ( 4 , ! P ))",
            "regular_condition": "((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))",
            "conditionTextRange": [
                10,
                43
            ],
            "component_name": "sw",
            "componentTextRange": [
                45,
                50
            ],
            "duration": [
                "3"
            ],
            "timingTextRange": [
                58,
                71
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                73,
                81
            ],
            "diagramVariables": "M = <b><i>M</i></b>, TC = <b><i>(occurred ( 5 , P ) & persisted ( 4 , ! P ))</i></b>,  n = <b><i>3</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(occurred ( 5 , P ) & persisted ( 4 , ! P ))</i></b> is true and any point in the interval where <b><i>(occurred ( 5 , P ) & persisted ( 4 , ! P ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3</i></b>). If the interval ends sooner than trigger+<b><i>3</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_within_satisfaction.svg",
            "regular_condition_coco": "(((S( P, ( not ($scope_mode$ and (( not (pre ( true ))) or (pre ( not $scope_mode$))))) )) and (OT(5,0,P))) and ((HT(4,0,( ! P ))) and (HT(3,0,( ! ( $scope_mode$ & ( ( ! ( Y TRUE ) ) | ( Y ( ! $scope_mode$ ) ) ) ) )))))",
            "ft": "((LAST V ((! (Fin_<b><i>M</i></b> & (! LAST))) | (X (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b>) & ((! LAST) & ((X <b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_<b><i>M</i></b> | LAST)))) & (! (Lin_$scope_mode$ | LAST))))) & (<b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_$scope_mode$ | LAST)))))))) & ($scope_mode$ -> (((Lin_$scope_mode$ | LAST) V (((! <b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b>) & ((! LAST) & ((X <b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b>) & (! (Lin_$scope_mode$ | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_$scope_mode$ | LAST)))) & (! (Lin_$scope_mode$ | LAST))))) & (<b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (Lin_$scope_mode$ | LAST)))))))",
            "pt": "((H ((Lin_<b><i>M</i></b> & (! FTP)) -> (Y (((O[=<b><i>3</i></b>] ((<b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b> & ((Y (! <b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b>)) | Fin_<b><i>M</i></b>)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_<b><i>M</i></b> | <b><i>(R)</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b> & ((Y (! <b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b>)) | Fin_$scope_mode$)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_$scope_mode$ | <b><i>(R)</i></b>))) & Fin_$scope_mode$))))) & (((! Lin_$scope_mode$) S ((! Lin_$scope_mode$) & Fin_$scope_mode$)) -> (((O[=<b><i>3</i></b>] ((<b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b> & ((Y (! <b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b>)) | Fin_$scope_mode$)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_$scope_mode$ | <b><i>(R)</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b> & ((Y (! <b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b>)) | Fin_$scope_mode$)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (Fin_$scope_mode$ | <b><i>(R)</i></b>))) & Fin_$scope_mode$))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) & (! LAST))) | (X (((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (((! <b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b>) & ((! LAST) & ((X <b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) & (<b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! $scope_mode$))) | LAST)))))))) & ($scope_mode$ -> ((((($scope_mode$ & (! LAST)) & (X (! $scope_mode$))) | LAST) V (((! <b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b>) & ((! LAST) & ((X <b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b>) & (! ((($scope_mode$ & (! LAST)) & (X (! $scope_mode$))) | LAST))))) -> ((X ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] ((($scope_mode$ & (! LAST)) & (X (! $scope_mode$))) | LAST)))) & (! ((($scope_mode$ & (! LAST)) & (X (! $scope_mode$))) | LAST))))) & (<b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>3</i></b>] ((($scope_mode$ & (! LAST)) & (X (! $scope_mode$))) | LAST)))))))",
            "ptExpanded": "((H ((((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y TRUE)) -> (Y (((O[=<b><i>3</i></b>] ((<b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b> & ((Y (! <b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(R)</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b> & ((Y (! <b><i>((((! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! (<b><i>M</i></b> & ((!(Y TRUE)) | (Y (!<b><i>M</i></b>))))))))</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] ((<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))) | <b><i>(R)</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))) & (((! ((! $scope_mode$) & (Y $scope_mode$))) S ((! ((! $scope_mode$) & (Y $scope_mode$))) & ($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$)))))) -> (((O[=<b><i>3</i></b>] ((<b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b> & ((Y (! <b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b>)) | ($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$)))))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$)))) | <b><i>(R)</i></b>))) S (((O[=<b><i>3</i></b>] ((<b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b> & ((Y (! <b><i>((((! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))) S P) & (O[<=5] P)) & ((H[<=4] (! P)) & (H[<4] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))</i></b>)) | ($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$)))))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>3</i></b>] (($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$)))) | <b><i>(R)</i></b>))) & ($scope_mode$ & ((! (Y TRUE)) | (Y (! $scope_mode$))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((( not M) and (pre (M))) and ( not FTP)) => (pre (SI( (M and (FTP or (pre ( not M)))), ((OT(3,3,( ( (((S( P, ( not (M and (( not (pre ( true ))) or (pre ( not M))))) )) and (OT(5,0,P))) and ((HT(4,0,( ! P ))) and (HT(3,0,( ! ( M & ( ( ! ( Y TRUE ) ) | ( Y ( ! M ) ) ) ) ))))) & ( ( Y ( ! (((S( P, ( not (M and (( not (pre ( true ))) or (pre ( not M))))) )) and (OT(5,0,P))) and ((HT(4,0,( ! P ))) and (HT(3,0,( ! ( M & ( ( ! ( Y TRUE ) ) | ( Y ( ! M ) ) ) ) ))))) ) ) | ( M & ( FTP | ( Y ! M ) ) ) ) ) & ( ! (R) ) ))) => (OT(3-1,0,( ( M & ( FTP | ( Y ! M ) ) ) | (R) )))) ))))) and ((SI( (M and (FTP or (pre ( not M)))), ( not (( not $scope_mode$) and (pre ($scope_mode$)))) )) => (SI( ($scope_mode$ and (FTP or (pre ( not $scope_mode$)))), ((OT(3,3,( ( (((S( P, ( not ($scope_mode$ and (( not (pre ( true ))) or (pre ( not $scope_mode$))))) )) and (OT(5,0,P))) and ((HT(4,0,( ! P ))) and (HT(3,0,( ! ( $scope_mode$ & ( ( ! ( Y TRUE ) ) | ( Y ( ! $scope_mode$ ) ) ) ) ))))) & ( ( Y ( ! (((S( P, ( not ($scope_mode$ and (( not (pre ( true ))) or (pre ( not $scope_mode$))))) )) and (OT(5,0,P))) and ((HT(4,0,( ! P ))) and (HT(3,0,( ! ( $scope_mode$ & ( ( ! ( Y TRUE ) ) | ( Y ( ! $scope_mode$ ) ) ) ) ))))) ) ) | ( $scope_mode$ & ( FTP | ( Y ! $scope_mode$ ) ) ) ) ) & ( ! (R) ) ))) => (OT(3-1,0,( ( $scope_mode$ & ( FTP | ( Y ! $scope_mode$ ) ) ) | (R) )))) ))))"
        },
        "_id": "0fe42950-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-WITHIN-0",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "the sw shall within 0 ticks satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "r"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "duration": [
                "0"
            ],
            "timingTextRange": [
                13,
                26
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                28,
                36
            ],
            "ft": "((F[<=<b><i>0</i></b>] <b><i>(r)</i></b>) | (F[<<b><i>0</i></b>] LAST))",
            "pt": "(H ((H (! <b><i>(r)</i></b>)) -> (O[<<b><i>0</i></b>] FTP)))",
            "ftExpanded": "((F[<=<b><i>0</i></b>] <b><i>(r)</i></b>) | (F[<<b><i>0</i></b>] LAST))",
            "ptExpanded": "(H ((H (! <b><i>(r)</i></b>)) -> (O[<<b><i>0</i></b>] (! (Y TRUE)))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((H( not (r))) => (OT(0-1,0,FTP))))",
            "diagramVariables": " n = <b><i>0</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>0</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>0</i></b>). If the interval ends sooner than trigger+<b><i>0</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg"
        },
        "_id": "0fe47770-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-UNLESS-MODE",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "unless in M mode, the sw shall  satisfy P",
        "semantics": {
            "scope": {
                "type": "notin"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "M",
            "component_name": "sw",
            "post_condition": "P",
            "ltlTemplate": "G ((!$scope_mode$) -> $post_condition$)",
            "ltlFormula": "G ((!<b><i>M</i></b>) -> <b><i>P</i></b>)",
            "ltlDescription": "Component <b><i>sw</i></b> shall  satisfy <b><i>P</i></b>. \nSCOPE"
        },
        "input": {
            "scopeField": "unless in M mode",
            "conditionsField": "",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy P"
        },
        "_id": "0fe49e80-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-NEW-REQT",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in M mode when P the sw shall until Q satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P",
                    "Q",
                    "R"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                8
            ],
            "regular_condition": "(P)",
            "qualifier_word": "when",
            "pre_condition": "(P)",
            "conditionTextRange": [
                10,
                15
            ],
            "component_name": "sw",
            "componentTextRange": [
                17,
                22
            ],
            "stop_condition": "(Q)",
            "timingTextRange": [
                30,
                36
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                38,
                46
            ],
            "ft": "((LAST V ((! (Fin_<b><i>M</i></b> & (! LAST))) | (X (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(P)</i></b>) & ((! LAST) & ((X <b><i>(P)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((! (((! <b><i>(Q)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))) U ((! <b><i>(R)</i></b>) & (! <b><i>(Q)</i></b>)))) | (((<b><i>(R)</i></b> & (Lin_<b><i>M</i></b> | LAST)) | (Lin_<b><i>M</i></b> | LAST)) V <b><i>(R)</i></b>))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(P)</i></b> -> ((! (((! <b><i>(Q)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))) U ((! <b><i>(R)</i></b>) & (! <b><i>(Q)</i></b>)))) | (((<b><i>(R)</i></b> & (Lin_<b><i>M</i></b> | LAST)) | (Lin_<b><i>M</i></b> | LAST)) V <b><i>(R)</i></b>))))))) & (<b><i>M</i></b> -> (((Lin_<b><i>M</i></b> | LAST) V (((! <b><i>(P)</i></b>) & ((! LAST) & ((X <b><i>(P)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))))) -> ((X ((! (((! <b><i>(Q)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))) U ((! <b><i>(R)</i></b>) & (! <b><i>(Q)</i></b>)))) | (((<b><i>(R)</i></b> & (Lin_<b><i>M</i></b> | LAST)) | (Lin_<b><i>M</i></b> | LAST)) V <b><i>(R)</i></b>))) & (! (Lin_<b><i>M</i></b> | LAST))))) & (<b><i>(P)</i></b> -> ((! (((! <b><i>(Q)</i></b>) & (! (Lin_<b><i>M</i></b> | LAST))) U ((! <b><i>(R)</i></b>) & (! <b><i>(Q)</i></b>)))) | (((<b><i>(R)</i></b> & (Lin_<b><i>M</i></b> | LAST)) | (Lin_<b><i>M</i></b> | LAST)) V <b><i>(R)</i></b>))))))",
            "pt": "((H ((Lin_<b><i>M</i></b> & (! FTP)) -> (Y ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & Fin_<b><i>M</i></b>)) | (((! <b><i>(Q)</i></b>) S ((! <b><i>(Q)</i></b>) & (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | Fin_<b><i>M</i></b>)))) -> <b><i>(R)</i></b>)) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & Fin_<b><i>M</i></b>)) | (((! <b><i>(Q)</i></b>) S ((! <b><i>(Q)</i></b>) & (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | Fin_<b><i>M</i></b>)))) -> <b><i>(R)</i></b>)) & Fin_<b><i>M</i></b>))))) & (((! Lin_<b><i>M</i></b>) S ((! Lin_<b><i>M</i></b>) & Fin_<b><i>M</i></b>)) -> ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & Fin_<b><i>M</i></b>)) | (((! <b><i>(Q)</i></b>) S ((! <b><i>(Q)</i></b>) & (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | Fin_<b><i>M</i></b>)))) -> <b><i>(R)</i></b>)) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & Fin_<b><i>M</i></b>)) | (((! <b><i>(Q)</i></b>) S ((! <b><i>(Q)</i></b>) & (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | Fin_<b><i>M</i></b>)))) -> <b><i>(R)</i></b>)) & Fin_<b><i>M</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) & (! LAST))) | (X (((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (((! <b><i>(P)</i></b>) & ((! LAST) & ((X <b><i>(P)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) -> ((X ((! (((! <b><i>(Q)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))) U ((! <b><i>(R)</i></b>) & (! <b><i>(Q)</i></b>)))) | (((<b><i>(R)</i></b> & (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) | (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) V <b><i>(R)</i></b>))) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) & (<b><i>(P)</i></b> -> ((! (((! <b><i>(Q)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))) U ((! <b><i>(R)</i></b>) & (! <b><i>(Q)</i></b>)))) | (((<b><i>(R)</i></b> & (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) | (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) V <b><i>(R)</i></b>))))))) & (<b><i>M</i></b> -> (((((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST) V (((! <b><i>(P)</i></b>) & ((! LAST) & ((X <b><i>(P)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) -> ((X ((! (((! <b><i>(Q)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))) U ((! <b><i>(R)</i></b>) & (! <b><i>(Q)</i></b>)))) | (((<b><i>(R)</i></b> & (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) | (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) V <b><i>(R)</i></b>))) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))))) & (<b><i>(P)</i></b> -> ((! (((! <b><i>(Q)</i></b>) & (! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST))) U ((! <b><i>(R)</i></b>) & (! <b><i>(Q)</i></b>)))) | (((<b><i>(R)</i></b> & (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) | (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)) V <b><i>(R)</i></b>))))))",
            "ptExpanded": "((H ((((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) | (((! <b><i>(Q)</i></b>) S ((! <b><i>(Q)</i></b>) & (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))))) -> <b><i>(R)</i></b>)) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) | (((! <b><i>(Q)</i></b>) S ((! <b><i>(Q)</i></b>) & (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))))) -> <b><i>(R)</i></b>)) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))) & (((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) S ((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) | (((! <b><i>(Q)</i></b>) S ((! <b><i>(Q)</i></b>) & (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))))) -> <b><i>(R)</i></b>)) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) | (((! <b><i>(Q)</i></b>) S ((! <b><i>(Q)</i></b>) & (<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))))) -> <b><i>(R)</i></b>)) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((( not M) and (pre (M))) and ( not FTP)) => (pre (SI( (M and (FTP or (pre ( not M)))), ((SI( (M and (FTP or (pre ( not M)))), ( not (P)) )) or ((SI( ((P) and ((pre ( not (P))) or (M and (FTP or (pre ( not M)))))), ( not (Q)) )) => (R))) ))))) and ((SI( (M and (FTP or (pre ( not M)))), ( not (( not M) and (pre (M)))) )) => (SI( (M and (FTP or (pre ( not M)))), ((SI( (M and (FTP or (pre ( not M)))), ( not (P)) )) or ((SI( ((P) and ((pre ( not (P))) or (M and (FTP or (pre ( not M)))))), ( not (Q)) )) => (R))) ))))",
            "diagramVariables": "M = <b><i>M</i></b>, TC = <b><i>(P)</i></b>, SC = <b><i>(Q)</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(P)</i></b> is true and any point in the interval where <b><i>(P)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg"
        },
        "_id": "0fe4eca0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST_REQT_ID_WITH_A_COLON:1",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "the sw shall eventually satisfy quiescent",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "quiescent"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                22
            ],
            "post_condition": "(quiescent)",
            "responseTextRange": [
                24,
                40
            ],
            "ft": "((! LAST) U <b><i>(quiescent)</i></b>)",
            "pt": "(O <b><i>(quiescent)</i></b>)",
            "ftExpanded": "((! LAST) U <b><i>(quiescent)</i></b>)",
            "ptExpanded": "(O <b><i>(quiescent)</i></b>)",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(O((quiescent)))",
            "diagramVariables": "Response = <b><i>(quiescent)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg"
        },
        "_id": "0fe588e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TUSTIN-3",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "when EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1, tustin_integrator shall, after 10 seconds, satisfy 9.0 <= YOUT & YOUT <= 10.0",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "regular_condition": "EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1",
            "pre_conditions": [
                "EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1"
            ],
            "component_name": "tustin_integrator",
            "duration_lower": "10 seconds",
            "post_condition": "9.0 <= YOUT & YOUT <= 10.0",
            "ltlTemplate": "G ($regular_condition$ -> (|>[>=$duration_lower$] $post_condition$))",
            "ltlFormula": "G (<b><i>EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1</i></b> -> (|>[>=<b><i>10 seconds</i></b>] <b><i>9.0 <= YOUT & YOUT <= 10.0</i></b>))",
            "ltlDescription": "If the condition <b><i>EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1</i></b> holds,  component <b><i>tustin_integrator</i></b> shall , after <b><i>10 seconds</i></b>,  satisfy <b><i>9.0 <= YOUT & YOUT <= 10.0</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when EXEC_FREQ = 10.0 & XIN = 10.0 & T = 0.1",
            "componentField": "tustin_integrator",
            "timingField": "after 10 seconds",
            "responsesField": "satisfy 9.0 <= YOUT & YOUT <= 10.0"
        },
        "_id": "0fe5fe10-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-012",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint satisfy ! stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "stirring_motor"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! stirring_motor)",
            "responseTextRange": [
                67,
                90
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! stirring_motor)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! stirring_motor)</i></b>))))",
            "pt": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP))) -> (<b><i>(! stirring_motor)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! stirring_motor)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! stirring_motor)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! stirring_motor)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((emergency_button) and ((pre ( not (emergency_button))) or FTP))) => ((not stirring_motor) or FTP)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fe62520-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-005",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached occurs, the 60 sec timer shall start.",
        "fulltext": "when liquid_level_2 the liquid_mixer shall at the next timepoint satisfy timer_60sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "timer_60sec_start"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_2)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                63
            ],
            "post_condition": "(timer_60sec_start)",
            "responseTextRange": [
                65,
                89
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X (LAST | (X <b><i>(timer_60sec_start)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> (LAST | (X <b><i>(timer_60sec_start)</i></b>))))",
            "pt": "(H ((Y (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP))) -> (<b><i>(timer_60sec_start)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X (LAST | (X <b><i>(timer_60sec_start)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> (LAST | (X <b><i>(timer_60sec_start)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(timer_60sec_start)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP))) => ((timer_60sec_start) or FTP)))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, Response = <b><i>(timer_60sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fe64c30-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-002",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": " When liquid level 1 is reached occurs, the liquid mixer controller shall close valve 0",
        "fulltext": "when liquid_level_1 liquid_mixer shall at the next timepoint satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1",
                    "valve_0"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_1)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_1)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                31
            ],
            "timingTextRange": [
                39,
                59
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                61,
                77
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "pt": "(H ((Y (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | FTP))) -> (<b><i>(! valve_0)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_0)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((liquid_level_1) and ((pre ( not (liquid_level_1))) or FTP))) => ((not valve_0) or FTP)))",
            "diagramVariables": "TC = <b><i>(liquid_level_1)</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_1)</i></b> is true and any point in the interval where <b><i>(liquid_level_1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fe67340-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-010",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 1.",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint satisfy ! valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_1"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                67,
                83
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "pt": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP))) -> (<b><i>(! valve_1)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_1)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((emergency_button) and ((pre ( not (emergency_button))) or FTP))) => ((not valve_1) or FTP)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fe6c160-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-007",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When 60 second timer expires occurs, the 120 sec timer shall start.",
        "fulltext": "when timer_60sec_expire the liquid_mixer shall at the next timepoint satisfy timer_120sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "timer_60sec_expire",
                    "timer_120sec_start"
                ],
                "modes": []
            },
            "regular_condition": "(timer_60sec_expire)",
            "qualifier_word": "when",
            "pre_condition": "(timer_60sec_expire)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                24,
                39
            ],
            "timingTextRange": [
                47,
                67
            ],
            "post_condition": "(timer_120sec_start)",
            "responseTextRange": [
                69,
                94
            ],
            "ft": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X (LAST | (X <b><i>(timer_120sec_start)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> (LAST | (X <b><i>(timer_120sec_start)</i></b>))))",
            "pt": "(H ((Y (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | FTP))) -> (<b><i>(timer_120sec_start)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X (LAST | (X <b><i>(timer_120sec_start)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> (LAST | (X <b><i>(timer_120sec_start)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(timer_120sec_start)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((timer_60sec_expire) and ((pre ( not (timer_60sec_expire))) or FTP))) => ((timer_120sec_start) or FTP)))",
            "diagramVariables": "TC = <b><i>(timer_60sec_expire)</i></b>, Response = <b><i>(timer_120sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timer_60sec_expire)</i></b> is true and any point in the interval where <b><i>(timer_60sec_expire)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fe6e870-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-001",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "While not liquid level 1 is reached, when start button is pressed the liquid mixer components shall open valve 0",
        "fulltext": "when start_button liquid_mixer shall at the next timepoint satisfy if ! liquid_level_1 then valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "start_button",
                    "liquid_level_1",
                    "valve_0"
                ],
                "modes": []
            },
            "regular_condition": "(start_button)",
            "qualifier_word": "when",
            "pre_condition": "(start_button)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                18,
                29
            ],
            "timingTextRange": [
                37,
                57
            ],
            "post_condition": "(! liquid_level_1 => valve_0)",
            "responseTextRange": [
                59,
                98
            ],
            "ft": "((LAST V (((! <b><i>(start_button)</i></b>) & ((! LAST) & (X <b><i>(start_button)</i></b>))) -> (X (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))) & (<b><i>(start_button)</i></b> -> (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))",
            "pt": "(H ((Y (<b><i>(start_button)</i></b> & ((Y (! <b><i>(start_button)</i></b>)) | FTP))) -> (<b><i>(! liquid_level_1 -> valve_0)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(start_button)</i></b>) & ((! LAST) & (X <b><i>(start_button)</i></b>))) -> (X (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))) & (<b><i>(start_button)</i></b> -> (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(start_button)</i></b> & ((Y (! <b><i>(start_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! liquid_level_1 -> valve_0)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((start_button) and ((pre ( not (start_button))) or FTP))) => ((not liquid_level_1 => valve_0) or FTP)))",
            "diagramVariables": "TC = <b><i>(start_button)</i></b>, Response = <b><i>(! liquid_level_1 => valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(start_button)</i></b> is true and any point in the interval where <b><i>(start_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fe73690-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-006",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached happens, liquid mixer controller shall start stirring motor until 60 second timer expires or emergency button is pressed.",
        "fulltext": "when liquid_level_2, the liquid_mixer shall until (timer_60sec_expire | emergency_button) satisfy stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "timer_60sec_expire",
                    "emergency_button",
                    "stirring_motor"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_2)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                21,
                36
            ],
            "stop_condition": "(( timer_60sec_expire | emergency_button ))",
            "timingTextRange": [
                44,
                88
            ],
            "post_condition": "(stirring_motor)",
            "responseTextRange": [
                90,
                111
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "pt": "(H ((H (! <b><i>(liquid_level_2)</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP)))) -> <b><i>(stirring_motor)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(liquid_level_2)</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(stirring_motor)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (liquid_level_2))) or ((SI( ((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP)), ( not (( timer_60sec_expire or emergency_button ))) )) => (stirring_motor))))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, SC = <b><i>(( timer_60sec_expire | emergency_button ))</i></b>, Response = <b><i>(stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "0fe75da0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-003",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "While not liquid level 2 is reached, when liquid level 1 is reached the liquid mixer controller shall open valve 1 until emergency button is pressed.",
        "fulltext": "if liquid_level_1 the liquid_mixer shall until emergency_button satisfy if ! liquid_level_2 then valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1",
                    "emergency_button",
                    "liquid_level_2",
                    "valve_1"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_1)",
            "qualifier_word": "if",
            "pre_condition": "(liquid_level_1)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                18,
                33
            ],
            "stop_condition": "(emergency_button)",
            "timingTextRange": [
                41,
                62
            ],
            "post_condition": "(! liquid_level_2 => valve_1)",
            "responseTextRange": [
                64,
                103
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "pt": "(H ((H (! <b><i>(liquid_level_1)</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | FTP)))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(liquid_level_1)</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (liquid_level_1))) or ((SI( ((liquid_level_1) and ((pre ( not (liquid_level_1))) or FTP)), ( not (emergency_button)) )) => (not liquid_level_2 => valve_1))))",
            "diagramVariables": "TC = <b><i>(liquid_level_1)</i></b>, SC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! liquid_level_2 => valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_1)</i></b> is true and any point in the interval where <b><i>(liquid_level_1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "0fe7abc0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-004",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached occurs, the liquid mixer controller shall close valve 1.",
        "fulltext": "when liquid_level_2 the liquid_mixer shall at the next timepoint satisfy !valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "valve_1"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_2)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                63
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                65,
                80
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "pt": "(H ((Y (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP))) -> (<b><i>(! valve_1)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_1)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP))) => ((not valve_1) or FTP)))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fe7f9e0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-008",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When 60 second timer expires happens, the liquid mixer controller shall open valve 2 until 120 sec timer expires or emergency button is pressed.",
        "fulltext": "when timer_60sec_expire, the liquid_mixer shall until (timer_120sec_expire | emergency_button) satisfy valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "timer_60sec_expire",
                    "timer_120sec_expire",
                    "emergency_button",
                    "valve_2"
                ],
                "modes": []
            },
            "regular_condition": "(timer_60sec_expire)",
            "qualifier_word": "when",
            "pre_condition": "(timer_60sec_expire)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                25,
                40
            ],
            "stop_condition": "(( timer_120sec_expire | emergency_button ))",
            "timingTextRange": [
                48,
                93
            ],
            "post_condition": "(valve_2)",
            "responseTextRange": [
                95,
                109
            ],
            "ft": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "pt": "(H ((H (! <b><i>(timer_60sec_expire)</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | FTP)))) -> <b><i>(valve_2)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(timer_60sec_expire)</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(valve_2)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (timer_60sec_expire))) or ((SI( ((timer_60sec_expire) and ((pre ( not (timer_60sec_expire))) or FTP)), ( not (( timer_120sec_expire or emergency_button ))) )) => (valve_2))))",
            "diagramVariables": "TC = <b><i>(timer_60sec_expire)</i></b>, SC = <b><i>(( timer_120sec_expire | emergency_button ))</i></b>, Response = <b><i>(valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timer_60sec_expire)</i></b> is true and any point in the interval where <b><i>(timer_60sec_expire)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "0fe820f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-assumption1",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "",
        "fulltext": "the liquid_mixer shall immediately satisfy ! liquid_level_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1"
                ],
                "modes": []
            },
            "component_name": "liquid_mixer",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(! liquid_level_1)",
            "responseTextRange": [
                35,
                58
            ],
            "ft": "<b><i>(! liquid_level_1)</i></b>",
            "pt": "(H (FTP -> <b><i>(! liquid_level_1)</i></b>))",
            "ftExpanded": "<b><i>(! liquid_level_1)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(! liquid_level_1)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(FTP => (not liquid_level_1)))",
            "diagramVariables": "Response = <b><i>(! liquid_level_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "0fe86f10-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-009",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 0.",
        "fulltext": "when emergency_button, the liquid_mixer shall at the next timepoint satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_0"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                23,
                38
            ],
            "timingTextRange": [
                46,
                66
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                68,
                84
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "pt": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP))) -> (<b><i>(! valve_0)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_0)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((emergency_button) and ((pre ( not (emergency_button))) or FTP))) => ((not valve_0) or FTP)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fe8bd30-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-011",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 2.",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint satisfy ! valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_2"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! valve_2)",
            "responseTextRange": [
                67,
                83
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_2)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_2)</i></b>))))",
            "pt": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP))) -> (<b><i>(! valve_2)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_2)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_2)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_2)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((emergency_button) and ((pre ( not (emergency_button))) or FTP))) => ((not valve_2) or FTP)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fe8e440-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-IN-NULL-NULL-SATISFACTION",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "fulltext": "in cruise_control_mode, the display shall satisfy ccm_indicator_light = on",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "cruise_control_mode",
            "scopeTextRange": [
                0,
                22
            ],
            "component_name": "display",
            "componentTextRange": [
                24,
                34
            ],
            "post_condition": "ccm_indicator_light = on",
            "responseTextRange": [
                42,
                73
            ],
            "ft": "G ((!first_in_<b><i>cruise_control_mode</i></b>) | (first_in_<b><i>cruise_control_mode</i></b> & (X ((F last_in_<b><i>cruise_control_mode</i></b>) -> ((!last_in_<b><i>cruise_control_mode</i></b>) U <b><i>ccm_indicator_light = on</i></b>)))))",
            "pt": "H (last_in_<b><i>cruise_control_mode</i></b> -> (Y (!((!<b><i>ccm_indicator_light = on</i></b>) S ((!<b><i>ccm_indicator_light = on</i></b>) & first_in_<b><i>cruise_control_mode</i></b>)))))",
            "component": "<b><i>display</i></b>",
            "diagramVariables": "M = <b><i>cruise_control_mode</i></b>.",
            "description": "At some future point, the component \"<b><i>display</i></b>\" shall satisfy <b><i>ccm_indicator_light = on</i></b>. This is only enforced when \"<b><i>display</i></b>\" is in mode <b><i>cruise_control_mode</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "0fe98080-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TRIGGER-COND-IMM",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "Upon Trig when Cond the sw shall immediately satisfy Resp",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Trig",
                    "Cond",
                    "Resp"
                ],
                "modes": []
            },
            "regular_condition": "((Trig) & (Cond))",
            "qualifier_word": "when",
            "pre_condition": "(Cond)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "sw",
            "componentTextRange": [
                20,
                25
            ],
            "timingTextRange": [
                33,
                43
            ],
            "post_condition": "(Resp)",
            "responseTextRange": [
                45,
                56
            ],
            "ft": "((LAST V (((! <b><i>((Trig) & (Cond))</i></b>) & ((! LAST) & (X <b><i>((Trig) & (Cond))</i></b>))) -> (X <b><i>(Resp)</i></b>))) & (<b><i>((Trig) & (Cond))</i></b> -> <b><i>(Resp)</i></b>))",
            "pt": "(H ((<b><i>((Trig) & (Cond))</i></b> & ((Y (! <b><i>((Trig) & (Cond))</i></b>)) | FTP)) -> <b><i>(Resp)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>((Trig) & (Cond))</i></b>) & ((! LAST) & (X <b><i>((Trig) & (Cond))</i></b>))) -> (X <b><i>(Resp)</i></b>))) & (<b><i>((Trig) & (Cond))</i></b> -> <b><i>(Resp)</i></b>))",
            "ptExpanded": "(H ((<b><i>((Trig) & (Cond))</i></b> & ((Y (! <b><i>((Trig) & (Cond))</i></b>)) | (! (Y TRUE)))) -> <b><i>(Resp)</i></b>))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((((Trig) and (Cond)) and ((pre ( not ((Trig) and (Cond)))) or FTP)) => (Resp)))",
            "diagramVariables": "TC = <b><i>((Trig) & (Cond))</i></b>, Response = <b><i>(Resp)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((Trig) & (Cond))</i></b> is true and any point in the interval where <b><i>((Trig) & (Cond))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "0fe9cea0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-COND",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "\"only when p shall the sw satisfy q\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "0fe9f5b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-0",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "the sw shall after 0 ticks satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "r"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "duration": [
                "0"
            ],
            "timingTextRange": [
                13,
                25
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                27,
                35
            ],
            "ft": "(((G[<=<b><i>0</i></b>] (! <b><i>(r)</i></b>)) | (LAST V (! <b><i>(r)</i></b>))) & ((F[<=<b><i>0</i></b>+1] <b><i>(r)</i></b>) | (F[<<b><i>0</i></b>+1] LAST)))",
            "pt": "((H ((O[<=<b><i>0</i></b>] FTP) -> (! <b><i>(r)</i></b>))) & (H ((H (! <b><i>(r)</i></b>)) -> (O[<<b><i>0</i></b>+1] FTP))))",
            "ftExpanded": "(((G[<=<b><i>0</i></b>] (! <b><i>(r)</i></b>)) | (LAST V (! <b><i>(r)</i></b>))) & ((F[<=<b><i>0</i></b>+1] <b><i>(r)</i></b>) | (F[<<b><i>0</i></b>+1] LAST)))",
            "ptExpanded": "((H ((O[<=<b><i>0</i></b>] (! (Y TRUE))) -> (! <b><i>(r)</i></b>))) & (H ((H (! <b><i>(r)</i></b>)) -> (O[<<b><i>0</i></b>+1] (! (Y TRUE))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H((OT(0,0,FTP)) => ( not (r)))) and (H((H( not (r))) => (OT(0,0,FTP)))))",
            "diagramVariables": " n = <b><i>0</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>0</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>0</i></b>). Moreover, RES must hold at the point that is at distance <b><i>0</i></b>+1 from the trigger, that is, trigger+<b><i>0</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg"
        },
        "_id": "0fea43d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-UNLESS",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "Unless in M mode the sw shall always satisfy p",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "notin"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "sw",
            "componentTextRange": [
                17,
                22
            ],
            "timingTextRange": [
                30,
                35
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                37,
                45
            ],
            "ft": "(LAST V ((! <b><i>M</i></b>) -> <b><i>(p)</i></b>))",
            "pt": "(H ((! <b><i>M</i></b>) -> <b><i>(p)</i></b>))",
            "ftExpanded": "(LAST V ((! <b><i>M</i></b>) -> <b><i>(p)</i></b>))",
            "ptExpanded": "(H ((! <b><i>M</i></b>) -> <b><i>(p)</i></b>))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H(( not M) => (p)))",
            "diagramVariables": "M = <b><i>M</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> does NOT hold.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/notin_null_always_satisfaction.svg"
        },
        "_id": "0fea91f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-001",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when start_button the liquid_mixer shall at the next timepoint satisfy if ! liquid_level_1 then valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "start_button",
                    "liquid_level_1",
                    "valve_0"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "start_button",
            "regular_condition": "start_button",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                18,
                33
            ],
            "timingTextRange": [
                41,
                61
            ],
            "post_condition": "(! liquid_level_1 => valve_0)",
            "responseTextRange": [
                63,
                102
            ],
            "regular_condition_coco": "start_button",
            "ft": "((LAST V (((! <b><i>start_button</i></b>) & ((! LAST) & (X <b><i>start_button</i></b>))) -> (X (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))) & (<b><i>start_button</i></b> -> (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))",
            "pt": "(H ((Y (<b><i>start_button</i></b> & ((Y (! <b><i>start_button</i></b>)) | FTP))) -> (<b><i>(! liquid_level_1 -> valve_0)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>start_button</i></b>) & ((! LAST) & (X <b><i>start_button</i></b>))) -> (X (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))) & (<b><i>start_button</i></b> -> (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>start_button</i></b> & ((Y (! <b><i>start_button</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! liquid_level_1 -> valve_0)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre (start_button and ((pre ( not start_button)) or FTP))) => ((! liquid_level_1 => valve_0) or FTP)))",
            "diagramVariables": "TC = <b><i>start_button</i></b>, Response = <b><i>(! liquid_level_1 => valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>start_button</i></b> is true and any point in the interval where <b><i>start_button</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0feae010-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-IF-THEN",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "The sw shall  always  satisfy if p then q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "q"
                ],
                "modes": []
            },
            "component_name": "sw",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                14,
                19
            ],
            "post_condition": "(p => q)",
            "responseTextRange": [
                22,
                40
            ],
            "ft": "(LAST V <b><i>(p -> q)</i></b>)",
            "pt": "(H <b><i>(p -> q)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(p -> q)</i></b>)",
            "ptExpanded": "(H <b><i>(p -> q)</i></b>)",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((p => q)))",
            "diagramVariables": "Response = <b><i>(p => q)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0feb0720-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "REQ-03",
        "parent_reqid": "",
        "project": "InfusionManager",
        "rationale": "",
        "comments": "",
        "fulltext": "if ! FTP the sw shall always satisfy if p then q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FTP",
                    "p",
                    "q"
                ],
                "modes": []
            },
            "regular_condition": "(! FTP)",
            "qualifier_word": "if",
            "pre_condition": "(! FTP)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "sw",
            "componentTextRange": [
                9,
                14
            ],
            "timingTextRange": [
                22,
                27
            ],
            "post_condition": "(p => q)",
            "responseTextRange": [
                29,
                47
            ],
            "ft": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(p -> q)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(p -> q)</i></b>)))",
            "pt": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(p -> q)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(p -> q)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(p -> q)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(p -> q)</i></b>))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((H( not (not FTP))) or (p => q)))",
            "diagramVariables": "TC = <b><i>(! FTP)</i></b>, Response = <b><i>(p => q)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! FTP)</i></b> is true and any point in the interval where <b><i>(! FTP)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "0feb5540-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-NULL-AFTER",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "After M mode the sw shall, after 2 secs, satisfy P",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                11
            ],
            "component_name": "sw",
            "componentTextRange": [
                13,
                18
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                25,
                39
            ],
            "post_condition": "(P)",
            "responseTextRange": [
                41,
                49
            ],
            "ft": "(((! FLin_<b><i>M</i></b>) U (FLin_<b><i>M</i></b> & (X (((G[<=<b><i>2</i></b>] (! <b><i>(P)</i></b>)) | (LAST V (! <b><i>(P)</i></b>))) & ((F[<=<b><i>2</i></b>+1] <b><i>(P)</i></b>) | (F[<<b><i>2</i></b>+1] LAST)))))) | (LAST V (! FLin_<b><i>M</i></b>)))",
            "pt": "((O FLin_<b><i>M</i></b>) -> ((((O[<=<b><i>2</i></b>] FLin_<b><i>M</i></b>) -> (! <b><i>(P)</i></b>)) S (((O[<=<b><i>2</i></b>] FLin_<b><i>M</i></b>) -> (! <b><i>(P)</i></b>)) & FLin_<b><i>M</i></b>)) & ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & FLin_<b><i>M</i></b>)) -> (O[<<b><i>2</i></b>+1] FLin_<b><i>M</i></b>)) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & FLin_<b><i>M</i></b>)) -> (O[<<b><i>2</i></b>+1] FLin_<b><i>M</i></b>)) & FLin_<b><i>M</i></b>))))",
            "ftExpanded": "(((! ((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>)))) U (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) & (X (((G[<=<b><i>2</i></b>] (! <b><i>(P)</i></b>)) | (LAST V (! <b><i>(P)</i></b>))) & ((F[<=<b><i>2</i></b>+1] <b><i>(P)</i></b>) | (F[<<b><i>2</i></b>+1] LAST)))))) | (LAST V (! ((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))))))) -> ((((O[<=<b><i>2</i></b>] (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))))))) -> (! <b><i>(P)</i></b>)) S (((O[<=<b><i>2</i></b>] (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))))))) -> (! <b><i>(P)</i></b>)) & (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)))))))) & ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)))))))) -> (O[<<b><i>2</i></b>+1] (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)))))))) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)))))))) -> (O[<<b><i>2</i></b>+1] (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)))))))) & (((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y (H (! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((O((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M))))))) => ((SI( ((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M)))))), ((OT(2,0,( ( ( not M ) and ( Y M ) ) and Y ( H ( not ( ( not M ) and ( Y M ) ) ) ) ))) => ( not (P))) )) and (SI( ((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M)))))), ((SI( ((( not M) and (pre (M))) and pre (H( not (( not M) and (pre (M)))))), ( not (P)) )) => (OT(2,0,( ( ( not M ) and ( Y M ) ) and Y ( H ( not ( ( not M ) and ( Y M ) ) ) ) )))) ))))",
            "diagramVariables": "M = <b><i>M</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(P)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>M</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>2</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>2</i></b>). Moreover, RES must hold at the point that is at distance <b><i>2</i></b>+1 from the trigger, that is, trigger+<b><i>2</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_after_satisfaction.svg"
        },
        "_id": "0feb7c50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TRIGGER-COND-IMM-2",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "Upon Trig the sw shall immediately satisfy if Cond then Resp",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Trig",
                    "Cond",
                    "Resp"
                ],
                "modes": []
            },
            "regular_condition": "(Trig)",
            "qualifier_word": "upon",
            "pre_condition": "(Trig)",
            "conditionTextRange": [
                0,
                8
            ],
            "component_name": "sw",
            "componentTextRange": [
                10,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(Cond => Resp)",
            "responseTextRange": [
                35,
                59
            ],
            "ft": "((LAST V (((! <b><i>(Trig)</i></b>) & ((! LAST) & (X <b><i>(Trig)</i></b>))) -> (X <b><i>(Cond -> Resp)</i></b>))) & (<b><i>(Trig)</i></b> -> <b><i>(Cond -> Resp)</i></b>))",
            "pt": "(H ((<b><i>(Trig)</i></b> & ((Y (! <b><i>(Trig)</i></b>)) | FTP)) -> <b><i>(Cond -> Resp)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(Trig)</i></b>) & ((! LAST) & (X <b><i>(Trig)</i></b>))) -> (X <b><i>(Cond -> Resp)</i></b>))) & (<b><i>(Trig)</i></b> -> <b><i>(Cond -> Resp)</i></b>))",
            "ptExpanded": "(H ((<b><i>(Trig)</i></b> & ((Y (! <b><i>(Trig)</i></b>)) | (! (Y TRUE)))) -> <b><i>(Cond -> Resp)</i></b>))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H(((Trig) and ((pre ( not (Trig))) or FTP)) => (Cond => Resp)))",
            "diagramVariables": "TC = <b><i>(Trig)</i></b>, Response = <b><i>(Cond => Resp)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(Trig)</i></b> is true and any point in the interval where <b><i>(Trig)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "0feba360-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "lei-101",
        "project": "BIOSEN",
        "rationale": "",
        "fulltext": "during flight mode, when x > y, letio shall, within 10 ticks, increment the SOH counter",
        "semantics": {
            "scope": "in",
            "condition": "regular",
            "timing": "within",
            "response": "act",
            "scope_mode": "flight",
            "regular_condition": "x > y",
            "pre_conditions": [
                "x > y"
            ],
            "component_name": "letio",
            "duration_upper": "10 ticks",
            "action": "increment the SOH counter",
            "ltlTemplate": "G ($scope_mode$ -> ($regular_condition$ -> (F[$duration_upper$] $action$)))",
            "ltlFormula": "G (<b><i>flight</i></b> -> (<b><i>x > y</i></b> -> (F[<b><i>10 ticks</i></b>] <b><i>increment the SOH counter</i></b>)))",
            "ltlDescription": "If the condition <b><i>x > y</i></b> holds,  component <b><i>letio</i></b> shall , within <b><i>10 ticks</i></b>,  perform action: <b><i>increment the SOH counter</i></b>. \nNote that this requirement is only imposed when <b><i>letio</i></b> is in mode <b><i>flight</i></b>."
        },
        "input": {
            "scopeField": "during flight mode",
            "conditionsField": "when x > y",
            "componentField": "letio",
            "timingField": "within 10 ticks",
            "responsesField": "increment the SOH counter"
        },
        "_id": "0febf180-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TCM-G-170",
        "project": "TCM",
        "rationale": "The altitude control shall engage when the altitude control mode is selected and when the FPA control mode is not selected, and when there is no manual pitch or manual roll command from the stick.",
        "fulltext": "When altitude_control_mode_selected & ! FPA_control_mode_selected & ! stick_manual_pitch_command & ! stick_manual_roll_command, the FSW shall  start altitude_control",
        "semantics": {
            "scope": "null",
            "condition": "regular",
            "timing": "null",
            "response": "act",
            "regular_condition": "altitude_control_mode_selected & ! FPA_control_mode_selected & ! stick_manual_pitch_command & ! stick_manual_roll_command",
            "pre_conditions": [
                "altitude_control_mode_selected & ! FPA_control_mode_selected & ! stick_manual_pitch_command & ! stick_manual_roll_command"
            ],
            "component_name": "FSW",
            "action": "start altitude_control",
            "ltlTemplate": "$regular_condition$ IMP $action$",
            "ltlFormula": "<b><i>altitude_control_mode_selected & ! FPA_control_mode_selected & ! stick_manual_pitch_command & ! stick_manual_roll_command</i></b> IMP <b><i>start altitude_control</i></b>",
            "ltlDescription": "If the condition <b><i>altitude_control_mode_selected & ! FPA_control_mode_selected & ! stick_manual_pitch_command & ! stick_manual_roll_command</i></b> holds,  component <b><i>FSW</i></b> shall  perform action: <b><i>start altitude_control</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "When altitude_control_mode_selected & ! FPA_control_mode_selected & ! stick_manual_pitch_command & ! stick_manual_roll_command",
            "componentField": "the FSW",
            "timingField": "",
            "responsesField": "start altitude_control"
        },
        "_id": "0fec66b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "MULTIPLE_CONDS",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "Why not?",
        "fulltext": "when x > 0 and if ! p, the system shall  increment the frammitz counter",
        "semantics": {
            "scope": "globally",
            "condition": "regular",
            "timing": "null",
            "response": "action",
            "regular_condition": "x > 0 & ! p",
            "pre_conditions": [
                "x > 0",
                "! p"
            ],
            "component": "thesystem",
            "action": "increment the frammitz counter",
            "ltlTemplate": "[]($regular_condition$-><>$action$)",
            "ltlFormula": "[](<b><i>x > 0 & ! p</i></b>-><><b><i>increment the frammitz counter</i></b>)",
            "ltlDescription": "Whenever the condition <b><i>x > 0 & ! p</i></b> holds, the action <b><i>increment the frammitz counter</i></b> must happen afterwards eventually.<br />The condition may hold several times before the action happens."
        },
        "input": {
            "scopeField": "",
            "conditionsField": "when x > 0 and if ! p",
            "componentField": "the system",
            "timingField": "",
            "responsesField": "increment the frammitz counter"
        },
        "_id": "0fecb4d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "INVARIANT-1",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "Because.",
        "fulltext": "The system shall always satisfy x^2 >= 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x"
                ],
                "modes": []
            },
            "component_name": "system",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(x ^ 2 >= 0)",
            "responseTextRange": [
                24,
                39
            ],
            "ft": "(LAST V <b><i>(x ^ 2 >= 0)</i></b>)",
            "pt": "(H <b><i>(x ^ 2 >= 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(x ^ 2 >= 0)</i></b>)",
            "ptExpanded": "(H <b><i>(x ^ 2 >= 0)</i></b>)",
            "component": "<b><i>system</i></b>",
            "CoCoSpecCode": "(H((x ^ 2 >= 0)))",
            "diagramVariables": "Response = <b><i>(x ^ 2 >= 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "0fed02f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-MODE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "fulltext": "only in M, shall comp  satisfy P",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "onlyIn"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "comp",
            "componentTextRange": [
                17,
                20
            ],
            "post_condition": "(P)",
            "responseTextRange": [
                23,
                31
            ],
            "ft": "((LAST V ((! (FNin_<b><i>M</i></b> & (! LAST))) | (X ((LNin_<b><i>M</i></b> | LAST) V (! <b><i>(P)</i></b>))))) & ((! <b><i>M</i></b>) -> ((LNin_<b><i>M</i></b> | LAST) V (! <b><i>(P)</i></b>))))",
            "pt": "((H ((LNin_<b><i>M</i></b> & (! FTP)) -> (Y ((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & FNin_<b><i>M</i></b>))))) & (((! LNin_<b><i>M</i></b>) S ((! LNin_<b><i>M</i></b>) & FNin_<b><i>M</i></b>)) -> ((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & FNin_<b><i>M</i></b>))))",
            "ftExpanded": "((LAST V ((! (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) & (! LAST))) | (X (((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) | LAST) V (! <b><i>(P)</i></b>))))) & ((! <b><i>M</i></b>) -> (((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) | LAST) V (! <b><i>(P)</i></b>))))",
            "ptExpanded": "((H (((<b><i>M</i></b> & (Y (! <b><i>M</i></b>))) & (Y TRUE)) -> (Y ((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & ((! <b><i>M</i></b>) & ((! (Y TRUE)) | (Y <b><i>M</i></b>)))))))) & (((! (<b><i>M</i></b> & (Y (! <b><i>M</i></b>)))) S ((! (<b><i>M</i></b> & (Y (! <b><i>M</i></b>)))) & ((! <b><i>M</i></b>) & ((! (Y TRUE)) | (Y <b><i>M</i></b>))))) -> ((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & ((! <b><i>M</i></b>) & ((! (Y TRUE)) | (Y <b><i>M</i></b>)))))))",
            "component": "<b><i>comp</i></b>",
            "CoCoSpecCode": "((H(((M and (pre ( not M))) and ( not FTP)) => (pre (SI( (( not M) and (FTP or (pre (M)))), ( not (P)) ))))) and ((SI( (( not M) and (FTP or (pre (M)))), ( not (M and (pre ( not M)))) )) => (SI( (( not M) and (FTP or (pre (M)))), ( not (P)) ))))",
            "diagramVariables": "M = <b><i>M</i></b>, Response = <b><i>(P)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> does NOT hold.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/onlyIn_null_null_satisfaction.svg"
        },
        "_id": "0fed5110-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-BEFORE-ORDER-1",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "fulltext": "before ChannelSelection, television shall  first enable Power and then enable Roku",
        "semantics": {
            "scope": "before",
            "condition": "null",
            "timing": "null",
            "response": "order",
            "scope_mode": "ChannelSelection",
            "component_name": "television",
            "action1": "enable Power",
            "action": "enable Roku",
            "action2": "enable Roku",
            "ltlTemplate": "(F $scope_mode$) -> ((!(((!((!$action2$) & $action1$)) & (!$scope_mode$)) U ($action2$ & (!((!$action2$) & $action1$))))) & ((!$scope_mode$) U $action2$))",
            "ltlFormula": "(F <b><i>ChannelSelection</i></b>) -> ((!(((!((!<b><i>enable Roku</i></b>) & <b><i>enable Power</i></b>)) & (!<b><i>ChannelSelection</i></b>)) U (<b><i>enable Roku</i></b> & (!((!<b><i>enable Roku</i></b>) & <b><i>enable Power</i></b>))))) & ((!<b><i>ChannelSelection</i></b>) U <b><i>enable Roku</i></b>))",
            "ltlDescription": "Component <b><i>television</i></b> shall  perform <b><i>enable Power</i></b> strictly before <b><i>enable Roku</i></b>. Strictly before means that <b><i>enable Roku</i></b> cannot occur at the same time as <b><i>enable Power</i></b>.. \nNote that this requirement is only relevant and imposed before <b><i>television</i></b> enters mode <b><i>ChannelSelection</i></b> for the first time."
        },
        "input": {
            "scopeField": "before ChannelSelection",
            "conditionsField": "",
            "componentField": "television",
            "timingField": "",
            "responsesField": "first enable Power and then enable Roku"
        },
        "_id": "0fed7820-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-TIMING",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "fulltext": "abc shall, after 10 seconds, satisfy Q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Q"
                ],
                "modes": []
            },
            "component_name": "abc",
            "componentTextRange": [
                0,
                2
            ],
            "duration": [
                "10"
            ],
            "timingTextRange": [
                9,
                27
            ],
            "post_condition": "(Q)",
            "responseTextRange": [
                29,
                37
            ],
            "ft": "(((G[<=<b><i>10</i></b>] (! <b><i>(Q)</i></b>)) | (LAST V (! <b><i>(Q)</i></b>))) & ((F[<=<b><i>10</i></b>+1] <b><i>(Q)</i></b>) | (F[<<b><i>10</i></b>+1] LAST)))",
            "pt": "((H ((O[<=<b><i>10</i></b>] FTP) -> (! <b><i>(Q)</i></b>))) & (H ((H (! <b><i>(Q)</i></b>)) -> (O[<<b><i>10</i></b>+1] FTP))))",
            "ftExpanded": "(((G[<=<b><i>10</i></b>] (! <b><i>(Q)</i></b>)) | (LAST V (! <b><i>(Q)</i></b>))) & ((F[<=<b><i>10</i></b>+1] <b><i>(Q)</i></b>) | (F[<<b><i>10</i></b>+1] LAST)))",
            "ptExpanded": "((H ((O[<=<b><i>10</i></b>] (! (Y TRUE))) -> (! <b><i>(Q)</i></b>))) & (H ((H (! <b><i>(Q)</i></b>)) -> (O[<<b><i>10</i></b>+1] (! (Y TRUE))))))",
            "component": "<b><i>abc</i></b>",
            "CoCoSpecCode": "((H((OT(10,0,FTP)) => ( not (Q)))) and (H((H( not (Q))) => (OT(10,0,FTP)))))",
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(Q)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>10</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>10</i></b>). Moreover, RES must hold at the point that is at distance <b><i>10</i></b>+1 from the trigger, that is, trigger+<b><i>10</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg"
        },
        "_id": "0fedc640-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-BEFORE-ORDER-2",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "fulltext": "before ChannelSelection, television shall  first satisfy power_on and then satisfy roku_on",
        "semantics": {
            "scope": "before",
            "condition": "null",
            "timing": "null",
            "response": "order",
            "scope_mode": "ChannelSelection",
            "component_name": "television",
            "action1": "satisfy power_on",
            "post_condition": "roku_on",
            "action2": "satisfy roku_on",
            "ltlTemplate": "(F $scope_mode$) -> (!(((!((!$action2$) & $action1$)) & (!$scope_mode$)) U ($action2$ & (!((!$action2$) & $action1$)))))",
            "ltlFormula": "(F <b><i>ChannelSelection</i></b>) -> (!(((!((!<b><i>satisfy roku_on</i></b>) & <b><i>satisfy power_on</i></b>)) & (!<b><i>ChannelSelection</i></b>)) U (<b><i>satisfy roku_on</i></b> & (!((!<b><i>satisfy roku_on</i></b>) & <b><i>satisfy power_on</i></b>)))))",
            "ltlDescription": "Component <b><i>television</i></b> shall  perform <b><i>satisfy power_on</i></b> strictly before <b><i>satisfy roku_on</i></b>. Strictly before means that <b><i>satisfy roku_on</i></b> cannot occur at the same time as <b><i>satisfy power_on</i></b>.. \nNote that this requirement is only relevant and imposed before <b><i>television</i></b> enters mode <b><i>ChannelSelection</i></b> for the first time."
        },
        "input": {
            "scopeField": "before ChannelSelection",
            "conditionsField": "",
            "componentField": "television",
            "timingField": "",
            "responsesField": "first satisfy power_on and then satisfy roku_on"
        },
        "_id": "0feded50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-Eventually-Action",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "fulltext": "Recovery_System shall eventually increment the Dimitra counter",
        "semantics": {
            "scope": "globally",
            "condition": "null",
            "timing": "eventually",
            "response": "action",
            "component_name": "Recovery_System",
            "action": "increment the Dimitra counter",
            "ltlTemplate": "<> $action$",
            "ltlFormula": "<> <b><i>increment the Dimitra counter</i></b>",
            "ltlDescription": "The component <b><i>Recovery_System</i></b> will eventually perform <b><i>increment the Dimitra counter</i></b>."
        },
        "input": {
            "scopeField": "",
            "conditionsField": "",
            "componentField": "Recovery_System",
            "timingField": "eventually",
            "responsesField": "increment the Dimitra counter"
        },
        "_id": "0fee3b70-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST_COND",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "fulltext": "when P, FSW shall  increment the N counter",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "action",
            "regular_condition": "(P)",
            "qualifier_word": "when",
            "pre_condition": "P",
            "conditionTextRange": [
                0,
                6
            ],
            "component_name": "FSW",
            "componentTextRange": [
                8,
                10
            ],
            "action": "increment the N counter",
            "responseTextRange": [
                19,
                41
            ],
            "ft": "G (<b><i>(P)</i></b> -> (F <b><i>increment the N counter</i></b>))",
            "pt": "H (LAST -> (Y (!(((!<b><i>increment the N counter</i></b>) & (!(Y FIRST))) S (<b><i>(P)</i></b> & (!<b><i>increment the N counter</i></b>))))))",
            "component": "<b><i>FSW</i></b>",
            "description": "Upon <b><i>(P)</i></b> becoming true, at some future point, the component \"<b><i>FSW</i></b>\" shall perform <b><i>increment the N counter</i></b>.",
            "diagram": "Undefined svg."
        },
        "_id": "0fee6280-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-CONDITION",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "why not?",
        "fulltext": "only when P & Q, abc shall  satisfy R",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "only",
            "timing": "null",
            "response": "satisfaction",
            "regular_condition": "((P & Q))",
            "qualifier_word": "when",
            "pre_condition": "(P & Q)",
            "component_name": "abc",
            "post_condition": "R",
            "ltlTemplate": "G ($post_condition$ -> $regular_condition$)",
            "ltlFormula": "G (<b><i>R</i></b> -> <b><i>((P & Q))</i></b>)",
            "ltlDescription": "Only if the condition <b><i>((P & Q))</i></b> holds,  component <b><i>abc</i></b> shall  satisfy <b><i>R</i></b>. \n"
        },
        "input": {
            "scopeField": "",
            "conditionsField": "only when P & Q",
            "componentField": "abc",
            "timingField": "",
            "responsesField": "satisfy R"
        },
        "_id": "0feeb0a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-AFTER-EXCL-OPT",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "strictly after M mode (which is not required to occur) the sw shall  satisfy P",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": true,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "M",
            "component_name": "sw",
            "post_condition": "P",
            "ltlTemplate": "G (NOT $scope_mode$ W ($scope_mode$ AND X (TRUE IMP $post_condition$)))",
            "ltlFormula": "G (NOT <b><i>M</i></b> W (<b><i>M</i></b> AND X (TRUE IMP <b><i>P</i></b>)))",
            "ltlDescription": "Component <b><i>sw</i></b> shall  satisfy <b><i>P</i></b>. \nNote that this requirement is only relevant and imposed after the first time that <b><i>sw</i></b> exits mode <b><i>M</i></b> for the first time."
        },
        "input": {
            "scopeField": "strictly after M mode (which is not required to occur)",
            "conditionsField": "",
            "componentField": "the sw",
            "timingField": "",
            "responsesField": "satisfy P"
        },
        "_id": "0feed7b0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-CM",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in mode m when persisted(3,p) the sw shall within 5 ticks satisfy q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "persisted",
                    "p",
                    "q"
                ],
                "modes": [
                    "m"
                ]
            },
            "scope_mode": "m",
            "scopeTextRange": [
                0,
                8
            ],
            "qualifier_word": "when",
            "pre_condition": "(persisted ( 3 , p ))",
            "regular_condition": "(persisted ( 3 , p ))",
            "conditionTextRange": [
                10,
                28
            ],
            "component_name": "sw",
            "componentTextRange": [
                30,
                35
            ],
            "duration": "5",
            "timingTextRange": [
                43,
                56
            ],
            "post_condition": "(q)",
            "responseTextRange": [
                58,
                66
            ],
            "diagramVariables": "M = <b><i>m</i></b>, TC = <b><i>(persisted ( 3 , p ))</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(q)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>m</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(persisted ( 3 , p ))</i></b> is true and any point in the interval where <b><i>(persisted ( 3 , p ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_within_satisfaction.svg",
            "regular_condition_unexp_pt": "((H[<=3] p) & (H[<3] (! Fin_$scope_mode$)))",
            "regular_condition_unexp_ft": "persisted(3,p)",
            "regular_condition_SMV_pt": "((H[<=3] p) & (H[<3] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$)))))))",
            "regular_condition_SMV_ft": "persisted(3,p)",
            "regular_condition_coco": "((HT(3,0,p)) and (HT(2,0,( not ($scope_mode$ and (FTP or (pre ( not $scope_mode$))))))))",
            "post_condition_unexp_pt": "q",
            "post_condition_unexp_ft": "q",
            "post_condition_SMV_pt": "q",
            "post_condition_SMV_ft": "q",
            "post_condition_coco": "q",
            "ft": "((LAST V ((! (Fin_<b><i>m</i></b> & (! LAST))) | (X (((Lin_<b><i>m</i></b> | LAST) V (((! <b><i>persisted(3,p)</i></b>) & ((! LAST) & ((X <b><i>persisted(3,p)</i></b>) & (! (Lin_<b><i>m</i></b> | LAST))))) -> ((X ((F[<=<b><i>5</i></b>] <b><i>q</i></b>) | (F[<<b><i>5</i></b>] (Lin_<b><i>m</i></b> | LAST)))) & (! (Lin_<b><i>m</i></b> | LAST))))) & (<b><i>persisted(3,p)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>q</i></b>) | (F[<<b><i>5</i></b>] (Lin_<b><i>m</i></b> | LAST)))))))) & (<b><i>m</i></b> -> (((Lin_<b><i>m</i></b> | LAST) V (((! <b><i>persisted(3,p)</i></b>) & ((! LAST) & ((X <b><i>persisted(3,p)</i></b>) & (! (Lin_<b><i>m</i></b> | LAST))))) -> ((X ((F[<=<b><i>5</i></b>] <b><i>q</i></b>) | (F[<<b><i>5</i></b>] (Lin_<b><i>m</i></b> | LAST)))) & (! (Lin_<b><i>m</i></b> | LAST))))) & (<b><i>persisted(3,p)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>q</i></b>) | (F[<<b><i>5</i></b>] (Lin_<b><i>m</i></b> | LAST)))))))",
            "pt": "((H ((Lin_<b><i>m</i></b> & (! FTP)) -> (Y (((O[=<b><i>5</i></b>] ((<b><i>((H[<=3] p) & (H[<3] (! Fin_m)))</i></b> & ((Y (! <b><i>((H[<=3] p) & (H[<3] (! Fin_m)))</i></b>)) | Fin_<b><i>m</i></b>)) & (! <b><i>q</i></b>))) -> (O[<<b><i>5</i></b>] (Fin_<b><i>m</i></b> | <b><i>q</i></b>))) S (((O[=<b><i>5</i></b>] ((<b><i>((H[<=3] p) & (H[<3] (! Fin_m)))</i></b> & ((Y (! <b><i>((H[<=3] p) & (H[<3] (! Fin_m)))</i></b>)) | Fin_<b><i>m</i></b>)) & (! <b><i>q</i></b>))) -> (O[<<b><i>5</i></b>] (Fin_<b><i>m</i></b> | <b><i>q</i></b>))) & Fin_<b><i>m</i></b>))))) & (((! Lin_<b><i>m</i></b>) S ((! Lin_<b><i>m</i></b>) & Fin_<b><i>m</i></b>)) -> (((O[=<b><i>5</i></b>] ((<b><i>((H[<=3] p) & (H[<3] (! Fin_m)))</i></b> & ((Y (! <b><i>((H[<=3] p) & (H[<3] (! Fin_m)))</i></b>)) | Fin_<b><i>m</i></b>)) & (! <b><i>q</i></b>))) -> (O[<<b><i>5</i></b>] (Fin_<b><i>m</i></b> | <b><i>q</i></b>))) S (((O[=<b><i>5</i></b>] ((<b><i>((H[<=3] p) & (H[<3] (! Fin_m)))</i></b> & ((Y (! <b><i>((H[<=3] p) & (H[<3] (! Fin_m)))</i></b>)) | Fin_<b><i>m</i></b>)) & (! <b><i>q</i></b>))) -> (O[<<b><i>5</i></b>] (Fin_<b><i>m</i></b> | <b><i>q</i></b>))) & Fin_<b><i>m</i></b>))))",
            "ptExpanded": "((H ((((! m) & (Y m)) & (Y TRUE)) -> (Y (((O[=5] ((((H[<=3] p) & (H[<3] (! (m & ((!(Y TRUE)) | (Y (!m))))))) & ((Y (! ((H[<=3] p) & (H[<3] (! (m & ((!(Y TRUE)) | (Y (!m))))))))) | (m & ((! (Y TRUE)) | (Y (! m)))))) & (! q))) -> (O[<5] ((m & ((! (Y TRUE)) | (Y (! m)))) | q))) S (((O[=5] ((((H[<=3] p) & (H[<3] (! (m & ((!(Y TRUE)) | (Y (!m))))))) & ((Y (! ((H[<=3] p) & (H[<3] (! (m & ((!(Y TRUE)) | (Y (!m))))))))) | (m & ((! (Y TRUE)) | (Y (! m)))))) & (! q))) -> (O[<5] ((m & ((! (Y TRUE)) | (Y (! m)))) | q))) & (m & ((! (Y TRUE)) | (Y (! m))))))))) & (((! ((! m) & (Y m))) S ((! ((! m) & (Y m))) & (m & ((! (Y TRUE)) | (Y (! m)))))) -> (((O[=5] ((((H[<=3] p) & (H[<3] (! (m & ((!(Y TRUE)) | (Y (!m))))))) & ((Y (! ((H[<=3] p) & (H[<3] (! (m & ((!(Y TRUE)) | (Y (!m))))))))) | (m & ((! (Y TRUE)) | (Y (! m)))))) & (! q))) -> (O[<5] ((m & ((! (Y TRUE)) | (Y (! m)))) | q))) S (((O[=5] ((((H[<=3] p) & (H[<3] (! (m & ((!(Y TRUE)) | (Y (!m))))))) & ((Y (! ((H[<=3] p) & (H[<3] (! (m & ((!(Y TRUE)) | (Y (!m))))))))) | (m & ((! (Y TRUE)) | (Y (! m)))))) & (! q))) -> (O[<5] ((m & ((! (Y TRUE)) | (Y (! m)))) | q))) & (m & ((! (Y TRUE)) | (Y (! m))))))))",
            "ftExpanded": "((LAST V ((! ((((! m) & (! LAST)) & (X m)) & (! LAST))) | (X (((((m & (! LAST)) & (X (! m))) | LAST) V (((! persisted(3,p)) & ((! LAST) & ((X persisted(3,p)) & (! (((m & (! LAST)) & (X (! m))) | LAST))))) -> ((X ((F[<=5] q) | (F[<5] (((m & (! LAST)) & (X (! m))) | LAST)))) & (! (((m & (! LAST)) & (X (! m))) | LAST))))) & (persisted(3,p) -> ((F[<=5] q) | (F[<5] (((m & (! LAST)) & (X (! m))) | LAST)))))))) & (m -> (((((m & (! LAST)) & (X (! m))) | LAST) V (((! persisted(3,p)) & ((! LAST) & ((X persisted(3,p)) & (! (((m & (! LAST)) & (X (! m))) | LAST))))) -> ((X ((F[<=5] q) | (F[<5] (((m & (! LAST)) & (X (! m))) | LAST)))) & (! (((m & (! LAST)) & (X (! m))) | LAST))))) & (persisted(3,p) -> ((F[<=5] q) | (F[<5] (((m & (! LAST)) & (X (! m))) | LAST)))))))",
            "CoCoSpecCode": "((H(((( not m) and (pre (m))) and ( not FTP)) => (pre (SI( (m and (FTP or (pre ( not m)))), ((OT(5,5,( ( ((HT(3,0,p)) and (HT(2,0,( not (m and (FTP or (pre ( not m)))))))) and ( ( Y ( not ((HT(3,0,p)) and (HT(2,0,( not (m and (FTP or (pre ( not m)))))))) ) ) or ( m and ( FTP or ( Y not m ) ) ) ) ) and ( not q ) ))) => (OT(5-1,0,( ( m and ( FTP or ( Y not m ) ) ) or q )))) ))))) and ((SI( (m and (FTP or (pre ( not m)))), ( not (( not m) and (pre (m)))) )) => (SI( (m and (FTP or (pre ( not m)))), ((OT(5,5,( ( ((HT(3,0,p)) and (HT(2,0,( not (m and (FTP or (pre ( not m)))))))) and ( ( Y ( not ((HT(3,0,p)) and (HT(2,0,( not (m and (FTP or (pre ( not m)))))))) ) ) or ( m and ( FTP or ( Y not m ) ) ) ) ) and ( not q ) ))) => (OT(5-1,0,( ( m and ( FTP or ( Y not m ) ) ) or q )))) ))))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0fef25d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "comments": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy abs(roll_angle) => roll_hold_reference = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs",
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(abs ( roll_angle ) => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                101
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(abs ( roll_angle ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "(H (Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) -> roll_hold_reference = 0.0)</i></b>))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(abs ( roll_angle ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "(H ((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) -> roll_hold_reference = 0.0)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs ( roll_angle ) => roll_hold_reference = 0.0)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs ( roll_angle ) => roll_hold_reference = 0.0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0fef4ce0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-P",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "in mode M the sw shall always satisfy ! persisted(3,q)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "persisted",
                    "q"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                8
            ],
            "component_name": "sw",
            "componentTextRange": [
                10,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(! persisted ( 3 , q ))",
            "responseTextRange": [
                30,
                53
            ],
            "diagramVariables": "M = <b><i>M</i></b>, Response = <b><i>(! persisted ( 3 , q ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "post_condition_unexp_pt": "(! ((H[<=3] q) & (H[<3] (! Fin_$scope_mode$))))",
            "post_condition_unexp_ft": "(! persisted(3,q))",
            "post_condition_SMV_pt": "(! ((H[<=3] q) & (H[<3] (! ($scope_mode$ & ((!(Y TRUE)) | (Y (!$scope_mode$))))))))",
            "post_condition_SMV_ft": "(! persisted(3,q))",
            "post_condition_coco": "( not ((HT(3,0,q)) and (HT(2,0,( not ($scope_mode$ and (FTP or (pre ( not $scope_mode$)))))))))",
            "ft": "(LAST V (<b><i>M</i></b> -> <b><i>(! persisted(3,q))</i></b>))",
            "pt": "(H (<b><i>M</i></b> -> <b><i>(! ((H[<=3] q) & (H[<3] (! Fin_M))))</i></b>))",
            "ptExpanded": "(H (M -> (! ((H[<=3] q) & (H[<3] (! (M & ((!(Y TRUE)) | (Y (!M))))))))))",
            "ftExpanded": "(LAST V (M -> (! persisted(3,q))))",
            "CoCoSpecCode": "(H(M => ( not ((HT(3,0,q)) and (HT(2,0,( not (M and (FTP or (pre ( not M)))))))))))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0fef9b00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AOS-R2U2-2",
        "parent_reqid": "",
        "project": "AOS",
        "rationale": "",
        "fulltext": "after new_waypoint_targeted, the vehicle shall, within 3 seconds, satisfy new_heading_achieved",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "scope_mode": "new_waypoint_targeted",
            "component_name": "vehicle",
            "duration_upper": "3 seconds",
            "post_condition": "new_heading_achieved",
            "ltlTemplate": "G ((!$scope_mode$) | ($scope_mode$ & (F[$duration_upper$] $post_condition$)))",
            "ltlFormula": "G ((!<b><i>new_waypoint_targeted</i></b>) | (<b><i>new_waypoint_targeted</i></b> & (F[<b><i>3 seconds</i></b>] <b><i>new_heading_achieved</i></b>)))",
            "ltlDescription": "Component <b><i>vehicle</i></b> shall , within <b><i>3 seconds</i></b>,  satisfy <b><i>new_heading_achieved</i></b>. \nNote that this requirement is only relevant and imposed after the first time that <b><i>vehicle</i></b> exits mode <b><i>new_waypoint_targeted</i></b> for the first time."
        },
        "input": {
            "scopeField": "after new_waypoint_targeted",
            "conditionsField": "",
            "componentField": "the vehicle",
            "timingField": "within 3 seconds",
            "responsesField": "satisfy new_heading_achieved"
        },
        "_id": "0fefc210-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TRIGGER-COND-NEXT",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "Upon Trig when Cond the sw shall at the next timepoint satisfy Resp",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Trig",
                    "Cond",
                    "Resp"
                ],
                "modes": []
            },
            "regular_condition": "((Trig) & (Cond))",
            "qualifier_word": "when",
            "pre_condition": "(Cond)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "sw",
            "componentTextRange": [
                20,
                25
            ],
            "timingTextRange": [
                33,
                53
            ],
            "post_condition": "(Resp)",
            "responseTextRange": [
                55,
                66
            ],
            "ft": "((LAST V (((! <b><i>((Trig) & (Cond))</i></b>) & ((! LAST) & (X <b><i>((Trig) & (Cond))</i></b>))) -> (X (LAST | (X <b><i>(Resp)</i></b>))))) & (<b><i>((Trig) & (Cond))</i></b> -> (LAST | (X <b><i>(Resp)</i></b>))))",
            "pt": "(H ((Y (<b><i>((Trig) & (Cond))</i></b> & ((Y (! <b><i>((Trig) & (Cond))</i></b>)) | FTP))) -> (<b><i>(Resp)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>((Trig) & (Cond))</i></b>) & ((! LAST) & (X <b><i>((Trig) & (Cond))</i></b>))) -> (X (LAST | (X <b><i>(Resp)</i></b>))))) & (<b><i>((Trig) & (Cond))</i></b> -> (LAST | (X <b><i>(Resp)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>((Trig) & (Cond))</i></b> & ((Y (! <b><i>((Trig) & (Cond))</i></b>)) | (! (Y TRUE))))) -> (<b><i>(Resp)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((pre (((Trig) and (Cond)) and ((pre ( not ((Trig) and (Cond)))) or FTP))) => ((Resp) or FTP)))",
            "diagramVariables": "TC = <b><i>((Trig) & (Cond))</i></b>, Response = <b><i>(Resp)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((Trig) & (Cond))</i></b> is true and any point in the interval where <b><i>((Trig) & (Cond))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "0fefe920-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-ONLY-IN",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "only in m, when p, shall the software  satisfy pc",
        "semantics": {
            "scope": {
                "type": "onlyIn"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "scope_mode": "m",
            "regular_condition": "p",
            "pre_conditions": [
                "p"
            ],
            "component_name": "software",
            "post_condition": "pc",
            "ltlTemplate": "G ($post_condition$ -> ($regular_condition$ -> $scope_mode$))",
            "ltlFormula": "G (<b><i>pc</i></b> -> (<b><i>p</i></b> -> <b><i>m</i></b>))",
            "ltlDescription": "If the condition <b><i>p</i></b> holds,  component <b><i>software</i></b> shall  satisfy <b><i>pc</i></b>. \nNote that this requirement is only relevant and imposed when <b><i>software</i></b> is in mode <b><i>m</i></b>."
        },
        "input": {
            "scopeField": "only in m",
            "conditionsField": "when p",
            "componentField": "the software",
            "timingField": "",
            "responsesField": "satisfy pc"
        },
        "_id": "0ff03740-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-BNDD-RSPNSE",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "if P the sw shall within 5 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P",
                    "R"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(P)",
            "regular_condition": "(P)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "sw",
            "componentTextRange": [
                5,
                10
            ],
            "duration": [
                "5"
            ],
            "timingTextRange": [
                18,
                31
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                33,
                41
            ],
            "ft": "((LAST V (((! <b><i>(P)</i></b>) & ((! LAST) & (X <b><i>(P)</i></b>))) -> (X ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>5</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | FTP)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>5</i></b>] (FTP | <b><i>(R)</i></b>))))",
            "ftExpanded": "((LAST V (((! <b><i>(P)</i></b>) & ((! LAST) & (X <b><i>(P)</i></b>))) -> (X ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))",
            "ptExpanded": "(H ((O[=<b><i>5</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (! (Y TRUE)))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>5</i></b>] ((! (Y TRUE)) | <b><i>(R)</i></b>))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((OT(5,5,( ( (P) and ( ( Y ( not (P) ) ) or FTP ) ) and ( not (R) ) ))) => (OT(5-1,0,( FTP or (R) )))))",
            "diagramVariables": "TC = <b><i>(P)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(P)</i></b> is true and any point in the interval where <b><i>(P)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg"
        },
        "_id": "0ff0ac70-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "AP-003b",
        "parent_reqid": "",
        "project": "LM_AUTOPILOT",
        "rationale": "The roll hold reference shall be set to zero if the actual rollangle is less than 6 degrees, at the time of roll hold engagement.",
        "fulltext": "In rollhold mode RollHoldReference shall immediately satisfy abs(rollangle)<6 => rollholdreference = 0",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs",
                    "rollangle",
                    "rollholdreference"
                ],
                "modes": [
                    "rollhold"
                ]
            },
            "scope_mode": "rollhold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollHoldReference",
            "componentTextRange": [
                17,
                33
            ],
            "timingTextRange": [
                41,
                51
            ],
            "post_condition": "(abs ( rollangle ) < 6 => rollholdreference = 0)",
            "responseTextRange": [
                53,
                101
            ],
            "ft": "(G ((!Fin_<b><i>rollhold</i></b>) | (Fin_<b><i>rollhold</i></b> & (X ((F (Lin_<b><i>rollhold</i></b> | LAST)) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>))))) & (<b><i>rollhold</i></b> -> ((F (Lin_<b><i>rollhold</i></b> | LAST)) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>))",
            "pt": "(H ((Lin_<b><i>rollhold</i></b> & (!FTP)) -> (Y ((Fin_<b><i>rollhold</i></b> -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) S ((Fin_<b><i>rollhold</i></b> -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) & Fin_<b><i>rollhold</i></b>))))) & (((!Lin_<b><i>rollhold</i></b>) S ((!Lin_<b><i>rollhold</i></b>) & Fin_<b><i>rollhold</i></b>)) -> ((Fin_<b><i>rollhold</i></b> -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) S ((Fin_<b><i>rollhold</i></b> -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) & Fin_<b><i>rollhold</i></b>)))",
            "ftExpanded": "(G ((!((! <b><i>rollhold</i></b>) & X <b><i>rollhold</i></b>)) | (((! <b><i>rollhold</i></b>) & X <b><i>rollhold</i></b>) & (X ((F ((<b><i>rollhold</i></b> & X (! <b><i>rollhold</i></b>)) | LAST)) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>))))) & (<b><i>rollhold</i></b> -> ((F ((<b><i>rollhold</i></b> & X (! <b><i>rollhold</i></b>)) | LAST)) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>))",
            "ptExpanded": "(H ((((! <b><i>rollhold</i></b>) & (Y <b><i>rollhold</i></b>)) & (!(! Y TRUE))) -> (Y (((<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) S (((<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) & (<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>)))))))) & (((!((! <b><i>rollhold</i></b>) & (Y <b><i>rollhold</i></b>))) S ((!((! <b><i>rollhold</i></b>) & (Y <b><i>rollhold</i></b>))) & (<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))))) -> (((<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) S (((<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))) -> <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>) & (<b><i>rollhold</i></b> & ((! Y TRUE) | (Y ! <b><i>rollhold</i></b>))))))",
            "component": "<b><i>RollHoldReference</i></b>",
            "CoCoSpecCode": "(H(((( not rollhold) and (pre ( rollhold ))) and ( not FTP())) -> (pre (S( (((rollhold and (FTP() or (pre (  not rollhold )))) -> (abs ( rollangle ) < 6 -> rollholdreference = 0)) and (rollhold and (FTP() or (pre (  not rollhold ))))), ((rollhold and (FTP() or (pre (  not rollhold )))) -> (abs ( rollangle ) < 6 -> rollholdreference = 0)) ))))) and ((S( (( not (( not rollhold) and (pre ( rollhold )))) and (rollhold and (FTP() or (pre (  not rollhold ))))), ( not (( not rollhold) and (pre ( rollhold )))) )) -> (S( (((rollhold and (FTP() or (pre (  not rollhold )))) -> (abs ( rollangle ) < 6 -> rollholdreference = 0)) and (rollhold and (FTP() or (pre (  not rollhold ))))), ((rollhold and (FTP() or (pre (  not rollhold )))) -> (abs ( rollangle ) < 6 -> rollholdreference = 0)) )))",
            "diagramVariables": "M = <b><i>rollhold</i></b>, Response = <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollHoldReference</i></b>\" shall satisfy <b><i>(abs ( rollangle ) < 6 -> rollholdreference = 0)</i></b>. This is only enforced when \"<b><i>RollHoldReference</i></b>\" is in mode <b><i>rollhold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "0ff0d380-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when not in m mode when p the sw shall always satisfy r",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "notin"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p",
                    "r"
                ],
                "modes": [
                    "m"
                ]
            },
            "scope_mode": "m",
            "scopeTextRange": [
                0,
                17
            ],
            "regular_condition": "(p)",
            "qualifier_word": "when",
            "pre_condition": "(p)",
            "conditionTextRange": [
                19,
                24
            ],
            "component_name": "sw",
            "componentTextRange": [
                26,
                31
            ],
            "timingTextRange": [
                39,
                44
            ],
            "post_condition": "(r)",
            "responseTextRange": [
                46,
                54
            ],
            "ft": "((LAST V ((! (FNin_<b><i>m</i></b> & (! LAST))) | (X (((LNin_<b><i>m</i></b> | LAST) V (((! <b><i>(p)</i></b>) & ((! LAST) & ((X <b><i>(p)</i></b>) & (! (LNin_<b><i>m</i></b> | LAST))))) -> ((X ((LNin_<b><i>m</i></b> | LAST) V <b><i>(r)</i></b>)) & (! (LNin_<b><i>m</i></b> | LAST))))) & (<b><i>(p)</i></b> -> ((LNin_<b><i>m</i></b> | LAST) V <b><i>(r)</i></b>)))))) & ((! <b><i>m</i></b>) -> (((LNin_<b><i>m</i></b> | LAST) V (((! <b><i>(p)</i></b>) & ((! LAST) & ((X <b><i>(p)</i></b>) & (! (LNin_<b><i>m</i></b> | LAST))))) -> ((X ((LNin_<b><i>m</i></b> | LAST) V <b><i>(r)</i></b>)) & (! (LNin_<b><i>m</i></b> | LAST))))) & (<b><i>(p)</i></b> -> ((LNin_<b><i>m</i></b> | LAST) V <b><i>(r)</i></b>)))))",
            "pt": "((H ((LNin_<b><i>m</i></b> & (! FTP)) -> (Y ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & FNin_<b><i>m</i></b>)) | <b><i>(r)</i></b>) S ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & FNin_<b><i>m</i></b>)) | <b><i>(r)</i></b>) & FNin_<b><i>m</i></b>))))) & (((! LNin_<b><i>m</i></b>) S ((! LNin_<b><i>m</i></b>) & FNin_<b><i>m</i></b>)) -> ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & FNin_<b><i>m</i></b>)) | <b><i>(r)</i></b>) S ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & FNin_<b><i>m</i></b>)) | <b><i>(r)</i></b>) & FNin_<b><i>m</i></b>))))",
            "ftExpanded": "((LAST V ((! (((<b><i>m</i></b> & (! LAST)) & (X (! <b><i>m</i></b>))) & (! LAST))) | (X ((((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST) V (((! <b><i>(p)</i></b>) & ((! LAST) & ((X <b><i>(p)</i></b>) & (! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST))))) -> ((X (((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST) V <b><i>(r)</i></b>)) & (! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST))))) & (<b><i>(p)</i></b> -> (((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST) V <b><i>(r)</i></b>)))))) & ((! <b><i>m</i></b>) -> ((((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST) V (((! <b><i>(p)</i></b>) & ((! LAST) & ((X <b><i>(p)</i></b>) & (! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST))))) -> ((X (((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST) V <b><i>(r)</i></b>)) & (! ((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST))))) & (<b><i>(p)</i></b> -> (((((! <b><i>m</i></b>) & (! LAST)) & (X <b><i>m</i></b>)) | LAST) V <b><i>(r)</i></b>)))))",
            "ptExpanded": "((H (((<b><i>m</i></b> & (Y (! <b><i>m</i></b>))) & (Y TRUE)) -> (Y ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>))))) | <b><i>(r)</i></b>) S ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>))))) | <b><i>(r)</i></b>) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>)))))))) & (((! (<b><i>m</i></b> & (Y (! <b><i>m</i></b>)))) S ((! (<b><i>m</i></b> & (Y (! <b><i>m</i></b>)))) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>))))) -> ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>))))) | <b><i>(r)</i></b>) S ((((! <b><i>(p)</i></b>) S ((! <b><i>(p)</i></b>) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>))))) | <b><i>(r)</i></b>) & ((! <b><i>m</i></b>) & ((! (Y TRUE)) | (Y <b><i>m</i></b>)))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((m and (pre ( not m))) and ( not FTP)) => (pre (SI( (( not m) and (FTP or (pre (m)))), ((SI( (( not m) and (FTP or (pre (m)))), ( not (p)) )) or (r)) ))))) and ((SI( (( not m) and (FTP or (pre (m)))), ( not (m and (pre ( not m)))) )) => (SI( (( not m) and (FTP or (pre (m)))), ((SI( (( not m) and (FTP or (pre (m)))), ( not (p)) )) or (r)) ))))",
            "diagramVariables": "M = <b><i>m</i></b>, TC = <b><i>(p)</i></b>, Response = <b><i>(r)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>m</i></b> does NOT hold.\nTRIGGER: first point in the interval if <b><i>(p)</i></b> is true and any point in the interval where <b><i>(p)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/notin_regular_always_satisfaction.svg"
        },
        "_id": "0ff121a0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "TEST-TCND-N",
        "parent_reqid": "",
        "project": "TEST",
        "rationale": "",
        "comments": "",
        "fulltext": "when occurred(7,persisted(2,fault)) the sw shall immediately satisfy q",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "occurred",
                    "persisted",
                    "fault",
                    "q"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "(occurred ( 7 , persisted ( 2 , fault ) ))",
            "regular_condition": "(occurred ( 7 , persisted ( 2 , fault ) ))",
            "conditionTextRange": [
                0,
                34
            ],
            "component_name": "sw",
            "componentTextRange": [
                36,
                41
            ],
            "timingTextRange": [
                49,
                59
            ],
            "post_condition": "(q)",
            "responseTextRange": [
                61,
                69
            ],
            "diagramVariables": "TC = <b><i>(occurred ( 7 , persisted ( 2 , fault ) ))</i></b>, Response = <b><i>(q)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(occurred ( 7 , persisted ( 2 , fault ) ))</i></b> is true and any point in the interval where <b><i>(occurred ( 7 , persisted ( 2 , fault ) ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "regular_condition_unexp_pt": "(((! FTP) S ((H[<=2] fault) & (H[<2] (! FTP)))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! FTP)))))",
            "regular_condition_unexp_ft": "occurred(7,persisted(2,fault))",
            "regular_condition_SMV_pt": "(((! (!(Y TRUE))) S ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))))",
            "regular_condition_SMV_ft": "occurred(7,persisted(2,fault))",
            "regular_condition_coco": "((S( ((HT(2,0,fault)) and (HT(1,0,( not FTP)))), ( not FTP) )) and (OT(7,0,((HT(2,0,fault)) and (HT(1,0,( not FTP)))))))",
            "post_condition_unexp_pt": "q",
            "post_condition_unexp_ft": "q",
            "post_condition_SMV_pt": "q",
            "post_condition_SMV_ft": "q",
            "post_condition_coco": "q",
            "ft": "((LAST V (((! <b><i>occurred(7,persisted(2,fault))</i></b>) & ((! LAST) & (X <b><i>occurred(7,persisted(2,fault))</i></b>))) -> (X <b><i>q</i></b>))) & (<b><i>occurred(7,persisted(2,fault))</i></b> -> <b><i>q</i></b>))",
            "pt": "(H ((<b><i>(((! FTP) S ((H[<=2] fault) & (H[<2] (! FTP)))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! FTP)))))</i></b> & ((Y (! <b><i>(((! FTP) S ((H[<=2] fault) & (H[<2] (! FTP)))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! FTP)))))</i></b>)) | FTP)) -> <b><i>q</i></b>))",
            "ptExpanded": "(H (((((! (!(Y TRUE))) S ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! (!(Y TRUE))))))) & ((Y (! (((! (!(Y TRUE))) S ((H[<=2] fault) & (H[<2] (! (!(Y TRUE)))))) & (O[<=7] ((H[<=2] fault) & (H[<2] (! (!(Y TRUE))))))))) | (! (Y TRUE)))) -> q))",
            "ftExpanded": "((LAST V (((! occurred(7,persisted(2,fault))) & ((! LAST) & (X occurred(7,persisted(2,fault))))) -> (X q))) & (occurred(7,persisted(2,fault)) -> q))",
            "CoCoSpecCode": "(H((((S( ((HT(2,0,fault)) and (HT(1,0,( not FTP)))), ( not FTP) )) and (OT(7,0,((HT(2,0,fault)) and (HT(1,0,( not FTP))))))) and ((pre ( not ((S( ((HT(2,0,fault)) and (HT(1,0,( not FTP)))), ( not FTP) )) and (OT(7,0,((HT(2,0,fault)) and (HT(1,0,( not FTP))))))))) or FTP)) => q))",
            "component": "<b><i>sw</i></b>"
        },
        "_id": "0ff196d0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "LM-003",
        "parent_reqid": "",
        "project": "LiquidMixer",
        "rationale": "",
        "comments": "",
        "fulltext": "when liquid_level_1 the liquid_mixer shall until emergency_button satisfy if ! liquid_level_2 then valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1",
                    "emergency_button",
                    "liquid_level_2",
                    "valve_1"
                ],
                "modes": []
            },
            "qualifier_word": "when",
            "pre_condition": "liquid_level_1",
            "regular_condition": "liquid_level_1",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "stop_condition": "(emergency_button)",
            "timingTextRange": [
                43,
                64
            ],
            "post_condition": "(! liquid_level_2 => valve_1)",
            "responseTextRange": [
                66,
                105
            ],
            "regular_condition_coco": "liquid_level_1",
            "ft": "((LAST V (((! <b><i>liquid_level_1</i></b>) & ((! LAST) & (X <b><i>liquid_level_1</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>liquid_level_1</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "pt": "(H ((H (! <b><i>liquid_level_1</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>liquid_level_1</i></b> & ((Y (! <b><i>liquid_level_1</i></b>)) | FTP)))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>liquid_level_1</i></b>) & ((! LAST) & (X <b><i>liquid_level_1</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>liquid_level_1</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>liquid_level_1</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>liquid_level_1</i></b> & ((Y (! <b><i>liquid_level_1</i></b>)) | (! (Y TRUE)))))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not liquid_level_1)) or ((SI( (liquid_level_1 and ((pre ( not liquid_level_1)) or FTP)), ( not (emergency_button)) )) => (! liquid_level_2 => valve_1))))",
            "diagramVariables": "TC = <b><i>liquid_level_1</i></b>, SC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! liquid_level_2 => valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>liquid_level_1</i></b> is true and any point in the interval where <b><i>liquid_level_1</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "0ff1bde0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "UAV-1",
        "parent_reqid": "",
        "project": "AOS",
        "rationale": "The battery charge must remain within limits.",
        "comments": "BL UL",
        "fulltext": "In flight mode, the battery shall always satisfy voltage > 9",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "voltage"
                ],
                "modes": [
                    "flight"
                ]
            },
            "scope_mode": "flight",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "battery",
            "componentTextRange": [
                16,
                26
            ],
            "timingTextRange": [
                34,
                39
            ],
            "post_condition": "(voltage > 9)",
            "responseTextRange": [
                41,
                59
            ],
            "ft": "(LAST V (<b><i>flight</i></b> -> <b><i>(voltage > 9)</i></b>))",
            "pt": "(H (<b><i>flight</i></b> -> <b><i>(voltage > 9)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>flight</i></b> -> <b><i>(voltage > 9)</i></b>))",
            "ptExpanded": "(H (<b><i>flight</i></b> -> <b><i>(voltage > 9)</i></b>))",
            "component": "<b><i>battery</i></b>",
            "CoCoSpecCode": "(H(flight => (voltage > 9)))",
            "diagramVariables": "M = <b><i>flight</i></b>, Response = <b><i>(voltage > 9)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>flight</i></b> holds; interval cannot span to the end of the execution. \nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "0ff1e4f0-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G002",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy (g != chargepos => g= hottest(H))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "g",
                    "chargepos",
                    "hottest",
                    "H"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(( g != chargepos => g = hottest ( H ) ))",
            "responseTextRange": [
                44,
                84
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>) S ((! <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>) S ((! <b><i>(( g != chargepos -> g = hottest ( H ) ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (( g not= chargepos => g = hottest ( H ) ))) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(( g != chargepos => g = hottest ( H ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0ff20c00-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G001",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy (recharge => g =chargePos) & (g =chargePos => recharge )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "recharge",
                    "g",
                    "chargePos"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(( recharge => g = chargePos ) & ( g = chargePos => recharge ))",
            "responseTextRange": [
                44,
                107
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>) S ((! <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>) S ((! <b><i>(( recharge -> g = chargePos ) & ( g = chargePos -> recharge ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (( recharge => g = chargePos ) and ( g = chargePos => recharge ))) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(( recharge => g = chargePos ) & ( g = chargePos => recharge ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0ff25a20-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G003",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy !obstacle(g)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "obstacle",
                    "g"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(! obstacle ( g ))",
            "responseTextRange": [
                44,
                63
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(! obstacle ( g ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(! obstacle ( g ))</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(! obstacle ( g ))</i></b>) S ((! <b><i>(! obstacle ( g ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(! obstacle ( g ))</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(! obstacle ( g ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(! obstacle ( g ))</i></b>) S ((! <b><i>(! obstacle ( g ))</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (not obstacle ( g ))) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(! obstacle ( g ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0ff2a840-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G004",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy (atGoal & s0 != chargePos) => GoalSet = GoalSetMinusSo",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "atGoal",
                    "s0",
                    "chargePos",
                    "GoalSet",
                    "GoalSetMinusSo"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(( atGoal & s0 != chargePos ) => GoalSet = GoalSetMinusSo)",
            "responseTextRange": [
                44,
                105
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>) S ((! <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>) S ((! <b><i>(( atGoal & s0 != chargePos ) -> GoalSet = GoalSetMinusSo)</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (( atGoal and s0 not= chargePos ) => GoalSet = GoalSetMinusSo)) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(( atGoal & s0 != chargePos ) => GoalSet = GoalSetMinusSo)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0ff2cf50-e51f-11eb-84c8-cfaa41967b45"
    },
    {
        "reqid": "G005",
        "parent_reqid": "",
        "project": "FOL_Rover",
        "rationale": "",
        "fulltext": "when assumptions goalAgent shall eventually satisfy GoalSet = goalsetWithChargePos",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "assumptions",
                    "GoalSet",
                    "goalsetWithChargePos"
                ],
                "modes": []
            },
            "regular_condition": "(assumptions)",
            "qualifier_word": "when",
            "pre_condition": "(assumptions)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "goalAgent",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(GoalSet = goalsetWithChargePos)",
            "responseTextRange": [
                44,
                81
            ],
            "ft": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(GoalSet = goalsetWithChargePos)</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(GoalSet = goalsetWithChargePos)</i></b>)))",
            "pt": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(GoalSet = goalsetWithChargePos)</i></b>) S ((! <b><i>(GoalSet = goalsetWithChargePos)</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(assumptions)</i></b>) & ((! LAST) & (X <b><i>(assumptions)</i></b>))) -> (X ((! LAST) U <b><i>(GoalSet = goalsetWithChargePos)</i></b>)))) & (<b><i>(assumptions)</i></b> -> ((! LAST) U <b><i>(GoalSet = goalsetWithChargePos)</i></b>)))",
            "ptExpanded": "((H (! <b><i>(assumptions)</i></b>)) | (! ((! <b><i>(GoalSet = goalsetWithChargePos)</i></b>) S ((! <b><i>(GoalSet = goalsetWithChargePos)</i></b>) & (<b><i>(assumptions)</i></b> & ((Y (! <b><i>(assumptions)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>goalAgent</i></b>",
            "CoCoSpecCode": "((H( not (assumptions))) or ( not (SI( ((assumptions) and ((pre ( not (assumptions))) or FTP)), ( not (GoalSet = goalsetWithChargePos)) ))))",
            "diagramVariables": "TC = <b><i>(assumptions)</i></b>, Response = <b><i>(GoalSet = goalsetWithChargePos)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assumptions)</i></b> is true and any point in the interval where <b><i>(assumptions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "0ff31d70-e51f-11eb-84c8-cfaa41967b45"
    }
]