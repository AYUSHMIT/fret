[
    {
        "reqid": "H1",
        "parent_reqid": "",
        "project": "Hanfor",
        "rationale": "",
        "comments": "",
        "fulltext": "if B component shall within 5 seconds satisfy C",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "B",
                    "C"
                ],
                "modes": []
            },
            "regular_condition": "(B)",
            "qualifier_word": "if",
            "pre_condition": "(B)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "component",
            "componentTextRange": [
                5,
                13
            ],
            "duration": [
                "5"
            ],
            "timingTextRange": [
                21,
                36
            ],
            "post_condition": "(C)",
            "responseTextRange": [
                38,
                46
            ],
            "ft": "((LAST V (((! <b><i>(B)</i></b>) & ((! LAST) & (X <b><i>(B)</i></b>))) -> (X ((F[<=<b><i>5</i></b>] <b><i>(C)</i></b>) | (F[<<b><i>5</i></b>] LAST))))) & (<b><i>(B)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(C)</i></b>) | (F[<<b><i>5</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>5</i></b>] ((<b><i>(B)</i></b> & ((Y (! <b><i>(B)</i></b>)) | FTP)) & (! <b><i>(C)</i></b>))) -> (O[<<b><i>5</i></b>] (FTP | <b><i>(C)</i></b>))))",
            "ftExpanded": "((LAST V (((! <b><i>(B)</i></b>) & ((! LAST) & (X <b><i>(B)</i></b>))) -> (X ((F[<=<b><i>5</i></b>] <b><i>(C)</i></b>) | (F[<<b><i>5</i></b>] LAST))))) & (<b><i>(B)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(C)</i></b>) | (F[<<b><i>5</i></b>] LAST))))",
            "ptExpanded": "(H ((O[=<b><i>5</i></b>] ((<b><i>(B)</i></b> & ((Y (! <b><i>(B)</i></b>)) | (! (Y TRUE)))) & (! <b><i>(C)</i></b>))) -> (O[<<b><i>5</i></b>] ((! (Y TRUE)) | <b><i>(C)</i></b>))))",
            "component": "<b><i>component</i></b>",
            "CoCoSpecCode": "(H((OT(5,5,( ( (B) and ( ( Y ( not (B) ) ) or FTP ) ) and ( not (C) ) ))) => (OT(5-1,0,( FTP or (C) )))))",
            "diagramVariables": "TC = <b><i>(B)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(C)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(B)</i></b> is true and any point in the interval where <b><i>(B)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg"
        },
        "_id": "a45561b0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "Req2",
        "parent_reqid": "",
        "project": "CMonitors",
        "rationale": "",
        "comments": "",
        "fulltext": "if A component shall for 2 seconds satisfy !C",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "A",
                    "C"
                ],
                "modes": []
            },
            "regular_condition": "(A)",
            "qualifier_word": "if",
            "pre_condition": "(A)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "component",
            "componentTextRange": [
                5,
                13
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                21,
                33
            ],
            "post_condition": "(! C)",
            "responseTextRange": [
                35,
                44
            ],
            "ft": "((LAST V (((! <b><i>(A)</i></b>) & ((! LAST) & (X <b><i>(A)</i></b>))) -> (X ((G[<=<b><i>2</i></b>] <b><i>(! C)</i></b>) | (LAST V <b><i>(! C)</i></b>))))) & (<b><i>(A)</i></b> -> ((G[<=<b><i>2</i></b>] <b><i>(! C)</i></b>) | (LAST V <b><i>(! C)</i></b>))))",
            "pt": "(H ((O[<=<b><i>2</i></b>] (<b><i>(A)</i></b> & ((Y (! <b><i>(A)</i></b>)) | FTP))) -> ((H (! <b><i>(A)</i></b>)) | <b><i>(! C)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(A)</i></b>) & ((! LAST) & (X <b><i>(A)</i></b>))) -> (X ((G[<=<b><i>2</i></b>] <b><i>(! C)</i></b>) | (LAST V <b><i>(! C)</i></b>))))) & (<b><i>(A)</i></b> -> ((G[<=<b><i>2</i></b>] <b><i>(! C)</i></b>) | (LAST V <b><i>(! C)</i></b>))))",
            "ptExpanded": "(H ((O[<=<b><i>2</i></b>] (<b><i>(A)</i></b> & ((Y (! <b><i>(A)</i></b>)) | (! (Y TRUE))))) -> ((H (! <b><i>(A)</i></b>)) | <b><i>(! C)</i></b>)))",
            "component": "<b><i>component</i></b>",
            "CoCoSpecCode": "(H((OT(2,0,( (A) and ( ( Y ( not (A) ) ) or FTP ) ))) => ((H( not (A))) or (not C))))",
            "diagramVariables": "TC = <b><i>(A)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(! C)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(A)</i></b> is true and any point in the interval where <b><i>(A)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>2</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>2</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>2</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg"
        },
        "_id": "a455d6e0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "BehnazOne",
        "parent_reqid": "",
        "project": "CMonitors",
        "rationale": "",
        "comments": "",
        "fulltext": "if ((param_is_short & (((param_value_short * 1048576) >= upper_param_limit) | ((param_value_short * 1048576) <= lower_param_limit))) | (!param_is_short & (((param_value_long * 1048576) >= upper_param_limit) | ((param_value_long * 1048576) <= lower_param_limit)))) RTSA shall immediately satisfy envelope_issue ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "param_is_short",
                    "param_value_short",
                    "upper_param_limit",
                    "lower_param_limit",
                    "param_value_long",
                    "envelope_issue"
                ],
                "modes": []
            },
            "regular_condition": "(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))",
            "qualifier_word": "if",
            "pre_condition": "(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))",
            "conditionTextRange": [
                0,
                262
            ],
            "component_name": "RTSA",
            "componentTextRange": [
                264,
                267
            ],
            "timingTextRange": [
                275,
                285
            ],
            "post_condition": "(envelope_issue)",
            "responseTextRange": [
                287,
                308
            ],
            "ft": "((LAST V (((! <b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b>) & ((! LAST) & (X <b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b>))) -> (X <b><i>(envelope_issue)</i></b>))) & (<b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b> -> <b><i>(envelope_issue)</i></b>))",
            "pt": "(H ((<b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b> & ((Y (! <b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b>)) | FTP)) -> <b><i>(envelope_issue)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b>) & ((! LAST) & (X <b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b>))) -> (X <b><i>(envelope_issue)</i></b>))) & (<b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b> -> <b><i>(envelope_issue)</i></b>))",
            "ptExpanded": "(H ((<b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b> & ((Y (! <b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b>)) | (! (Y TRUE)))) -> <b><i>(envelope_issue)</i></b>))",
            "component": "<b><i>RTSA</i></b>",
            "CoCoSpecCode": "(H(((( ( param_is_short and ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) or ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) or ( not param_is_short and ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) or ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) )) and ((pre ( not (( ( param_is_short and ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) or ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) or ( not param_is_short and ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) or ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) )))) or FTP)) => (envelope_issue)))",
            "diagramVariables": "TC = <b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b>, Response = <b><i>(envelope_issue)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b> is true and any point in the interval where <b><i>(( ( param_is_short & ( ( ( param_value_short * 1048576 ) >= upper_param_limit ) | ( ( param_value_short * 1048576 ) <= lower_param_limit ) ) ) | ( ! param_is_short & ( ( ( param_value_long * 1048576 ) >= upper_param_limit ) | ( ( param_value_long * 1048576 ) <= lower_param_limit ) ) ) ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "a455fdf0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "H2",
        "parent_reqid": "",
        "project": "Hanfor",
        "rationale": "",
        "comments": "",
        "fulltext": "if A component shall for 2 seconds satisfy !C",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "A",
                    "C"
                ],
                "modes": []
            },
            "regular_condition": "(A)",
            "qualifier_word": "if",
            "pre_condition": "(A)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "component",
            "componentTextRange": [
                5,
                13
            ],
            "duration": [
                "2"
            ],
            "timingTextRange": [
                21,
                33
            ],
            "post_condition": "(! C)",
            "responseTextRange": [
                35,
                44
            ],
            "ft": "((LAST V (((! <b><i>(A)</i></b>) & ((! LAST) & (X <b><i>(A)</i></b>))) -> (X ((G[<=<b><i>2</i></b>] <b><i>(! C)</i></b>) | (LAST V <b><i>(! C)</i></b>))))) & (<b><i>(A)</i></b> -> ((G[<=<b><i>2</i></b>] <b><i>(! C)</i></b>) | (LAST V <b><i>(! C)</i></b>))))",
            "pt": "(H ((O[<=<b><i>2</i></b>] (<b><i>(A)</i></b> & ((Y (! <b><i>(A)</i></b>)) | FTP))) -> ((H (! <b><i>(A)</i></b>)) | <b><i>(! C)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(A)</i></b>) & ((! LAST) & (X <b><i>(A)</i></b>))) -> (X ((G[<=<b><i>2</i></b>] <b><i>(! C)</i></b>) | (LAST V <b><i>(! C)</i></b>))))) & (<b><i>(A)</i></b> -> ((G[<=<b><i>2</i></b>] <b><i>(! C)</i></b>) | (LAST V <b><i>(! C)</i></b>))))",
            "ptExpanded": "(H ((O[<=<b><i>2</i></b>] (<b><i>(A)</i></b> & ((Y (! <b><i>(A)</i></b>)) | (! (Y TRUE))))) -> ((H (! <b><i>(A)</i></b>)) | <b><i>(! C)</i></b>)))",
            "component": "<b><i>component</i></b>",
            "CoCoSpecCode": "(H((OT(2,0,( (A) and ( ( Y ( not (A) ) ) or FTP ) ))) => ((H( not (A))) or (not C))))",
            "diagramVariables": "TC = <b><i>(A)</i></b>,  n = <b><i>2</i></b>, Response = <b><i>(! C)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(A)</i></b> is true and any point in the interval where <b><i>(A)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>2</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>2</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>2</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg"
        },
        "_id": "a4564c10-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "exitEventually",
        "parent_reqid": "",
        "project": "reqsForPVS",
        "rationale": "If an aircraft enters a zone eventually it reaches exit zone",
        "comments": "ExitEventually: LEMMA FORALL (s:State, i: upto(N)): EXISTS (t: nnreal): s`time > t AND s`zoneStatus(i) = EXIT",
        "fulltext": "if (! zoneStatus_aircraft1 = none) the aircraft1 shall eventually satisfy zoneStatus_aircraft1 = exit",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "zoneStatus_aircraft1",
                    "none",
                    "exit"
                ],
                "modes": []
            },
            "regular_condition": "(( ! zoneStatus_aircraft1 = none ))",
            "qualifier_word": "if",
            "pre_condition": "(( ! zoneStatus_aircraft1 = none ))",
            "conditionTextRange": [
                0,
                33
            ],
            "component_name": "aircraft1",
            "componentTextRange": [
                35,
                47
            ],
            "timingTextRange": [
                55,
                64
            ],
            "post_condition": "(zoneStatus_aircraft1 = exit)",
            "responseTextRange": [
                66,
                100
            ],
            "ft": "((LAST V (((! <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b>) & ((! LAST) & (X <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b>))) -> (X ((! LAST) U <b><i>(zoneStatus_aircraft1 = exit)</i></b>)))) & (<b><i>(( ! zoneStatus_aircraft1 = none ))</i></b> -> ((! LAST) U <b><i>(zoneStatus_aircraft1 = exit)</i></b>)))",
            "pt": "((H (! <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b>)) | (! ((! <b><i>(zoneStatus_aircraft1 = exit)</i></b>) S ((! <b><i>(zoneStatus_aircraft1 = exit)</i></b>) & (<b><i>(( ! zoneStatus_aircraft1 = none ))</i></b> & ((Y (! <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b>) & ((! LAST) & (X <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b>))) -> (X ((! LAST) U <b><i>(zoneStatus_aircraft1 = exit)</i></b>)))) & (<b><i>(( ! zoneStatus_aircraft1 = none ))</i></b> -> ((! LAST) U <b><i>(zoneStatus_aircraft1 = exit)</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b>)) | (! ((! <b><i>(zoneStatus_aircraft1 = exit)</i></b>) S ((! <b><i>(zoneStatus_aircraft1 = exit)</i></b>) & (<b><i>(( ! zoneStatus_aircraft1 = none ))</i></b> & ((Y (! <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>aircraft1</i></b>",
            "CoCoSpecCode": "((H( not (( not zoneStatus_aircraft1 = none )))) or ( not (SI( ((( not zoneStatus_aircraft1 = none )) and ((pre ( not (( not zoneStatus_aircraft1 = none )))) or FTP)), ( not (zoneStatus_aircraft1 = exit)) ))))",
            "diagramVariables": "TC = <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b>, Response = <b><i>(zoneStatus_aircraft1 = exit)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b> is true and any point in the interval where <b><i>(( ! zoneStatus_aircraft1 = none ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "a4567320-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "scheduleAlways",
        "parent_reqid": "",
        "project": "reqsForPVS",
        "rationale": "A schedule is always computed",
        "comments": "scheduleAlways(s:State): bool = FORALL (i: upto(N)) : s`zoneStatus(i) = ENTRY IMPLIES s`schedTime(i) > 0 AND s`schedUpdate(i) = FALSE",
        "fulltext": "component shall always satisfy $forAll_iupto_N => ((zoneStatus(i,s) = ENTRY) => schedTime(i,s)>0 & ! schedUpdate(i,s))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "forAll_iupto_N",
                    "zoneStatus",
                    "i",
                    "s",
                    "ENTRY",
                    "schedTime",
                    "schedUpdate"
                ],
                "modes": []
            },
            "component_name": "component",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(forAll_iupto_N => ( ( zoneStatus ( i , s ) = ENTRY ) => schedTime ( i , s ) > 0 & ! schedUpdate ( i , s ) ))",
            "responseTextRange": [
                23,
                117
            ],
            "ft": "(LAST V <b><i>(forAll_iupto_N -> ( ( zoneStatus ( i , s ) = ENTRY ) -> schedTime ( i , s ) > 0 & ! schedUpdate ( i , s ) ))</i></b>)",
            "pt": "(H <b><i>(forAll_iupto_N -> ( ( zoneStatus ( i , s ) = ENTRY ) -> schedTime ( i , s ) > 0 & ! schedUpdate ( i , s ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(forAll_iupto_N -> ( ( zoneStatus ( i , s ) = ENTRY ) -> schedTime ( i , s ) > 0 & ! schedUpdate ( i , s ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(forAll_iupto_N -> ( ( zoneStatus ( i , s ) = ENTRY ) -> schedTime ( i , s ) > 0 & ! schedUpdate ( i , s ) ))</i></b>)",
            "component": "<b><i>component</i></b>",
            "CoCoSpecCode": "(H((forAll_iupto_N => ( ( zoneStatus ( i , s ) = ENTRY ) => schedTime ( i , s ) > 0 and not schedUpdate ( i , s ) ))))",
            "diagramVariables": "Response = <b><i>(forAll_iupto_N => ( ( zoneStatus ( i , s ) = ENTRY ) => schedTime ( i , s ) > 0 & ! schedUpdate ( i , s ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4569a30-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "testWithKhanh",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "comments": "",
        "fulltext": "\"this is a test\"",
        "semantics": {
            "type": "freeForm",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "action",
            "variables": {
                "regular": [],
                "modes": []
            },
            "ft": "Unhandled.",
            "description": "FRET only speaks FRETish but as a courtesy will save this requirement. "
        },
        "_id": "a4570f60-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-012",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint satisfy ! stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "stirring_motor"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! stirring_motor)",
            "responseTextRange": [
                67,
                90
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! stirring_motor)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! stirring_motor)</i></b>))))",
            "pt": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP))) -> (<b><i>(! stirring_motor)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! stirring_motor)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! stirring_motor)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! stirring_motor)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((emergency_button) and ((pre ( not (emergency_button))) or FTP))) => ((not stirring_motor) or FTP)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a4575d80-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-005",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached occurs, the 60 sec timer shall start.",
        "fulltext": "when liquid_level_2 the liquid_mixer shall at the next timepoint satisfy timer_60sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "timer_60sec_start"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_2)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                63
            ],
            "post_condition": "(timer_60sec_start)",
            "responseTextRange": [
                65,
                89
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X (LAST | (X <b><i>(timer_60sec_start)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> (LAST | (X <b><i>(timer_60sec_start)</i></b>))))",
            "pt": "(H ((Y (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP))) -> (<b><i>(timer_60sec_start)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X (LAST | (X <b><i>(timer_60sec_start)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> (LAST | (X <b><i>(timer_60sec_start)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(timer_60sec_start)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP))) => ((timer_60sec_start) or FTP)))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, Response = <b><i>(timer_60sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a4578490-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-002",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": " When liquid level 1 is reached occurs, the liquid mixer controller shall close valve 0",
        "fulltext": "when liquid_level_1 liquid_mixer shall at the next timepoint satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1",
                    "valve_0"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_1)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_1)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                31
            ],
            "timingTextRange": [
                39,
                59
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                61,
                77
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "pt": "(H ((Y (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | FTP))) -> (<b><i>(! valve_0)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_0)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((liquid_level_1) and ((pre ( not (liquid_level_1))) or FTP))) => ((not valve_0) or FTP)))",
            "diagramVariables": "TC = <b><i>(liquid_level_1)</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_1)</i></b> is true and any point in the interval where <b><i>(liquid_level_1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a457d2b0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "MG1-02",
        "parent_reqid": "",
        "project": "test-hackathon",
        "rationale": "",
        "fulltext": "Satellite_one shall always satisfy mass_one <=25.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mass_one"
                ],
                "modes": []
            },
            "component_name": "Satellite_one",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(mass_one <= 25.0)",
            "responseTextRange": [
                27,
                49
            ],
            "ft": "(LAST V <b><i>(mass_one <= 25.0)</i></b>)",
            "pt": "(H <b><i>(mass_one <= 25.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mass_one <= 25.0)</i></b>)",
            "ptExpanded": "(H <b><i>(mass_one <= 25.0)</i></b>)",
            "component": "<b><i>Satellite_one</i></b>",
            "CoCoSpecCode": "(H((mass_one <= 25.0)))",
            "diagramVariables": "Response = <b><i>(mass_one <= 25.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45820d0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-010",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 1.",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint satisfy ! valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_1"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                67,
                83
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "pt": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP))) -> (<b><i>(! valve_1)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_1)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((emergency_button) and ((pre ( not (emergency_button))) or FTP))) => ((not valve_1) or FTP)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a4586ef0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-007",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When 60 second timer expires occurs, the 120 sec timer shall start.",
        "fulltext": "when timer_60sec_expire the liquid_mixer shall at the next timepoint satisfy timer_120sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "timer_60sec_expire",
                    "timer_120sec_start"
                ],
                "modes": []
            },
            "regular_condition": "(timer_60sec_expire)",
            "qualifier_word": "when",
            "pre_condition": "(timer_60sec_expire)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                24,
                39
            ],
            "timingTextRange": [
                47,
                67
            ],
            "post_condition": "(timer_120sec_start)",
            "responseTextRange": [
                69,
                94
            ],
            "ft": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X (LAST | (X <b><i>(timer_120sec_start)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> (LAST | (X <b><i>(timer_120sec_start)</i></b>))))",
            "pt": "(H ((Y (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | FTP))) -> (<b><i>(timer_120sec_start)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X (LAST | (X <b><i>(timer_120sec_start)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> (LAST | (X <b><i>(timer_120sec_start)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(timer_120sec_start)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((timer_60sec_expire) and ((pre ( not (timer_60sec_expire))) or FTP))) => ((timer_120sec_start) or FTP)))",
            "diagramVariables": "TC = <b><i>(timer_60sec_expire)</i></b>, Response = <b><i>(timer_120sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timer_60sec_expire)</i></b> is true and any point in the interval where <b><i>(timer_60sec_expire)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a4589600-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "PAG1-01",
        "parent_reqid": "",
        "project": "test-hackathon",
        "rationale": "",
        "fulltext": "GUI shall satisfy customizable",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "customizable"
                ],
                "modes": []
            },
            "component_name": "GUI",
            "componentTextRange": [
                0,
                2
            ],
            "post_condition": "(customizable)",
            "responseTextRange": [
                10,
                29
            ],
            "ft": "((! LAST) U <b><i>(customizable)</i></b>)",
            "pt": "(O <b><i>(customizable)</i></b>)",
            "ftExpanded": "((! LAST) U <b><i>(customizable)</i></b>)",
            "ptExpanded": "(O <b><i>(customizable)</i></b>)",
            "component": "<b><i>GUI</i></b>",
            "CoCoSpecCode": "(O((customizable)))",
            "diagramVariables": "Response = <b><i>(customizable)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg"
        },
        "_id": "a458bd10-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G5",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_1 Infusion_Manager shall always satisfy (! System_On) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_1"
                ]
            },
            "scope_mode": "Current_System_Mode_1",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(( ! System_On ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                102
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_1 => (( not System_On ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_1</i></b>, Response = <b><i>(( ! System_On ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_1</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a4590b30-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G20",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_0 Infusion_Manager shall always satisfy Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_0"
                ]
            },
            "scope_mode": "Current_System_Mode_0",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                85
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_0 => (Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_0</i></b>, Response = <b><i>(Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_0</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a4593240-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G21",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_1 Infusion_Manager shall satisfy Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_1"
                ]
            },
            "scope_mode": "Current_System_Mode_1",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "post_condition": "(Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                48,
                78
            ],
            "ft": "((LAST V ((! (Fin_<b><i>Current_System_Mode_1</i></b> & (! LAST))) | (X ((! (Lin_<b><i>Current_System_Mode_1</i></b> | LAST)) U <b><i>(Commanded_Flow_Rate = 0)</i></b>)))) & (<b><i>Current_System_Mode_1</i></b> -> ((! (Lin_<b><i>Current_System_Mode_1</i></b> | LAST)) U <b><i>(Commanded_Flow_Rate = 0)</i></b>)))",
            "pt": "((H ((Lin_<b><i>Current_System_Mode_1</i></b> & (! FTP)) -> (Y (! ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) & Fin_<b><i>Current_System_Mode_1</i></b>)))))) & (((! Lin_<b><i>Current_System_Mode_1</i></b>) S ((! Lin_<b><i>Current_System_Mode_1</i></b>) & Fin_<b><i>Current_System_Mode_1</i></b>)) -> (! ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) & Fin_<b><i>Current_System_Mode_1</i></b>)))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>Current_System_Mode_1</i></b>) & (! LAST)) & (X <b><i>Current_System_Mode_1</i></b>)) & (! LAST))) | (X ((! (((<b><i>Current_System_Mode_1</i></b> & (! LAST)) & (X (! <b><i>Current_System_Mode_1</i></b>))) | LAST)) U <b><i>(Commanded_Flow_Rate = 0)</i></b>)))) & (<b><i>Current_System_Mode_1</i></b> -> ((! (((<b><i>Current_System_Mode_1</i></b> & (! LAST)) & (X (! <b><i>Current_System_Mode_1</i></b>))) | LAST)) U <b><i>(Commanded_Flow_Rate = 0)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>Current_System_Mode_1</i></b>) & (Y <b><i>Current_System_Mode_1</i></b>)) & (Y TRUE)) -> (Y (! ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) & (<b><i>Current_System_Mode_1</i></b> & ((! (Y TRUE)) | (Y (! <b><i>Current_System_Mode_1</i></b>)))))))))) & (((! ((! <b><i>Current_System_Mode_1</i></b>) & (Y <b><i>Current_System_Mode_1</i></b>))) S ((! ((! <b><i>Current_System_Mode_1</i></b>) & (Y <b><i>Current_System_Mode_1</i></b>))) & (<b><i>Current_System_Mode_1</i></b> & ((! (Y TRUE)) | (Y (! <b><i>Current_System_Mode_1</i></b>)))))) -> (! ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) & (<b><i>Current_System_Mode_1</i></b> & ((! (Y TRUE)) | (Y (! <b><i>Current_System_Mode_1</i></b>)))))))))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "((H(((( not Current_System_Mode_1) and (pre (Current_System_Mode_1))) and ( not FTP)) => (pre ( not (SI( (Current_System_Mode_1 and (FTP or (pre ( not Current_System_Mode_1)))), ( not (Commanded_Flow_Rate = 0)) )))))) and ((SI( (Current_System_Mode_1 and (FTP or (pre ( not Current_System_Mode_1)))), ( not (( not Current_System_Mode_1) and (pre (Current_System_Mode_1)))) )) => ( not (SI( (Current_System_Mode_1 and (FTP or (pre ( not Current_System_Mode_1)))), ( not (Commanded_Flow_Rate = 0)) )))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_1</i></b>, Response = <b><i>(Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_1</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "a4595950-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G22",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_6 Infusion_Manager shall satisfy Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_6"
                ]
            },
            "scope_mode": "Current_System_Mode_6",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "post_condition": "(Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                48,
                78
            ],
            "ft": "((LAST V ((! (Fin_<b><i>Current_System_Mode_6</i></b> & (! LAST))) | (X ((! (Lin_<b><i>Current_System_Mode_6</i></b> | LAST)) U <b><i>(Commanded_Flow_Rate = 0)</i></b>)))) & (<b><i>Current_System_Mode_6</i></b> -> ((! (Lin_<b><i>Current_System_Mode_6</i></b> | LAST)) U <b><i>(Commanded_Flow_Rate = 0)</i></b>)))",
            "pt": "((H ((Lin_<b><i>Current_System_Mode_6</i></b> & (! FTP)) -> (Y (! ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) & Fin_<b><i>Current_System_Mode_6</i></b>)))))) & (((! Lin_<b><i>Current_System_Mode_6</i></b>) S ((! Lin_<b><i>Current_System_Mode_6</i></b>) & Fin_<b><i>Current_System_Mode_6</i></b>)) -> (! ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) & Fin_<b><i>Current_System_Mode_6</i></b>)))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>Current_System_Mode_6</i></b>) & (! LAST)) & (X <b><i>Current_System_Mode_6</i></b>)) & (! LAST))) | (X ((! (((<b><i>Current_System_Mode_6</i></b> & (! LAST)) & (X (! <b><i>Current_System_Mode_6</i></b>))) | LAST)) U <b><i>(Commanded_Flow_Rate = 0)</i></b>)))) & (<b><i>Current_System_Mode_6</i></b> -> ((! (((<b><i>Current_System_Mode_6</i></b> & (! LAST)) & (X (! <b><i>Current_System_Mode_6</i></b>))) | LAST)) U <b><i>(Commanded_Flow_Rate = 0)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>Current_System_Mode_6</i></b>) & (Y <b><i>Current_System_Mode_6</i></b>)) & (Y TRUE)) -> (Y (! ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) & (<b><i>Current_System_Mode_6</i></b> & ((! (Y TRUE)) | (Y (! <b><i>Current_System_Mode_6</i></b>)))))))))) & (((! ((! <b><i>Current_System_Mode_6</i></b>) & (Y <b><i>Current_System_Mode_6</i></b>))) S ((! ((! <b><i>Current_System_Mode_6</i></b>) & (Y <b><i>Current_System_Mode_6</i></b>))) & (<b><i>Current_System_Mode_6</i></b> & ((! (Y TRUE)) | (Y (! <b><i>Current_System_Mode_6</i></b>)))))) -> (! ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = 0)</i></b>) & (<b><i>Current_System_Mode_6</i></b> & ((! (Y TRUE)) | (Y (! <b><i>Current_System_Mode_6</i></b>)))))))))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "((H(((( not Current_System_Mode_6) and (pre (Current_System_Mode_6))) and ( not FTP)) => (pre ( not (SI( (Current_System_Mode_6 and (FTP or (pre ( not Current_System_Mode_6)))), ( not (Commanded_Flow_Rate = 0)) )))))) and ((SI( (Current_System_Mode_6 and (FTP or (pre ( not Current_System_Mode_6)))), ( not (( not Current_System_Mode_6) and (pre (Current_System_Mode_6)))) )) => ( not (SI( (Current_System_Mode_6 and (FTP or (pre ( not Current_System_Mode_6)))), ( not (Commanded_Flow_Rate = 0)) )))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_6</i></b>, Response = <b><i>(Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_6</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "a459a770-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G23",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_7 Infusion_Manager shall satisfy Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": [
                    "Current_System_Mode_7"
                ]
            },
            "scope_mode": "Current_System_Mode_7",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "post_condition": "(Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                48,
                90
            ],
            "ft": "((LAST V ((! (Fin_<b><i>Current_System_Mode_7</i></b> & (! LAST))) | (X ((! (Lin_<b><i>Current_System_Mode_7</i></b> | LAST)) U <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)))) & (<b><i>Current_System_Mode_7</i></b> -> ((! (Lin_<b><i>Current_System_Mode_7</i></b> | LAST)) U <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)))",
            "pt": "((H ((Lin_<b><i>Current_System_Mode_7</i></b> & (! FTP)) -> (Y (! ((! <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>) & Fin_<b><i>Current_System_Mode_7</i></b>)))))) & (((! Lin_<b><i>Current_System_Mode_7</i></b>) S ((! Lin_<b><i>Current_System_Mode_7</i></b>) & Fin_<b><i>Current_System_Mode_7</i></b>)) -> (! ((! <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>) & Fin_<b><i>Current_System_Mode_7</i></b>)))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>Current_System_Mode_7</i></b>) & (! LAST)) & (X <b><i>Current_System_Mode_7</i></b>)) & (! LAST))) | (X ((! (((<b><i>Current_System_Mode_7</i></b> & (! LAST)) & (X (! <b><i>Current_System_Mode_7</i></b>))) | LAST)) U <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)))) & (<b><i>Current_System_Mode_7</i></b> -> ((! (((<b><i>Current_System_Mode_7</i></b> & (! LAST)) & (X (! <b><i>Current_System_Mode_7</i></b>))) | LAST)) U <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>Current_System_Mode_7</i></b>) & (Y <b><i>Current_System_Mode_7</i></b>)) & (Y TRUE)) -> (Y (! ((! <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>) & (<b><i>Current_System_Mode_7</i></b> & ((! (Y TRUE)) | (Y (! <b><i>Current_System_Mode_7</i></b>)))))))))) & (((! ((! <b><i>Current_System_Mode_7</i></b>) & (Y <b><i>Current_System_Mode_7</i></b>))) S ((! ((! <b><i>Current_System_Mode_7</i></b>) & (Y <b><i>Current_System_Mode_7</i></b>))) & (<b><i>Current_System_Mode_7</i></b> & ((! (Y TRUE)) | (Y (! <b><i>Current_System_Mode_7</i></b>)))))) -> (! ((! <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>) S ((! <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>) & (<b><i>Current_System_Mode_7</i></b> & ((! (Y TRUE)) | (Y (! <b><i>Current_System_Mode_7</i></b>)))))))))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "((H(((( not Current_System_Mode_7) and (pre (Current_System_Mode_7))) and ( not FTP)) => (pre ( not (SI( (Current_System_Mode_7 and (FTP or (pre ( not Current_System_Mode_7)))), ( not (Commanded_Flow_Rate = Flow_Rate_KVO)) )))))) and ((SI( (Current_System_Mode_7 and (FTP or (pre ( not Current_System_Mode_7)))), ( not (( not Current_System_Mode_7) and (pre (Current_System_Mode_7)))) )) => ( not (SI( (Current_System_Mode_7 and (FTP or (pre ( not Current_System_Mode_7)))), ( not (Commanded_Flow_Rate = Flow_Rate_KVO)) )))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_7</i></b>, Response = <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_7</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "a459f590-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G24",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_8 Infusion_Manager shall always satisfy Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": [
                    "Current_System_Mode_8"
                ]
            },
            "scope_mode": "Current_System_Mode_8",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                55,
                97
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_8 => (Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_8</i></b>, Response = <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_8</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a45a1ca0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g7",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 2) => (!(Current_System_Mode = 3) | !(Current_System_Mode =4))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 2 ) => ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))",
            "responseTextRange": [
                30,
                134
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 2 ) => ( not ( Current_System_Mode = 3 ) or not ( Current_System_Mode = 4 ) ))))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 2 ) => ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45a43b0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g3",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy !System_On => Current_System_Mode = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(! System_On => Current_System_Mode = 0)",
            "responseTextRange": [
                30,
                74
            ],
            "ft": "(LAST V <b><i>(! System_On -> Current_System_Mode = 0)</i></b>)",
            "pt": "(H <b><i>(! System_On -> Current_System_Mode = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(! System_On -> Current_System_Mode = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(! System_On -> Current_System_Mode = 0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((not System_On => Current_System_Mode = 0)))",
            "diagramVariables": "Response = <b><i>(! System_On => Current_System_Mode = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45a91d0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g11",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "if !Current_System_Mode = 4 Infusion_Manager shall at the next timepoint satisfy (System_On & !Patient_Bolus_Request) => !Current_System_Mode = 4",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode",
                    "System_On",
                    "Patient_Bolus_Request"
                ],
                "modes": []
            },
            "regular_condition": "(! Current_System_Mode = 4)",
            "qualifier_word": "if",
            "pre_condition": "(! Current_System_Mode = 4)",
            "conditionTextRange": [
                0,
                26
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                28,
                43
            ],
            "timingTextRange": [
                51,
                71
            ],
            "post_condition": "(( System_On & ! Patient_Bolus_Request ) => ! Current_System_Mode = 4)",
            "responseTextRange": [
                73,
                144
            ],
            "ft": "((LAST V (((! <b><i>(! Current_System_Mode = 4)</i></b>) & ((! LAST) & (X <b><i>(! Current_System_Mode = 4)</i></b>))) -> (X (LAST | (X <b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b>))))) & (<b><i>(! Current_System_Mode = 4)</i></b> -> (LAST | (X <b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b>))))",
            "pt": "(H ((Y (<b><i>(! Current_System_Mode = 4)</i></b> & ((Y (! <b><i>(! Current_System_Mode = 4)</i></b>)) | FTP))) -> (<b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(! Current_System_Mode = 4)</i></b>) & ((! LAST) & (X <b><i>(! Current_System_Mode = 4)</i></b>))) -> (X (LAST | (X <b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b>))))) & (<b><i>(! Current_System_Mode = 4)</i></b> -> (LAST | (X <b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(! Current_System_Mode = 4)</i></b> & ((Y (! <b><i>(! Current_System_Mode = 4)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((pre ((not Current_System_Mode = 4) and ((pre ( not (not Current_System_Mode = 4))) or FTP))) => ((( System_On and not Patient_Bolus_Request ) => not Current_System_Mode = 4) or FTP)))",
            "diagramVariables": "TC = <b><i>(! Current_System_Mode = 4)</i></b>, Response = <b><i>(( System_On & ! Patient_Bolus_Request ) => ! Current_System_Mode = 4)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! Current_System_Mode = 4)</i></b> is true and any point in the interval where <b><i>(! Current_System_Mode = 4)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a45ab8e0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g4",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (!System_On & Current_System_Mode < 2) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( ! System_On & Current_System_Mode < 2 ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                30,
                102
            ],
            "ft": "(LAST V <b><i>(( ! System_On & Current_System_Mode < 2 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "pt": "(H <b><i>(( ! System_On & Current_System_Mode < 2 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! System_On & Current_System_Mode < 2 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! System_On & Current_System_Mode < 2 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( not System_On and Current_System_Mode < 2 ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "Response = <b><i>(( ! System_On & Current_System_Mode < 2 ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45adff0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g0",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ((Current_System_Mode = 0 & Commanded_Flow_Rate = 0) | (Current_System_Mode = 1 & Commanded_Flow_Rate = 0) | (Current_System_Mode = 2) | (Current_System_Mode = 3) | (Current_System_Mode = 4) | (Current_System_Mode = 6 & Commanded_Flow_Rate = 0) | (Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO) | (Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))",
            "responseTextRange": [
                30,
                414
            ],
            "ft": "(LAST V <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>)",
            "pt": "(H <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( ( Current_System_Mode = 0 and Commanded_Flow_Rate = 0 ) or ( Current_System_Mode = 1 and Commanded_Flow_Rate = 0 ) or ( Current_System_Mode = 2 ) or ( Current_System_Mode = 3 ) or ( Current_System_Mode = 4 ) or ( Current_System_Mode = 6 and Commanded_Flow_Rate = 0 ) or ( Current_System_Mode = 7 and Commanded_Flow_Rate = Flow_Rate_KVO ) or ( Current_System_Mode = 8 and Commanded_Flow_Rate = Flow_Rate_KVO ) ))))",
            "diagramVariables": "Response = <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45b2e10-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g1",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall immediately satisfy System_On => (Current_System_Mode = 1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(System_On => ( Current_System_Mode = 1 ))",
            "responseTextRange": [
                35,
                80
            ],
            "ft": "<b><i>(System_On -> ( Current_System_Mode = 1 ))</i></b>",
            "pt": "(H (FTP -> <b><i>(System_On -> ( Current_System_Mode = 1 ))</i></b>))",
            "ftExpanded": "<b><i>(System_On -> ( Current_System_Mode = 1 ))</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(System_On -> ( Current_System_Mode = 1 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(FTP => (System_On => ( Current_System_Mode = 1 ))))",
            "diagramVariables": "Response = <b><i>(System_On => ( Current_System_Mode = 1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "a45b5520-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g8",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall at the next timepoint satisfy (System_On & Infusion_Cancel) => Current_System_Mode = 1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Infusion_Cancel",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                43
            ],
            "post_condition": "(( System_On & Infusion_Cancel ) => Current_System_Mode = 1)",
            "responseTextRange": [
                45,
                108
            ],
            "ft": "(LAST | (X <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode = 1)</i></b>))",
            "pt": "(H ((Y FTP) -> <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode = 1)</i></b>))",
            "ftExpanded": "(LAST | (X <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode = 1)</i></b>))",
            "ptExpanded": "(H ((Y (! (Y TRUE))) -> <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode = 1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((pre (FTP)) => (( System_On and Infusion_Cancel ) => Current_System_Mode = 1)))",
            "diagramVariables": "Response = <b><i>(( System_On & Infusion_Cancel ) => Current_System_Mode = 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg"
        },
        "_id": "a45ba340-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g5",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 4) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                30,
                101
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45bca50-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g6",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 3) => Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                30,
                113
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45c1870-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g2",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall at the next timepoint satisfy if (Current_System_Mode_pre = 0 & System_On) then (Current_System_Mode = 1 & Commanded_Flow_Rate = 0)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_pre",
                    "System_On",
                    "Current_System_Mode",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                43
            ],
            "post_condition": "(( Current_System_Mode_pre = 0 & System_On ) => ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))",
            "responseTextRange": [
                45,
                153
            ],
            "ft": "(LAST | (X <b><i>(( Current_System_Mode_pre = 0 & System_On ) -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))",
            "pt": "(H ((Y FTP) -> <b><i>(( Current_System_Mode_pre = 0 & System_On ) -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))",
            "ftExpanded": "(LAST | (X <b><i>(( Current_System_Mode_pre = 0 & System_On ) -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))",
            "ptExpanded": "(H ((Y (! (Y TRUE))) -> <b><i>(( Current_System_Mode_pre = 0 & System_On ) -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((pre (FTP)) => (( Current_System_Mode_pre = 0 and System_On ) => ( Current_System_Mode = 1 and Commanded_Flow_Rate = 0 ))))",
            "diagramVariables": "Response = <b><i>(( Current_System_Mode_pre = 0 & System_On ) => ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg"
        },
        "_id": "a45c3f80-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g10",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall immediately satisfy (System_On & Configured < 1) => Current_System_Mode = 1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Configured",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(( System_On & Configured < 1 ) => Current_System_Mode = 1)",
            "responseTextRange": [
                35,
                97
            ],
            "ft": "<b><i>(( System_On & Configured < 1 ) -> Current_System_Mode = 1)</i></b>",
            "pt": "(H (FTP -> <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode = 1)</i></b>))",
            "ftExpanded": "<b><i>(( System_On & Configured < 1 ) -> Current_System_Mode = 1)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode = 1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(FTP => (( System_On and Configured < 1 ) => Current_System_Mode = 1)))",
            "diagramVariables": "Response = <b><i>(( System_On & Configured < 1 ) => Current_System_Mode = 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "a45c3f81-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g9",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall at the next timepoint satisfy (System_On & Infusion_Inhibit) => Commanded_Flow_Rate <= Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Infusion_Inhibit",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                43
            ],
            "post_condition": "(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)",
            "responseTextRange": [
                45,
                122
            ],
            "ft": "(LAST | (X <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "pt": "(H ((Y FTP) -> <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "(LAST | (X <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "ptExpanded": "(H ((Y (! (Y TRUE))) -> <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((pre (FTP)) => (( System_On and Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)))",
            "diagramVariables": "Response = <b><i>(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg"
        },
        "_id": "a45c8da0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G8",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ( System_On & Highest_Level_Alarm = 2 ) => ( (!Current_System_Mode_3) | (!Current_System_Mode_4) )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Current_System_Mode_3",
                    "Current_System_Mode_4"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 2 ) => ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))",
            "responseTextRange": [
                30,
                135
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 2 ) => ( ( not Current_System_Mode_3 ) or ( not Current_System_Mode_4 ) ))))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 2 ) => ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45cb4b0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G2",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "after Current_System_Mode_0 Infusion_Manager shall at the next timepoint satisfy System_On => ( Current_System_Mode_1 & Commanded_Flow_Rate = 0)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode_1",
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_0"
                ]
            },
            "scope_mode": "Current_System_Mode_0",
            "scopeTextRange": [
                0,
                26
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                28,
                43
            ],
            "timingTextRange": [
                51,
                71
            ],
            "post_condition": "(System_On => ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))",
            "responseTextRange": [
                73,
                143
            ],
            "ft": "(((! FLin_<b><i>Current_System_Mode_0</i></b>) U (FLin_<b><i>Current_System_Mode_0</i></b> & (X (LAST | ((X <b><i>(System_On -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>) & (! LAST)))))) | (LAST V (! FLin_<b><i>Current_System_Mode_0</i></b>)))",
            "pt": "((O FLin_<b><i>Current_System_Mode_0</i></b>) -> (((Y FLin_<b><i>Current_System_Mode_0</i></b>) -> <b><i>(System_On -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>) S (((Y FLin_<b><i>Current_System_Mode_0</i></b>) -> <b><i>(System_On -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>) & FLin_<b><i>Current_System_Mode_0</i></b>)))",
            "ftExpanded": "(((! ((<b><i>Current_System_Mode_0</i></b> & (! LAST)) & (X (! <b><i>Current_System_Mode_0</i></b>)))) U (((<b><i>Current_System_Mode_0</i></b> & (! LAST)) & (X (! <b><i>Current_System_Mode_0</i></b>))) & (X (LAST | ((X <b><i>(System_On -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>) & (! LAST)))))) | (LAST V (! ((<b><i>Current_System_Mode_0</i></b> & (! LAST)) & (X (! <b><i>Current_System_Mode_0</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>Current_System_Mode_0</i></b>) & (Y <b><i>Current_System_Mode_0</i></b>)) & (Y (H (! ((! <b><i>Current_System_Mode_0</i></b>) & (Y <b><i>Current_System_Mode_0</i></b>))))))) -> (((Y (((! <b><i>Current_System_Mode_0</i></b>) & (Y <b><i>Current_System_Mode_0</i></b>)) & (Y (H (! ((! <b><i>Current_System_Mode_0</i></b>) & (Y <b><i>Current_System_Mode_0</i></b>))))))) -> <b><i>(System_On -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>) S (((Y (((! <b><i>Current_System_Mode_0</i></b>) & (Y <b><i>Current_System_Mode_0</i></b>)) & (Y (H (! ((! <b><i>Current_System_Mode_0</i></b>) & (Y <b><i>Current_System_Mode_0</i></b>))))))) -> <b><i>(System_On -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>) & (((! <b><i>Current_System_Mode_0</i></b>) & (Y <b><i>Current_System_Mode_0</i></b>)) & (Y (H (! ((! <b><i>Current_System_Mode_0</i></b>) & (Y <b><i>Current_System_Mode_0</i></b>)))))))))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "((O((( not Current_System_Mode_0) and (pre (Current_System_Mode_0))) and pre (H( not (( not Current_System_Mode_0) and (pre (Current_System_Mode_0))))))) => (SI( ((( not Current_System_Mode_0) and (pre (Current_System_Mode_0))) and pre (H( not (( not Current_System_Mode_0) and (pre (Current_System_Mode_0)))))), ((pre ((( not Current_System_Mode_0) and (pre (Current_System_Mode_0))) and pre (H( not (( not Current_System_Mode_0) and (pre (Current_System_Mode_0))))))) => (System_On => ( Current_System_Mode_1 and Commanded_Flow_Rate = 0 ))) )))",
            "diagramVariables": "M = <b><i>Current_System_Mode_0</i></b>, Response = <b><i>(System_On => ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>Current_System_Mode_0</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_next_satisfaction.svg"
        },
        "_id": "a45d02d0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g3",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ( ! System_On ) => Current_System_Mode_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode_0"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( ! System_On ) => Current_System_Mode_0)",
            "responseTextRange": [
                30,
                77
            ],
            "ft": "(LAST V <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "pt": "(H <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( not System_On ) => Current_System_Mode_0)))",
            "diagramVariables": "Response = <b><i>(( ! System_On ) => Current_System_Mode_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45d29e0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G9",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "if  ! FTP Infusion_Manager shall always satisfy (System_On & Infusion_Cancel) => Current_System_Mode_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FTP",
                    "System_On",
                    "Infusion_Cancel",
                    "Current_System_Mode_1"
                ],
                "modes": []
            },
            "regular_condition": "(! FTP)",
            "qualifier_word": "if",
            "pre_condition": "(! FTP)",
            "conditionTextRange": [
                0,
                8
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                10,
                25
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(( System_On & Infusion_Cancel ) => Current_System_Mode_1)",
            "responseTextRange": [
                40,
                101
            ],
            "ft": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))",
            "pt": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((H( not (not FTP))) or (( System_On and Infusion_Cancel ) => Current_System_Mode_1)))",
            "diagramVariables": "TC = <b><i>(! FTP)</i></b>, Response = <b><i>(( System_On & Infusion_Cancel ) => Current_System_Mode_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! FTP)</i></b> is true and any point in the interval where <b><i>(! FTP)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "a45d50f0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G10",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "if ! FTP Infusion_Manager shall always satisfy (System_On & Infusion_Inhibit) => Commanded_Flow_Rate <= Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FTP",
                    "System_On",
                    "Infusion_Inhibit",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "regular_condition": "(! FTP)",
            "qualifier_word": "if",
            "pre_condition": "(! FTP)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                9,
                24
            ],
            "timingTextRange": [
                32,
                37
            ],
            "post_condition": "(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)",
            "responseTextRange": [
                39,
                116
            ],
            "ft": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))",
            "pt": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((H( not (not FTP))) or (( System_On and Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)))",
            "diagramVariables": "TC = <b><i>(! FTP)</i></b>, Response = <b><i>(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! FTP)</i></b> is true and any point in the interval where <b><i>(! FTP)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "a45dc620-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "g4",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_0 Infusion_Manager shall always satisfy ( ! System_On ) => Commanded_Flow_Rate =0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Commanded_Flow_Rate"
                ],
                "modes": [
                    "Current_System_Mode_0"
                ]
            },
            "scope_mode": "Current_System_Mode_0",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(( ! System_On ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                103
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_0 => (( not System_On ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_0</i></b>, Response = <b><i>(( ! System_On ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_0</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a45dc621-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G11",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Configured < 1) => Current_System_Mode_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Configured",
                    "Current_System_Mode_1"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Configured < 1 ) => Current_System_Mode_1)",
            "responseTextRange": [
                30,
                90
            ],
            "ft": "(LAST V <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "pt": "(H <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Configured < 1 ) => Current_System_Mode_1)))",
            "diagramVariables": "Response = <b><i>(( System_On & Configured < 1 ) => Current_System_Mode_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45e1440-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G6",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 4) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                30,
                101
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45e6260-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G25",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ( System_On & ! Patient_Bolus_Request & (! Current_System_Mode_4_pre)) => ! Current_System_Mode_4",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Patient_Bolus_Request",
                    "Current_System_Mode_4_pre",
                    "Current_System_Mode_4"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) => ! Current_System_Mode_4)",
            "responseTextRange": [
                30,
                134
            ],
            "ft": "(LAST V <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "pt": "(H <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and not Patient_Bolus_Request and ( not Current_System_Mode_4_pre ) ) => not Current_System_Mode_4)))",
            "diagramVariables": "Response = <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) => ! Current_System_Mode_4)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45e8970-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G1",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall immediately satisfy System_On => Current_System_Mode_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode_1"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(System_On => Current_System_Mode_1)",
            "responseTextRange": [
                35,
                76
            ],
            "ft": "<b><i>(System_On -> Current_System_Mode_1)</i></b>",
            "pt": "(H (FTP -> <b><i>(System_On -> Current_System_Mode_1)</i></b>))",
            "ftExpanded": "<b><i>(System_On -> Current_System_Mode_1)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(System_On -> Current_System_Mode_1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(FTP => (System_On => Current_System_Mode_1)))",
            "diagramVariables": "Response = <b><i>(System_On => Current_System_Mode_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "a45eb080-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "G7",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 3) => Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                30,
                113
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45ed790-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-003d",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The roll reference shall be set to the cockpit turn knob command, up to a 30 degree limit, if the turn knob is commanding 3 degrees or more in either direction. (we removed the \"up to a 30 degree limit\" part)",
        "fulltext": "RollAutopilot shall always satisfy (TurnKnob >= 3.0 | TurnKnob <= -3.0) & (TurnKnob <= 30.0 | TurnKnob >= -30.0) => roll_hold_reference = TurnKnob",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "TurnKnob",
                    "roll_hold_reference"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)",
            "responseTextRange": [
                27,
                145
            ],
            "ft": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "pt": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ptExpanded": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((( TurnKnob >= 3.0 or TurnKnob <= -3.0 ) and ( TurnKnob <= 30.0 or TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)))",
            "diagramVariables": "Response = <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45f25b0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NN-004",
        "parent_reqid": "NN.R1",
        "project": "LM_requirements",
        "rationale": "The absolute error between the zt truth data and the output z shall never exceed a tolerance of 0.01, for the equivalent input of (xt, yt).",
        "fulltext": "NN shall for 200 secs satisfy ( x = xt & y = yt  => AbsoluteErrorZtMinusZ <= 0.01)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "xt",
                    "y",
                    "yt",
                    "AbsoluteErrorZtMinusZ"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))",
            "responseTextRange": [
                22,
                81
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (( x = xt and y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "a45f4cc0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from TRANSITION to STANDBY when the pilot is in control (standby).",
        "fulltext": "FSM_Autopilot shall always satisfy (standby & state = ap_transition_state) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "standby",
                    "state",
                    "ap_transition_state",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( standby & state = ap_transition_state ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                101
            ],
            "ft": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( standby and state = ap_transition_state ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45f9ae0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "Test001",
        "parent_reqid": "",
        "project": "All Projects",
        "rationale": "",
        "fulltext": "nickel",
        "semantics": {},
        "_id": "a45f9ae1-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-001C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_13 = - SinTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_13",
                    "SinTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_13 = - SinTheta)",
            "responseTextRange": [
                19,
                48
            ],
            "ft": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_13 = - SinTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_13 = - SinTheta)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_13 = - SinTheta)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a45fe900-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TSM-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy (single_fail_reported & failure_in_progress => set_val = pre_set_val)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "single_fail_reported",
                    "failure_in_progress",
                    "set_val",
                    "pre_set_val"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))",
            "responseTextRange": [
                34,
                110
            ],
            "ft": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "pt": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ptExpanded": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( single_fail_reported and failure_in_progress => set_val = pre_set_val ))))",
            "diagramVariables": "Response = <b><i>(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4601010-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-002B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "in roll_hold mode RollAutopilot shall always satisfy roll_cmd = roll_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "roll_hold_mode_cmd"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                43
            ],
            "post_condition": "(roll_cmd = roll_hold_mode_cmd)",
            "responseTextRange": [
                45,
                81
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (roll_cmd = roll_hold_mode_cmd) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (roll_cmd = roll_hold_mode_cmd) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a4603720-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-001I",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_33 = CosPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_33",
                    "CosPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_33 = CosPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_33 = CosPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a460ac50-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EB-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on  =  TRUE) &  abs(check_1_1  - 1.0)<eps6  &  abs(check_1_2)<eps6  &  abs(check_1_3)<eps6  & abs(check_2_1)<eps6  &  abs(check_2_2  -  1.0)<eps6  &  abs(check_2_3)<eps6  & abs(check_3_1)<eps6 & abs(check_3_2)< eps6 & abs(check_3_3 - 1.0)<eps6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "TRUE",
                    "abs",
                    "check_1_1",
                    "eps6",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)",
            "responseTextRange": [
                19,
                300
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) and abs ( check_1_1 - 1.0 ) < eps6 and abs ( check_1_2 ) < eps6 and abs ( check_1_3 ) < eps6 and abs ( check_2_1 ) < eps6 and abs ( check_2_2 - 1.0 ) < eps6 and abs ( check_2_3 ) < eps6 and abs ( check_3_1 ) < eps6 and abs ( check_3_2 ) < eps6 and abs ( check_3_3 - 1.0 ) < eps6)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a460d360-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "Meaningless_One",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "Before initialization UAV shall immediately satisfy yout > 0",
        "semantics": {
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                20
            ],
            "component_name": "UAV",
            "componentTextRange": [
                22,
                24
            ],
            "timingTextRange": [
                32,
                42
            ],
            "post_condition": "(yout > 0)",
            "responseTextRange": [
                44,
                59
            ],
            "ft": "No meaning assigned.",
            "pt": "No meaning assigned.",
            "ftExpanded": "No meaning assigned.",
            "ptExpanded": "No meaning assigned.",
            "component": "<b><i>UAV</i></b>",
            "CoCoSpecCode": "No meaning assigned.",
            "diagramVariables": "M = <b><i>initialization</i></b>, Response = <b><i>(yout > 0)</i></b>.",
            "description": "Unclear requirement. We are not sure how to interpret this requirement.",
            "diagram": "Undefined svg."
        },
        "_id": "a4612180-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-010a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in hdg mode, when hdg_steady_state Autopilot shall always satisfy abs_hdg_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_steady_state",
                    "abs_hdg_err"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                16
            ],
            "regular_condition": "(hdg_steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(hdg_steady_state)",
            "conditionTextRange": [
                18,
                38
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                40,
                48
            ],
            "timingTextRange": [
                56,
                61
            ],
            "post_condition": "(abs_hdg_err <= 1.0)",
            "responseTextRange": [
                63,
                88
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg</i></b> & (! LAST))) | (X (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>hdg</i></b> & (! FTP)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) & Fin_<b><i>hdg</i></b>))))) & (((! Lin_<b><i>hdg</i></b>) S ((! Lin_<b><i>hdg</i></b>) & Fin_<b><i>hdg</i></b>)) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) & Fin_<b><i>hdg</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg</i></b>) & (! LAST)) & (X <b><i>hdg</i></b>)) & (! LAST))) | (X (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) S ((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg) and (pre (hdg))) and ( not FTP)) => (pre (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (SI( ((hdg_steady_state) and ((pre ( not (hdg_steady_state))) or (hdg and (FTP or (pre ( not hdg)))))), (abs_hdg_err <= 1.0) ))) ))))) and ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (( not hdg) and (pre (hdg)))) )) => (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (SI( ((hdg_steady_state) and ((pre ( not (hdg_steady_state))) or (hdg and (FTP or (pre ( not hdg)))))), (abs_hdg_err <= 1.0) ))) ))))",
            "diagramVariables": "M = <b><i>hdg</i></b>, TC = <b><i>(hdg_steady_state)</i></b>, Response = <b><i>(abs_hdg_err <= 1.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_hdg_err <= 1.0)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>hdg</i></b> and <b><i>(hdg_steady_state)</i></b> is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "a4614890-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NLG-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy (Vv * yout) > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Vv",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( Vv * yout ) > 0)",
            "responseTextRange": [
                24,
                46
            ],
            "ft": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "pt": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((( Vv * yout ) > 0)))",
            "diagramVariables": "Response = <b><i>(( Vv * yout ) > 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(( Vv * yout ) > 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46196b0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NLG-002&3",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - Xtarg) >= r & dot((yout - Xtarg),(yout - Xv)) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "Xtarg",
                    "r",
                    "dot",
                    "Xv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)",
            "responseTextRange": [
                24,
                91
            ],
            "ft": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "pt": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - Xtarg ) >= r and dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)))",
            "diagramVariables": "Response = <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a461e4d0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TUI-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy yout <= TL &  yout >= BL",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "TL",
                    "BL"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(yout <= TL & yout >= BL)",
            "responseTextRange": [
                31,
                62
            ],
            "ft": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "pt": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ptExpanded": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((yout <= TL and yout >= BL)))",
            "diagramVariables": "Response = <b><i>(yout <= TL & yout >= BL)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(yout <= TL & yout >= BL)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4620be0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-001A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Rotation Matrix Output, DCM321, of this Function Shall Equal a 3x3 Matrix Product of a 3x3 Euler 3 (Roll) Rotation Matrix times a 3x3 Euler 2 (Pitch) Rotation Matrix times a 3x3 Euler 1 (Heading) Rotation Matrix.",
        "fulltext": "Euler shall always satisfy DCM321_11 = CosTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_11",
                    "CosTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_11 = CosTheta * CosPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_11 = CosTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4625a00-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EB-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on  =  TRUE) &  abs(check_1_1  - 1.0)<eps12  &  abs(check_1_2)<eps12  &  abs(check_1_3)<eps12  & abs(check_2_1)<eps12  &  abs(check_2_2  -  1.0)<eps12  &  abs(check_2_3)<eps12  & abs(check_3_1)<eps12 & abs(check_3_2)< eps12 & abs(check_3_3 - 1.0)<eps12",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "TRUE",
                    "abs",
                    "check_1_1",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)",
            "responseTextRange": [
                19,
                309
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) and abs ( check_1_1 - 1.0 ) < eps12 and abs ( check_1_2 ) < eps12 and abs ( check_1_3 ) < eps12 and abs ( check_2_1 ) < eps12 and abs ( check_2_2 - 1.0 ) < eps12 and abs ( check_2_3 ) < eps12 and abs ( check_3_1 ) < eps12 and abs ( check_3_2 ) < eps12 and abs ( check_3_3 - 1.0 ) < eps12)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4628110-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-003A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy !(Cb | Cc1 | Cc2 | Cd)  => roll_hold_reference = roll_angle",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Cb",
                    "Cc1",
                    "Cc2",
                    "Cd",
                    "roll_hold_reference",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)",
            "responseTextRange": [
                50,
                116
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (not ( Cb or Cc1 or Cc2 or Cd ) => roll_hold_reference = roll_angle)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (not ( Cb or Cc1 or Cc2 or Cd ) => roll_hold_reference = roll_angle)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "a4628111-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBYwhen the pilot is in control (standby).",
        "fulltext": "FSM_Autopilot shall always satisfy (state=ap_nominal_state & standby)  => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "standby",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                97
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and standby ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a462cf30-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "SWIM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "2.\tWhen a low speed warning is allowed, as computed by the SWIM Airspeed algorithm, a low speed warning shall be true when the vehicle air data impact pressure is less than the warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished where:\n\nThe warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished is computed as\n\nSWIM_Qcmin_lbspft2 = [(-2.0906 + 0.020306*Auto GCAS Minimum Vcas) + 0.1] * (70.7184 (lbspft2/in Hg))",
        "fulltext": "SWIM shall always satisfy ((lowSpeedWarningAllowed  & vehAirPress < warningTrigForMinPress) => lowSpeedWarningTrue)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lowSpeedWarningAllowed",
                    "vehAirPress",
                    "warningTrigForMinPress",
                    "lowSpeedWarningTrue"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))",
            "responseTextRange": [
                18,
                114
            ],
            "ft": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "pt": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( lowSpeedWarningAllowed and vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))))",
            "diagramVariables": "Response = <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a462f640-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TSM-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "In the no-fail state, a mis-compare, which shall be characterized by one branch differing with the other two branches by a unique trip level that lasts for more than the persistence limit, shall be reported to failure management as a failure.",
        "fulltext": "TriplexSignalMonitor shall always satisfy ((pre_no_fail & failure_must_be_latched)=> single_fail_reported)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pre_no_fail",
                    "failure_must_be_latched",
                    "single_fail_reported"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))",
            "responseTextRange": [
                34,
                105
            ],
            "ft": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "pt": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( ( pre_no_fail and failure_must_be_latched ) => single_fail_reported ))))",
            "diagramVariables": "Response = <b><i>(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4634460-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TUI-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy (BL <= IC & IC <= TL & RESET)  => yout = IC",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "BL",
                    "IC",
                    "TL",
                    "RESET",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(( BL <= IC & IC <= TL & RESET ) => yout = IC)",
            "responseTextRange": [
                31,
                81
            ],
            "ft": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "pt": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ptExpanded": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((( BL <= IC and IC <= TL and RESET ) => yout = IC)))",
            "diagramVariables": "Response = <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4636b70-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EB-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB shall always satisfy Buminusd_norm<0.0001",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Buminusd_norm"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(Buminusd_norm < 0.0001)",
            "responseTextRange": [
                16,
                43
            ],
            "ft": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "pt": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ptExpanded": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((Buminusd_norm < 0.0001)))",
            "diagramVariables": "Response = <b><i>(Buminusd_norm < 0.0001)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(Buminusd_norm < 0.0001)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a463b990-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NN-003B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByYt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)",
            "responseTextRange": [
                22,
                83
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByYt <= 10.0 and DeltaZDividedByYt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "a463e0a0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from TRANSITION to NOMINAL when the system is supported and sensor data is good.",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_transition_state & good & supported) => STATE = ap_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_transition_state",
                    "good",
                    "supported",
                    "STATE",
                    "ap_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)",
            "responseTextRange": [
                27,
                110
            ],
            "ft": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_transition_state and good and supported ) => STATE = ap_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46407b0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-008v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from STANDBY to TRANSITION when the pilot is not in control (not standby)",
        "fulltext": " FSM_Autopilot shall always satisfy (state = ap_standby_state & !standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                102
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4647ce0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-011v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from NOMINAL to TRANSITION when the autopilot is not requesting support (not request)",
        "fulltext": "FSM_Sensor shall always  satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                25,
                108
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a464a3f0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-010b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in hdg mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                40,
                63
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>hdg</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg</i></b> & (! FTP)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>hdg</i></b>))))) & (((! Lin_<b><i>hdg</i></b>) S ((! Lin_<b><i>hdg</i></b>) & Fin_<b><i>hdg</i></b>)) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>hdg</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg</i></b>) & (! LAST)) & (X <b><i>hdg</i></b>)) & (! LAST))) | (X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>hdg</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>)) & (Y TRUE)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) S ((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg) and (pre (hdg))) and ( not FTP)) => (pre (SI( (hdg and (FTP or (pre ( not hdg)))), (overshoot <= 0.1) ))))) and ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (( not hdg) and (pre (hdg)))) )) => (SI( (hdg and (FTP or (pre ( not hdg)))), (overshoot <= 0.1) ))))",
            "diagramVariables": "M = <b><i>hdg</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(overshoot <= 0.1)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>hdg</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a464cb00-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-002C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_31",
                    "VI_1",
                    "R_31",
                    "VI_2",
                    "R_32",
                    "VI_3",
                    "R_33"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "pt": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)))",
            "diagramVariables": "Response = <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4651920-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "VariablesTest",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "in m if xA > 0 UAV shall satisfy yB > 0 & xin > 0",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "xA",
                    "yB",
                    "xin"
                ],
                "modes": [
                    "m"
                ]
            },
            "scope_mode": "m",
            "scopeTextRange": [
                0,
                3
            ],
            "regular_condition": "(xA > 0)",
            "qualifier_word": "if",
            "pre_condition": "(xA > 0)",
            "conditionTextRange": [
                5,
                13
            ],
            "component_name": "UAV",
            "componentTextRange": [
                15,
                17
            ],
            "post_condition": "(yB > 0 & xin > 0)",
            "responseTextRange": [
                25,
                48
            ],
            "ft": "(G ((!Fin_<b><i>m</i></b>) | (Fin_<b><i>m</i></b> & (X ((F (Lin_<b><i>m</i></b> | LAST)) -> ((Lin_<b><i>m</i></b> | LAST) V (<b><i>(xA > 0)</i></b> -> ((!(Lin_<b><i>m</i></b> | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))))) & (<b><i>m</i></b> -> ((F (Lin_<b><i>m</i></b> | LAST)) -> ((Lin_<b><i>m</i></b> | LAST) V (<b><i>(xA > 0)</i></b> -> ((!(Lin_<b><i>m</i></b> | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))",
            "pt": "(H (Lin_<b><i>m</i></b> -> (Y (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & Fin_<b><i>m</i></b>)) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>))))))) & (((!Lin_<b><i>m</i></b>) S ((!Lin_<b><i>m</i></b>) & Fin_<b><i>m</i></b>)) -> (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & Fin_<b><i>m</i></b>)) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>)))))",
            "ftExpanded": "(G ((!((! <b><i>m</i></b>) & X <b><i>m</i></b>)) | (((! <b><i>m</i></b>) & X <b><i>m</i></b>) & (X ((F ((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) -> (((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST) V (<b><i>(xA > 0)</i></b> -> ((!((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))))) & (<b><i>m</i></b> -> ((F ((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) -> (((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST) V (<b><i>(xA > 0)</i></b> -> ((!((<b><i>m</i></b> & X (! <b><i>m</i></b>)) | LAST)) U <b><i>(yB > 0 & xin > 0)</i></b>)))))",
            "ptExpanded": "(H (((! <b><i>m</i></b>) & (Y <b><i>m</i></b>)) -> (Y (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>))))))) & (((!((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) S ((!((! <b><i>m</i></b>) & (Y <b><i>m</i></b>))) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) -> (((!<b><i>(xA > 0)</i></b>) S ((!<b><i>(xA > 0)</i></b>) & (<b><i>m</i></b> & ((! Y TRUE) | (Y ! <b><i>m</i></b>))))) | (!((!<b><i>(yB > 0 & xin > 0)</i></b>) S ((!<b><i>(yB > 0 & xin > 0)</i></b>) & <b><i>(xA > 0)</i></b>)))))",
            "component": "<b><i>UAV</i></b>",
            "CoCoSpecCode": "(H((( not m) and (pre ( m ))) => (pre ((S( (( not (xA > 0)) and (m and (FTP(_) or (pre (  not m ))))), ( not (xA > 0)) )) or ( not (S( (( not (yB > 0 and xin > 0)) and (xA > 0)), ( not (yB > 0 and xin > 0)) ))))))) and ((S( (( not (( not m) and (pre ( m )))) and (m and (FTP(_) or (pre (  not m ))))), ( not (( not m) and (pre ( m )))) )) => ((S( (( not (xA > 0)) and (m and (FTP(_) or (pre (  not m ))))), ( not (xA > 0)) )) or ( not (S( (( not (yB > 0 and xin > 0)) and (xA > 0)), ( not (yB > 0 and xin > 0)) )))))",
            "diagramVariables": "M = <b><i>m</i></b>, Response = <b><i>(yB > 0 & xin > 0)</i></b>.",
            "description": "At some future point, the component \"<b><i>UAV</i></b>\" shall satisfy <b><i>(yB > 0 & xin > 0)</i></b>. This is only enforced when \"<b><i>UAV</i></b>\" is in mode <b><i>m</i></b> and <b><i>(xA > 0)</i></b> is satisfied.",
            "diagram": "Undefined svg."
        },
        "_id": "a4656740-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "Kandy2",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "The AVAPrototype shall achieve a reasonable flight path angle",
        "semantics": {},
        "_id": "a4658e50-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command translational axial accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_airspeed_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_airspeed_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_airspeed_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                71
            ],
            "ft": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_airspeed_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a465b560-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-002a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll hold mode shall be the active mode whenever the autopilot is engaged and no other lateral mode is active.",
        "fulltext": "when in roll_hold mode RollAutopilot shall always satisfy autopilot_engaged & no_other_lateral_mode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "no_other_lateral_mode"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                23,
                35
            ],
            "timingTextRange": [
                43,
                48
            ],
            "post_condition": "(autopilot_engaged & no_other_lateral_mode)",
            "responseTextRange": [
                50,
                98
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (autopilot_engaged and no_other_lateral_mode) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (autopilot_engaged and no_other_lateral_mode) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a4660380-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Roll Regulator Shall not command angular roll accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_roll_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_roll_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_roll_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_roll_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4662a90-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-001d",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_21 = (- CosPhi * SinPsi + SinPhi * SinTheta * CosPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_21",
                    "CosPhi",
                    "SinPsi",
                    "SinPhi",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))",
            "responseTextRange": [
                19,
                86
            ],
            "ft": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4662a91-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-001v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if autopilot & pre_autopilot & pre_limits FSM shall immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot",
                    "pre_autopilot",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(autopilot & pre_autopilot & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(autopilot & pre_autopilot & pre_limits)",
            "conditionTextRange": [
                0,
                40
            ],
            "component_name": "FSM",
            "componentTextRange": [
                42,
                44
            ],
            "timingTextRange": [
                52,
                62
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                64,
                77
            ],
            "ft": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((autopilot and pre_autopilot and pre_limits) and ((pre ( not (autopilot and pre_autopilot and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(autopilot & pre_autopilot & pre_limits)</i></b> is true and any point in the interval where <b><i>(autopilot & pre_autopilot & pre_limits)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "a46678b0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TSM-003b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =2 =>  set_val = 0.5 * (ia +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 2 => set_val = 0.5 * ( ia + ic ))",
            "responseTextRange": [
                34,
                75
            ],
            "ft": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 2 => set_val = 0.5 * ( ia + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 2 => set_val = 0.5 * ( ia + ic ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(FC = 2 => set_val = 0.5 * ( ia + ic ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4669fc0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Roll Regulator Shall not command transient changes in angular roll acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy roll_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(roll_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                63
            ],
            "ft": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((roll_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a466ede0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TestRequirement",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "In m1 AUTOPILOT shall satisfy p",
        "semantics": {
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "p"
                ],
                "modes": [
                    "m1"
                ]
            },
            "scope_mode": "m1",
            "scopeTextRange": [
                0,
                4
            ],
            "component_name": "AUTOPILOT",
            "componentTextRange": [
                6,
                14
            ],
            "post_condition": "(p)",
            "responseTextRange": [
                22,
                30
            ],
            "ft": "(G ((!Fin_<b><i>m1</i></b>) | (Fin_<b><i>m1</i></b> & (X ((F (Lin_<b><i>m1</i></b> | LAST)) -> ((!(Lin_<b><i>m1</i></b> | LAST)) U <b><i>(p)</i></b>)))))) & (<b><i>m1</i></b> -> ((F (Lin_<b><i>m1</i></b> | LAST)) -> ((!(Lin_<b><i>m1</i></b> | LAST)) U <b><i>(p)</i></b>)))",
            "pt": "(H (Lin_<b><i>m1</i></b> -> (Y (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & Fin_<b><i>m1</i></b>)))))) & (((!Lin_<b><i>m1</i></b>) S ((!Lin_<b><i>m1</i></b>) & Fin_<b><i>m1</i></b>)) -> (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & Fin_<b><i>m1</i></b>))))",
            "ftExpanded": "(G ((!((! <b><i>m1</i></b>) & X <b><i>m1</i></b>)) | (((! <b><i>m1</i></b>) & X <b><i>m1</i></b>) & (X ((F ((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) -> ((!((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) U <b><i>(p)</i></b>)))))) & (<b><i>m1</i></b> -> ((F ((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) -> ((!((<b><i>m1</i></b> & X (! <b><i>m1</i></b>)) | LAST)) U <b><i>(p)</i></b>)))",
            "ptExpanded": "(H (((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>)) -> (Y (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>))))))))) & (((!((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>))) S ((!((! <b><i>m1</i></b>) & (Y <b><i>m1</i></b>))) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>))))) -> (!((!<b><i>(p)</i></b>) S ((!<b><i>(p)</i></b>) & (<b><i>m1</i></b> & ((! Y TRUE) | (Y ! <b><i>m1</i></b>)))))))",
            "component": "<b><i>AUTOPILOT</i></b>",
            "CoCoSpecCode": "(H((( not m1) and (pre ( m1 ))) => (pre ( not (S( (( not (p)) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (p)) )))))) and ((S( (( not (( not m1) and (pre ( m1 )))) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (( not m1) and (pre ( m1 )))) )) => ( not (S( (( not (p)) and (m1 and (FTP(_) or (pre (  not m1 ))))), ( not (p)) ))))",
            "diagramVariables": "M = <b><i>m1</i></b>, Response = <b><i>(p)</i></b>.",
            "description": "At some future point, the component \"<b><i>AUTOPILOT</i></b>\" shall satisfy <b><i>(p)</i></b>. This is only enforced when \"<b><i>AUTOPILOT</i></b>\" is in mode <b><i>m1</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg"
        },
        "_id": "a4673c00-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-009",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from STANDBY to MANEUVER when a failure occurs (apfail)",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & apfail )=> STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "apfail",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                98
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and apfail ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4676310-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-001v3",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if  htlore3_autopilot  &  htlore3_notpreprelimits  &  pre_limits  FSM  shall  immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "htlore3_autopilot",
                    "htlore3_notpreprelimits",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "conditionTextRange": [
                0,
                63
            ],
            "component_name": "FSM",
            "componentTextRange": [
                66,
                68
            ],
            "timingTextRange": [
                78,
                88
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                90,
                103
            ],
            "ft": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((htlore3_autopilot and htlore3_notpreprelimits and pre_limits) and ((pre ( not (htlore3_autopilot and htlore3_notpreprelimits and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> is true and any point in the interval where <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "a467b130-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NN-004SP",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "NeuralNetwork shall for 200 sec satisfy (x = xt & y = yt) => abs_error(zt - z) <= 0.01",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "xt",
                    "y",
                    "yt",
                    "abs_error",
                    "zt",
                    "z"
                ],
                "modes": []
            },
            "component_name": "NeuralNetwork",
            "componentTextRange": [
                0,
                12
            ],
            "duration": "200 sec",
            "timingTextRange": [
                20,
                30
            ],
            "post_condition": "(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)",
            "responseTextRange": [
                32,
                85
            ],
            "ft": "(G[<=<b><i>200 sec</i></b>] <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) | (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> U (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> & (LAST | LAST)))",
            "pt": "((O[<=<b><i>200 sec</i></b>] FTP) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) S (((O[<=<b><i>200 sec</i></b>] FTP) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) & FTP)",
            "ftExpanded": "(G[<=<b><i>200 sec</i></b>] <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) | (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> U (<b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b> & (LAST | LAST)))",
            "ptExpanded": "((O[<=<b><i>200 sec</i></b>] (! Y TRUE)) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) S (((O[<=<b><i>200 sec</i></b>] (! Y TRUE)) -> <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>) & (! Y TRUE))",
            "component": "<b><i>NeuralNetwork</i></b>",
            "CoCoSpecCode": "S( (((OTlore(200 sec, FTP() )) => (( x = xt and y = yt ) => abs_error ( zt - z ) <= 0.01)) and FTP()), ((OTlore(200 sec, FTP() )) => (( x = xt and y = yt ) => abs_error ( zt - z ) <= 0.01)) )",
            "diagramVariables": " n = <b><i>200 sec</i></b>, Response = <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>.",
            "description": "TIME, the component \"<b><i>NeuralNetwork</i></b>\" shall satisfy <b><i>(( x = xt & y = yt ) => abs_error ( zt - z ) <= 0.01)</i></b>.",
            "diagram": "Undefined svg."
        },
        "_id": "a467d840-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Height Regulator Shall not command translational height accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_height_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_height_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_height_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                69
            ],
            "ft": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_height_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_height_output_exceeding_32 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_height_output_exceeding_32 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4682660-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-004v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBY when the pilot is in contronl (standby)",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_nominal_state & ! good & ! standby) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "good",
                    "standby",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                110
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and not good and not standby ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4689b90-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-004a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in roll_hold mode, when steady_state Autopilot shall always satisfy abs_roller_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "steady_state",
                    "abs_roller_err"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                22
            ],
            "regular_condition": "(steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(steady_state)",
            "conditionTextRange": [
                24,
                40
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                42,
                50
            ],
            "timingTextRange": [
                58,
                63
            ],
            "post_condition": "(abs_roller_err <= 1.0)",
            "responseTextRange": [
                65,
                93
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (SI( ((steady_state) and ((pre ( not (steady_state))) or (roll_hold and (FTP or (pre ( not roll_hold)))))), (abs_roller_err <= 1.0) ))) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (SI( ((steady_state) and ((pre ( not (steady_state))) or (roll_hold and (FTP or (pre ( not roll_hold)))))), (abs_roller_err <= 1.0) ))) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, TC = <b><i>(steady_state)</i></b>, Response = <b><i>(abs_roller_err <= 1.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roller_err <= 1.0)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b> and <b><i>(steady_state)</i></b> is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "a468c2a0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-008v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "apfail",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                115
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby and not apfail ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46910c0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NLG-005a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) < mag(r2) NLGuidance shall always satisfy yout = Xap1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap1"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "conditionTextRange": [
                0,
                33
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                35,
                44
            ],
            "timingTextRange": [
                52,
                57
            ],
            "post_condition": "(yout = Xap1)",
            "responseTextRange": [
                59,
                77
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or FTP)), (yout = Xap1) ))))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap1)</i></b>.",
            "description": "Upon <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> becoming true, always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout = Xap1)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "a46937d0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Pitch Regulator Shall not command transient changes in angular pitch acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy pitch_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pitch_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(pitch_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                64
            ],
            "ft": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((pitch_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46985f0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TSM-003c",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =4 => set_val = 0.5 * (ib +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ib",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 4 => set_val = 0.5 * ( ib + ic ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 4 => set_val = 0.5 * ( ib + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 4 => set_val = 0.5 * ( ib + ic ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(FC = 4 => set_val = 0.5 * ( ib + ic ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a469d410-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-000",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The altitude hold autopilot shall maintain altitude within 35 feet of the initial condition. ",
        "fulltext": "Autopilot shall always satisfy altitude_hold => absOf_alt_minus_altIC <= 35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "altitude_hold",
                    "absOf_alt_minus_altIC"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(altitude_hold => absOf_alt_minus_altIC <= 35.0)",
            "responseTextRange": [
                23,
                76
            ],
            "ft": "(LAST V <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "pt": "(H <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "ptExpanded": "(H <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((altitude_hold => absOf_alt_minus_altIC <= 35.0)))",
            "diagramVariables": "Response = <b><i>(altitude_hold => absOf_alt_minus_altIC <= 35.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a469fb20-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NLG-005b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) >= mag(r2) NLGuidance shall always satisfy yout = Xap2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap2"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "conditionTextRange": [
                0,
                34
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                36,
                45
            ],
            "timingTextRange": [
                53,
                58
            ],
            "post_condition": "(yout = Xap2)",
            "responseTextRange": [
                60,
                78
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or FTP)), (yout = Xap2) ))))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap2)</i></b>.",
            "description": "Upon <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> becoming true, always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout = Xap2)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "a46a9760-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-002A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Body Vector Output, Vb, of this Function Shall Equal a 3x1 Vector Product of the 3x3 Rotation Matrix Output, DCM321, times the Input Inertial Vector, Vi.",
        "fulltext": "Euler shall always satisfy R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_11",
                    "VI_1",
                    "R_11",
                    "VI_2",
                    "R_12",
                    "VI_3",
                    "R_13"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "pt": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)))",
            "diagramVariables": "Response = <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46abe70-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-004b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in roll_hold mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                23,
                31
            ],
            "timingTextRange": [
                39,
                44
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                46,
                69
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(overshoot <= 0.1)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a46b0c90-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-008",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Yaw Regulator Shall not command transient changes in angular yaw acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy yaw_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yaw_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(yaw_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                62
            ],
            "ft": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((yaw_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46b33a0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NN-003A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "3.\tUsing a first order finite backward difference equation, the spatial derivatives of Δz/ Δxt = (z(n,1)-z(n-1))/(xt(n,1)-xt(n-1,1) and Δz/ Δyt = (z(n,1)-z(n-1))/(yt(n,1)-yt(n-1,1) shall never exceed a top bound of +10 or bottom bound of -35 (e.g. -35 <= Δz/ Δ(xt,yt) <= 10), where n denotes an index to the current values and n-1 denotes the prior values in the included truth data for xt and yt.    ",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByXt<= 10.0 & DeltaZDividedByXt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByXt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)",
            "responseTextRange": [
                22,
                82
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByXt <= 10.0 and DeltaZDividedByXt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "a46b81c0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TUI-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy normal => yout = normal_yout",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "normal",
                    "yout",
                    "normal_yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(normal => yout = normal_yout)",
            "responseTextRange": [
                31,
                66
            ],
            "ft": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "pt": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ptExpanded": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((normal => yout = normal_yout)))",
            "diagramVariables": "Response = <b><i>(normal => yout = normal_yout)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(normal => yout = normal_yout)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46bcfe0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy  abs_roll_rate <= 6.6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_rate"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_rate <= 6.6)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "pt": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_rate <= 6.6)))",
            "diagramVariables": "Response = <b><i>(abs_roll_rate <= 6.6)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roll_rate <= 6.6)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46bf6f0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "MetricTemporalProperty",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "When not in M and when C the software shall within 3 secs satisfy P",
        "semantics": {
            "scope": {
                "type": "notin"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "C",
                    "P"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                12
            ],
            "regular_condition": "(C)",
            "qualifier_word": "when",
            "pre_condition": "(C)",
            "conditionTextRange": [
                14,
                23
            ],
            "component_name": "software",
            "componentTextRange": [
                25,
                36
            ],
            "duration": "3 secs",
            "timingTextRange": [
                44,
                56
            ],
            "post_condition": "(P)",
            "responseTextRange": [
                58,
                66
            ],
            "ft": "(G ((!Lin_<b><i>M</i></b>) | (Lin_<b><i>M</i></b> & (X ((F (Fin_<b><i>M</i></b> | LAST)) -> (((Fin_<b><i>M</i></b> | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(Fin_<b><i>M</i></b> | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))) & (!(Fin_<b><i>M</i></b> | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))))))))) & ((!<b><i>M</i></b>) -> ((F (Fin_<b><i>M</i></b> | LAST)) -> (((Fin_<b><i>M</i></b> | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(Fin_<b><i>M</i></b> | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))) & (!(Fin_<b><i>M</i></b> | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (Fin_<b><i>M</i></b> | LAST)))))))",
            "pt": "(H ((LNin_<b><i>M</i></b> & (!FTP)) -> (Y (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) & FNin_<b><i>M</i></b>))))) & (((!LNin_<b><i>M</i></b>) S ((!LNin_<b><i>M</i></b>) & FNin_<b><i>M</i></b>)) -> (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & FNin_<b><i>M</i></b>)) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (FNin_<b><i>M</i></b> | <b><i>(P)</i></b>))) & FNin_<b><i>M</i></b>)))",
            "ftExpanded": "(G ((!(<b><i>M</i></b> & X (! <b><i>M</i></b>))) | ((<b><i>M</i></b> & X (! <b><i>M</i></b>)) & (X ((F (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)) -> (((((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))))))))) & ((!<b><i>M</i></b>) -> ((F (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)) -> (((((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST) V (((!<b><i>(C)</i></b>) & ((X <b><i>(C)</i></b>) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) -> ((X ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))) & (!(((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST))))) & (<b><i>(C)</i></b> -> ((F[<=<b><i>3 secs</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & X <b><i>M</i></b>) | LAST)))))))",
            "ptExpanded": "(H (((<b><i>M</i></b> & (Y ! <b><i>M</i></b>)) & (!(! Y TRUE))) -> (Y (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>)))))))) & (((!(<b><i>M</i></b> & (Y ! <b><i>M</i></b>))) S ((!(<b><i>M</i></b> & (Y ! <b><i>M</i></b>))) & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) -> (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) S (((O[=<b><i>3 secs</i></b>] (((<b><i>(C)</i></b> & (Y (!<b><i>(C)</i></b>))) | (<b><i>(C)</i></b> & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))) & (!<b><i>(P)</i></b>))) -> (O[<<b><i>3 secs</i></b>] (((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))) | <b><i>(P)</i></b>))) & ((! <b><i>M</i></b>) & ((! Y TRUE) | (Y <b><i>M</i></b>))))))",
            "component": "<b><i>software</i></b>",
            "CoCoSpecCode": "S( (((,,( ( ( (C) and (pre ( not (C)))) or ((C) and (( not M) and (FTP() or (pre ( M )))))) and ( not (P)), (H(((M and (pre (  not M ))) and ( not FTP())) => (pre (((,,( ( ( (C) and (pre ( not (C)))) or ((C) and (( not M) and (FTP() or (pre ( M )))))) and ( not (P)))) => (OTlore(3 secs-1, ((( not M) and (FTP() or (pre ( M )))) or (P)) ))) )",
            "diagramVariables": "M = <b><i>M</i></b>,  n = <b><i>3 secs</i></b>, Response = <b><i>(P)</i></b>.",
            "description": "We are working on formalizing this requirement. In the meanwhile, you can see its intended meaning in the diagram provided.",
            "diagram": "Undefined svg."
        },
        "_id": "a46c1e00-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-001F",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_23 = SinPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_23",
                    "SinPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_23 = SinPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_23 = SinPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46c4510-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-012",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from FAULT to TRANSITION when the autopilot is not requesting support (not request) and limits are not exceeded (not limits)",
        "fulltext": "FSM_Sensor shall  always  satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_fault_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                18,
                23
            ],
            "post_condition": "(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                26,
                117
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_fault_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46c9330-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-009",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command transient changes in translational axial acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy airspeed_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "airspeed_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(airspeed_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((airspeed_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46ce150-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-010",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from NOMINAL to FAULT when limits are exceeded",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "limits",
                    "SENSTATE",
                    "sen_fault_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)",
            "responseTextRange": [
                24,
                100
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and limits ) => SENSTATE = sen_fault_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46d0860-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "RollAutopilot shall always satisfy ! autopilot_engaged => roll_actuator_command = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "roll_actuator_command"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(! autopilot_engaged => roll_actuator_command = 0.0)",
            "responseTextRange": [
                27,
                84
            ],
            "ft": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "pt": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ptExpanded": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((not autopilot_engaged => roll_actuator_command = 0.0)))",
            "diagramVariables": "Response = <b><i>(! autopilot_engaged => roll_actuator_command = 0.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46d2f70-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-003B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy (roll_angle < 6.0 & roll_angle > -6.0) => roll_hold_reference =0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                123
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "a46d5680-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NN-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The minimum value of the NN output, z, shall always be greater than or equal to -0.2, regardless of the input values",
        "fulltext": "NN shall always satisfy z >= -0.2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "z"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z >= -0.2)",
            "responseTextRange": [
                16,
                32
            ],
            "ft": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "pt": "(H <b><i>(z >= -0.2)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "ptExpanded": "(H <b><i>(z >= -0.2)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z >= -0.2)))",
            "diagramVariables": "Response = <b><i>(z >= -0.2)</i></b>.",
            "description": "Always, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(z >= -0.2)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46d7d90-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy abs_roll_angle < 33.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_angle < 33.0)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "pt": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_angle < 33.0)))",
            "diagramVariables": "Response = <b><i>(abs_roll_angle < 33.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roll_angle < 33.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46dcbb0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-013",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from TRANSITION to NOMINAL when the autopilot is requesting support (request) and the autopilot reports the correct active mode (mode)",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_transition_state & request) => SENSTATE = sen_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_transition_state",
                    "request",
                    "SENSTATE",
                    "sen_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_transition_state & request ) => SENSTATE = sen_nominal_state)",
            "responseTextRange": [
                24,
                106
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_transition_state and request ) => SENSTATE = sen_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_transition_state & request ) => SENSTATE = sen_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46df2c0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "SWIM-001a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The SWIM Airspeed algorithm shall output the minimum AGCAS airspeed required to perform a 2g flyup as follows:\n\nAuto GCAS Minimum Vcas (knots) = \nSQRT{[2*Load Factor*Gross Weight]/[Air Density at sea level * \n\t\tCoefficient of Lift Max*Wing Area]} / 1.6891 (ft/s/knots)\nwhere\n\tLoad Factor = 2 gs\n\tGross weight of the aircraft\n\tAir Density at sea level = 0.0023769 slugs/ft^3\n\tCoefficient of Lift Max = 1.24 (CAT I) and 1.10 (CAT III)\n\tWing Area of the F-16 = 300 ft^2\nThus,\nIF CAT I, Auto GCAS Minimum Vcas (knots)  = 1.25921 * SQRT(Gross Weight)  + 10.0\nIF CAT III, Auto GCAS Minimum Vcas (knots)  = 1.33694 * SQRT(Gross Weight) + 10.0",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT1) =>  (CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT1",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                97
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46e19d0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NLG-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - pre_yout) <= T * mag(Vt + Vv)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "pre_yout",
                    "T",
                    "Vt",
                    "Vv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))",
            "responseTextRange": [
                24,
                71
            ],
            "ft": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "pt": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))))",
            "diagramVariables": "Response = <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46e67f0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from PULLUP to TRANSITION when the system is supported and sensor data is good",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                111
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46e8f00-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NLG-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout * Xr > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xr"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout * Xr > 0)",
            "responseTextRange": [
                24,
                44
            ],
            "ft": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "pt": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout * Xr > 0)))",
            "diagramVariables": "Response = <b><i>(yout * Xr > 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout * Xr > 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46edd20-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "RollAutopilot shall always satisfy abs_aileron_cmd <= 15.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_aileron_cmd"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(abs_aileron_cmd <= 15.0)",
            "responseTextRange": [
                27,
                57
            ],
            "ft": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "pt": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((abs_aileron_cmd <= 15.0)))",
            "diagramVariables": "Response = <b><i>(abs_aileron_cmd <= 15.0)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs_aileron_cmd <= 15.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46f0430-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (! good & state = ap_nominal_state) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "good",
                    "state",
                    "ap_nominal_state",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                98
            ],
            "ft": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( not good and state = ap_nominal_state ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46f2b40-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-007v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good & ! standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                123
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Autopilot</i></b>\" shall satisfy <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a46f7960-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-003b",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy abs(roll_angle) < 6.0 => roll_hold_reference = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs",
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                107
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs ( roll_angle ) < 6.0 -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs ( roll_angle ) < 6.0 => roll_hold_reference = 0.0)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "a46fee90-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TSM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor  shall  always  satisfy  (no_fail => (set_val = mid_value))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "no_fail",
                    "set_val",
                    "mid_value"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                29,
                34
            ],
            "post_condition": "(( no_fail => ( set_val = mid_value ) ))",
            "responseTextRange": [
                37,
                79
            ],
            "ft": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "pt": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( no_fail => ( set_val = mid_value ) ))))",
            "diagramVariables": "Response = <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a47063c0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "SWIM-001b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT3) => (CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0)) ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT3",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                96
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a470d8f0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-010",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Height Regulator Shall not command transient changes in translational height acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy height_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "height_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(height_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                65
            ],
            "ft": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((height_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(height_command_acceleration <= 32.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(height_command_acceleration <= 32.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4712710-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-001G",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_31 = SinPhi * SinPsi + CosTheta *SinTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_31",
                    "SinPhi",
                    "SinPsi",
                    "CosTheta",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)",
            "responseTextRange": [
                19,
                83
            ],
            "ft": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4717530-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NN-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The maximum value of NN output, z, shall always be less than or equal to 1.1, regardless of the input values",
        "fulltext": "NN shall always satisfy z <=1.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "z"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z <= 1.1)",
            "responseTextRange": [
                16,
                30
            ],
            "ft": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "pt": "(H <b><i>(z <= 1.1)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "ptExpanded": "(H <b><i>(z <= 1.1)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z <= 1.1)))",
            "diagramVariables": "Response = <b><i>(z <= 1.1)</i></b>.",
            "description": "Always, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(z <= 1.1)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a471ea60-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "Testing after",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "",
        "fulltext": "after initialization mode AUTOPILOT  shall after 3 seconds satisfy xin > 0",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "xin"
                ],
                "modes": [
                    "initialization"
                ]
            },
            "scope_mode": "initialization",
            "scopeTextRange": [
                0,
                24
            ],
            "component_name": "AUTOPILOT",
            "componentTextRange": [
                26,
                34
            ],
            "duration": "3 seconds",
            "timingTextRange": [
                43,
                57
            ],
            "post_condition": "(xin > 0)",
            "responseTextRange": [
                59,
                73
            ],
            "ft": "((!Lin_<b><i>initialization</i></b>) U (Lin_<b><i>initialization</i></b> & (X ((!(F[<=<b><i>3 seconds</i></b>] (!(!<b><i>(xin > 0)</i></b>)))) & (F[<=<b><i>3 seconds</i></b>+1] <b><i>(xin > 0)</i></b>))))) | (G (!Lin_<b><i>initialization</i></b>))",
            "pt": "Under construction.",
            "ftExpanded": "((!(<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>))) U ((<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>)) & (X ((!(F[<=<b><i>3 seconds</i></b>] (!(!<b><i>(xin > 0)</i></b>)))) & (F[<=<b><i>3 seconds</i></b>+1] <b><i>(xin > 0)</i></b>))))) | (G (!(<b><i>initialization</i></b> & X (! <b><i>initialization</i></b>))))",
            "ptExpanded": "Under construction.",
            "component": "<b><i>AUTOPILOT</i></b>",
            "CoCoSpecCode": "Under construction.",
            "diagramVariables": "M = <b><i>initialization</i></b>,  n = <b><i>3 seconds</i></b>, Response = <b><i>(xin > 0)</i></b>.",
            "description": "After <b><i>3 seconds</i></b>, the component \"<b><i>AUTOPILOT</i></b>\" shall satisfy <b><i>(xin > 0)</i></b>. This is only enforced strictly after the first occurence of <b><i>initialization</i></b> (if <b><i>initialization</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_after_satisfaction.svg"
        },
        "_id": "a4725f90-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-011v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                24,
                117
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4725f91-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "SIM-001SP",
        "parent_reqid": "",
        "project": "SemanticsPaper",
        "rationale": "",
        "fulltext": "After phase_1 the simulation shall always satisfy VelDiff < 5 feet per minute",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "VelDiff"
                ],
                "modes": [
                    "phase_1"
                ]
            },
            "scope_mode": "phase_1",
            "scopeTextRange": [
                0,
                12
            ],
            "component_name": "simulation",
            "componentTextRange": [
                14,
                27
            ],
            "timingTextRange": [
                35,
                40
            ],
            "post_condition": "(VelDiff < 5)",
            "responseTextRange": [
                42,
                60
            ],
            "ft": "(((! FLin_<b><i>phase_1</i></b>) U (FLin_<b><i>phase_1</i></b> & (X (LAST V <b><i>(VelDiff < 5)</i></b>)))) | (LAST V (! FLin_<b><i>phase_1</i></b>)))",
            "pt": "((O FLin_<b><i>phase_1</i></b>) -> (<b><i>(VelDiff < 5)</i></b> S (<b><i>(VelDiff < 5)</i></b> & FLin_<b><i>phase_1</i></b>)))",
            "ftExpanded": "(((! ((<b><i>phase_1</i></b> & (! LAST)) & (X (! <b><i>phase_1</i></b>)))) U (((<b><i>phase_1</i></b> & (! LAST)) & (X (! <b><i>phase_1</i></b>))) & (X (LAST V <b><i>(VelDiff < 5)</i></b>)))) | (LAST V (! ((<b><i>phase_1</i></b> & (! LAST)) & (X (! <b><i>phase_1</i></b>))))))",
            "ptExpanded": "((O (((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)) & (Y (H (! ((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>))))))) -> (<b><i>(VelDiff < 5)</i></b> S (<b><i>(VelDiff < 5)</i></b> & (((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)) & (Y (H (! ((! <b><i>phase_1</i></b>) & (Y <b><i>phase_1</i></b>)))))))))",
            "component": "<b><i>simulation</i></b>",
            "CoCoSpecCode": "((O((( not phase_1) and (pre (phase_1))) and pre (H( not (( not phase_1) and (pre (phase_1))))))) => (SI( ((( not phase_1) and (pre (phase_1))) and pre (H( not (( not phase_1) and (pre (phase_1)))))), (VelDiff < 5) )))",
            "diagramVariables": "M = <b><i>phase_1</i></b>, Response = <b><i>(VelDiff < 5)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>phase_1</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "a472adb0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "Kandy1",
        "parent_reqid": "",
        "project": "TestRequirements",
        "rationale": "In reality we want to check it within 1-sigma which is 70% of the time (?)",
        "fulltext": "when GPSavailable the AVAprototype shall always satisfy difference(measured, actual) <1",
        "semantics": {
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "GPSavailable",
                    "difference",
                    "measured",
                    "actual"
                ],
                "modes": []
            },
            "regular_condition": "(GPSavailable)",
            "qualifier_word": "when",
            "pre_condition": "(GPSavailable)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "AVAprototype",
            "componentTextRange": [
                18,
                33
            ],
            "timingTextRange": [
                41,
                46
            ],
            "post_condition": "(difference ( measured , actual ) < 1)",
            "responseTextRange": [
                48,
                86
            ],
            "ft": "(G (((!<b><i>(GPSavailable)</i></b>) & (X <b><i>(GPSavailable)</i></b>)) -> (X (G <b><i>(difference ( measured , actual ) < 1)</i></b>)))) & (<b><i>(GPSavailable)</i></b> -> (G <b><i>(difference ( measured , actual ) < 1)</i></b>))",
            "pt": "(((!<b><i>(GPSavailable)</i></b>) S ((!<b><i>(GPSavailable)</i></b>) & FTP)) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & ((<b><i>(GPSavailable)</i></b> & (Y (!<b><i>(GPSavailable)</i></b>))) | (<b><i>(GPSavailable)</i></b> & FTP))))) S ((((!<b><i>(GPSavailable)</i></b>) S ((!<b><i>(GPSavailable)</i></b>) & FTP)) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & ((<b><i>(GPSavailable)</i></b> & (Y (!<b><i>(GPSavailable)</i></b>))) | (<b><i>(GPSavailable)</i></b> & FTP))))) & FTP)",
            "ftExpanded": "(G (((!<b><i>(GPSavailable)</i></b>) & (X <b><i>(GPSavailable)</i></b>)) -> (X (G <b><i>(difference ( measured , actual ) < 1)</i></b>)))) & (<b><i>(GPSavailable)</i></b> -> (G <b><i>(difference ( measured , actual ) < 1)</i></b>))",
            "ptExpanded": "(((!<b><i>(GPSavailable)</i></b>) S ((!<b><i>(GPSavailable)</i></b>) & (! Y TRUE))) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & ((<b><i>(GPSavailable)</i></b> & (Y (!<b><i>(GPSavailable)</i></b>))) | (<b><i>(GPSavailable)</i></b> & (! Y TRUE)))))) S ((((!<b><i>(GPSavailable)</i></b>) S ((!<b><i>(GPSavailable)</i></b>) & (! Y TRUE))) | (<b><i>(difference ( measured , actual ) < 1)</i></b> S (<b><i>(difference ( measured , actual ) < 1)</i></b> & ((<b><i>(GPSavailable)</i></b> & (Y (!<b><i>(GPSavailable)</i></b>))) | (<b><i>(GPSavailable)</i></b> & (! Y TRUE)))))) & (! Y TRUE))",
            "component": "<b><i>AVAprototype</i></b>",
            "CoCoSpecCode": "S( (((S( (( not (GPSavailable)) and FTP()), ( not (GPSavailable)) )) or (S( ((difference ( measured , actual ) < 1) and (((GPSavailable) and (pre ( not (GPSavailable)))) or ((GPSavailable) and FTP()))), (difference ( measured , actual ) < 1) ))) and FTP()), ((S( (( not (GPSavailable)) and FTP()), ( not (GPSavailable)) )) or (S( ((difference ( measured , actual ) < 1) and (((GPSavailable) and (pre ( not (GPSavailable)))) or ((GPSavailable) and FTP()))), (difference ( measured , actual ) < 1) ))) )",
            "diagramVariables": "Response = <b><i>(difference ( measured , actual ) < 1)</i></b>.",
            "description": "Upon <b><i>(GPSavailable)</i></b> becoming true, always, the component \"<b><i>AVAprototype</i></b>\" shall satisfy <b><i>(difference ( measured , actual ) < 1)</i></b>.",
            "diagram": "Undefined svg."
        },
        "_id": "a472fbd0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Pitch Regulator shall not command angular pitch accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_pitch_output_exceeding_50 <= 100 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_pitch_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_pitch_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                68
            ],
            "ft": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_pitch_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a47322e0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "Kandy2a",
        "parent_reqid": "Kandy2",
        "project": "TestRequirements",
        "rationale": "This is required to achieve the desired orbit of the payloads. It should happen within 1-sigma (70% of time)?",
        "fulltext": "After BoostCompleted the AvaPrototype shall always satisfy flightPathAngleDiff < 0.5",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flightPathAngleDiff"
                ],
                "modes": [
                    "BoostCompleted"
                ]
            },
            "scope_mode": "BoostCompleted",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "AvaPrototype",
            "componentTextRange": [
                21,
                36
            ],
            "timingTextRange": [
                44,
                49
            ],
            "post_condition": "(flightPathAngleDiff < 0.5)",
            "responseTextRange": [
                51,
                83
            ],
            "ft": "((!Lin_<b><i>BoostCompleted</i></b>) U (Lin_<b><i>BoostCompleted</i></b> & (X (G <b><i>(flightPathAngleDiff < 0.5)</i></b>)))) | (G (!Lin_<b><i>BoostCompleted</i></b>))",
            "pt": "(O FLin_<b><i>BoostCompleted</i></b>) -> (<b><i>(flightPathAngleDiff < 0.5)</i></b> S (<b><i>(flightPathAngleDiff < 0.5)</i></b> & FLin_<b><i>BoostCompleted</i></b>))",
            "ftExpanded": "((!(<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>))) U ((<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>)) & (X (G <b><i>(flightPathAngleDiff < 0.5)</i></b>)))) | (G (!(<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>))))",
            "ptExpanded": "(O (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))) -> (<b><i>(flightPathAngleDiff < 0.5)</i></b> S (<b><i>(flightPathAngleDiff < 0.5)</i></b> & (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))))",
            "component": "<b><i>AvaPrototype</i></b>",
            "CoCoSpecCode": "(O((( not BoostCompleted) and (pre ( BoostCompleted ))) and pre (H( not (( not BoostCompleted) and (pre ( BoostCompleted ))))))) => (S( ((flightPathAngleDiff < 0.5) and ((( not BoostCompleted) and (pre ( BoostCompleted ))) and pre (H( not (( not BoostCompleted) and (pre ( BoostCompleted ))))))), (flightPathAngleDiff < 0.5) ))",
            "diagramVariables": "M = <b><i>BoostCompleted</i></b>, Response = <b><i>(flightPathAngleDiff < 0.5)</i></b>.",
            "description": "Always, the component \"<b><i>AvaPrototype</i></b>\" shall satisfy <b><i>(flightPathAngleDiff < 0.5)</i></b>. This is only enforced strictly after the first occurence of <b><i>BoostCompleted</i></b> (if <b><i>BoostCompleted</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "a47349f0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "NLG-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout(3) - Xtarg(3) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xtarg"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout ( 3 ) - Xtarg ( 3 ) = 0)",
            "responseTextRange": [
                24,
                53
            ],
            "ft": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "pt": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout ( 3 ) - Xtarg ( 3 ) = 0)))",
            "diagramVariables": "Response = <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4739810-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-001v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).",
        "fulltext": "FSM  shall  always  satisfy (limits & !standby & !apfail & supported) => pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "limits",
                    "standby",
                    "apfail",
                    "supported",
                    "pullup"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( limits & ! standby & ! apfail & supported ) => pullup)",
            "responseTextRange": [
                20,
                78
            ],
            "ft": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "pt": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ptExpanded": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( limits and not standby and not apfail and supported ) => pullup)))",
            "diagramVariables": "Response = <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a473bf20-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-008A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy hdg_mode_is_active",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_mode_is_active"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(hdg_mode_is_active)",
            "responseTextRange": [
                44,
                69
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg_hold</i></b> & (! FTP)) -> (Y (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & Fin_<b><i>hdg_hold</i></b>))))) & (((! Lin_<b><i>hdg_hold</i></b>) S ((! Lin_<b><i>hdg_hold</i></b>) & Fin_<b><i>hdg_hold</i></b>)) -> (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & Fin_<b><i>hdg_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg_hold</i></b>) & (! LAST)) & (X <b><i>hdg_hold</i></b>)) & (! LAST))) | (X ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))) & (((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) S ((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>)))))) -> (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg_hold) and (pre (hdg_hold))) and ( not FTP)) => (pre (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (hdg_mode_is_active) ))))) and ((SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), ( not (( not hdg_hold) and (pre (hdg_hold)))) )) => (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (hdg_mode_is_active) ))))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(hdg_mode_is_active)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(hdg_mode_is_active)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>hdg_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a4740d40-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-001E",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_22 = (CosPhi * CosPsi + SinPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_22",
                    "CosPhi",
                    "CosPsi",
                    "SinPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                84
            ],
            "ft": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4743450-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "TSM-003a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "In the single fail state, a good channel average of the remaining two good branches shall be used to determine the selected value (1)",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =1 => set_val = 0.5 * (ia +ib)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ib"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 1 => set_val = 0.5 * ( ia + ib ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "pt": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 1 => set_val = 0.5 * ( ia + ib ))))",
            "diagramVariables": "Response = <b><i>(FC = 1 => set_val = 0.5 * ( ia + ib ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(FC = 1 => set_val = 0.5 * ( ia + ib ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4748270-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "Kandy2b",
        "parent_reqid": "Kandy2",
        "project": "TestRequirements",
        "rationale": "This is the goal (and Kandy2a is what is the least expected)",
        "fulltext": "After BoostCompleted the AvaPrototype shall always satisfy flightPathAngleDiff < 0.1",
        "semantics": {
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "flightPathAngleDiff"
                ],
                "modes": [
                    "BoostCompleted"
                ]
            },
            "scope_mode": "BoostCompleted",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "AvaPrototype",
            "componentTextRange": [
                21,
                36
            ],
            "timingTextRange": [
                44,
                49
            ],
            "post_condition": "(flightPathAngleDiff < 0.1)",
            "responseTextRange": [
                51,
                83
            ],
            "ft": "((!Lin_<b><i>BoostCompleted</i></b>) U (Lin_<b><i>BoostCompleted</i></b> & (X (G <b><i>(flightPathAngleDiff < 0.1)</i></b>)))) | (G (!Lin_<b><i>BoostCompleted</i></b>))",
            "pt": "(O FLin_<b><i>BoostCompleted</i></b>) -> (<b><i>(flightPathAngleDiff < 0.1)</i></b> S (<b><i>(flightPathAngleDiff < 0.1)</i></b> & FLin_<b><i>BoostCompleted</i></b>))",
            "ftExpanded": "((!(<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>))) U ((<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>)) & (X (G <b><i>(flightPathAngleDiff < 0.1)</i></b>)))) | (G (!(<b><i>BoostCompleted</i></b> & X (! <b><i>BoostCompleted</i></b>))))",
            "ptExpanded": "(O (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))) -> (<b><i>(flightPathAngleDiff < 0.1)</i></b> S (<b><i>(flightPathAngleDiff < 0.1)</i></b> & (((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)) & Y (H (! ((! <b><i>BoostCompleted</i></b>) & (Y <b><i>BoostCompleted</i></b>)))))))",
            "component": "<b><i>AvaPrototype</i></b>",
            "CoCoSpecCode": "(O((( not BoostCompleted) and (pre ( BoostCompleted ))) and pre (H( not (( not BoostCompleted) and (pre ( BoostCompleted ))))))) => (S( ((flightPathAngleDiff < 0.1) and ((( not BoostCompleted) and (pre ( BoostCompleted ))) and pre (H( not (( not BoostCompleted) and (pre ( BoostCompleted ))))))), (flightPathAngleDiff < 0.1) ))",
            "diagramVariables": "M = <b><i>BoostCompleted</i></b>, Response = <b><i>(flightPathAngleDiff < 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>AvaPrototype</i></b>\" shall satisfy <b><i>(flightPathAngleDiff < 0.1)</i></b>. This is only enforced strictly after the first occurence of <b><i>BoostCompleted</i></b> (if <b><i>BoostCompleted</i></b> ever occurs).",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_always_satisfaction.svg"
        },
        "_id": "a474a980-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "REG-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Yaw Regulator Shall not command angular yaw accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_yaw_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_yaw_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_yaw_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                66
            ],
            "ft": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_yaw_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a474f7a0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-002B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_21",
                    "VI_1",
                    "R_21",
                    "VI_2",
                    "R_22",
                    "VI_3",
                    "R_23"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "pt": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)))",
            "diagramVariables": "Response = <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4751eb0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-008B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy roll_cmd = hdg_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "hdg_hold_mode_cmd"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(roll_cmd = hdg_hold_mode_cmd)",
            "responseTextRange": [
                44,
                79
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg_hold</i></b> & (! FTP)) -> (Y (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & Fin_<b><i>hdg_hold</i></b>))))) & (((! Lin_<b><i>hdg_hold</i></b>) S ((! Lin_<b><i>hdg_hold</i></b>) & Fin_<b><i>hdg_hold</i></b>)) -> (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & Fin_<b><i>hdg_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg_hold</i></b>) & (! LAST)) & (X <b><i>hdg_hold</i></b>)) & (! LAST))) | (X ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))) & (((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) S ((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>)))))) -> (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg_hold) and (pre (hdg_hold))) and ( not FTP)) => (pre (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (roll_cmd = hdg_hold_mode_cmd) ))))) and ((SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), ( not (( not hdg_hold) and (pre (hdg_hold)))) )) => (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (roll_cmd = hdg_hold_mode_cmd) ))))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>hdg_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "a47545c0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "AP-003C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The roll hold reference shall be set to 30 degrees in the same direction as the actual roll angle if the actual roll angle is greater than 30 degrees at the time of roll hold engagement.",
        "fulltext": "in roll_hold  mode RollAutopilot shall immediately satisfy abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign(roll_angle)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle",
                    "roll_hold_reference",
                    "sign",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                17
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                19,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))",
            "responseTextRange": [
                51,
                129
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "a4756cd0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-001B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_12 = CosTheta * SinPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_12",
                    "CosTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_12 = CosTheta * SinPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_12 = CosTheta * SinPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a475baf0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EUL-001H",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_32 = (- SinPhi * CosPsi) + (CosPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_32",
                    "SinPhi",
                    "CosPsi",
                    "CosPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                88
            ],
            "ft": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a475e200-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "FSM-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from MANEUVER to STANDBY when the pilot is in control (standby) and sensor data is good",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & standby & good) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "standby",
                    "good",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                106
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and standby and good ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4760910-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "MG1-06A",
        "parent_reqid": "",
        "project": "test-hackathon",
        "rationale": "",
        "fulltext": "Satellite_one shall always satisfy sum_twoAndThree < 25.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "sum_twoAndThree"
                ],
                "modes": []
            },
            "component_name": "Satellite_one",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(sum_twoAndThree < 25.0)",
            "responseTextRange": [
                27,
                56
            ],
            "ft": "(LAST V <b><i>(sum_twoAndThree < 25.0)</i></b>)",
            "pt": "(H <b><i>(sum_twoAndThree < 25.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(sum_twoAndThree < 25.0)</i></b>)",
            "ptExpanded": "(H <b><i>(sum_twoAndThree < 25.0)</i></b>)",
            "component": "<b><i>Satellite_one</i></b>",
            "CoCoSpecCode": "(H((sum_twoAndThree < 25.0)))",
            "diagramVariables": "Response = <b><i>(sum_twoAndThree < 25.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4765730-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "MG1-05a",
        "parent_reqid": "",
        "project": "test-hackathon",
        "rationale": "",
        "fulltext": "Satellite_one shall always satisfy sum_oneAndtwo < 45.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "sum_oneAndtwo"
                ],
                "modes": []
            },
            "component_name": "Satellite_one",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(sum_oneAndtwo < 45.0)",
            "responseTextRange": [
                27,
                54
            ],
            "ft": "(LAST V <b><i>(sum_oneAndtwo < 45.0)</i></b>)",
            "pt": "(H <b><i>(sum_oneAndtwo < 45.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(sum_oneAndtwo < 45.0)</i></b>)",
            "ptExpanded": "(H <b><i>(sum_oneAndtwo < 45.0)</i></b>)",
            "component": "<b><i>Satellite_one</i></b>",
            "CoCoSpecCode": "(H((sum_oneAndtwo < 45.0)))",
            "diagramVariables": "Response = <b><i>(sum_oneAndtwo < 45.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4767e40-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "MG1-03",
        "parent_reqid": "",
        "project": "test-hackathon",
        "rationale": "",
        "fulltext": "Satellite_one shall always satisfy mass_two <=20.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mass_two"
                ],
                "modes": []
            },
            "component_name": "Satellite_one",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(mass_two <= 20.0)",
            "responseTextRange": [
                27,
                49
            ],
            "ft": "(LAST V <b><i>(mass_two <= 20.0)</i></b>)",
            "pt": "(H <b><i>(mass_two <= 20.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mass_two <= 20.0)</i></b>)",
            "ptExpanded": "(H <b><i>(mass_two <= 20.0)</i></b>)",
            "component": "<b><i>Satellite_one</i></b>",
            "CoCoSpecCode": "(H((mass_two <= 20.0)))",
            "diagramVariables": "Response = <b><i>(mass_two <= 20.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a476cc60-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "MG1-01",
        "parent_reqid": "",
        "project": "test-hackathon",
        "rationale": "",
        "fulltext": "Satellite_one shall always satisfy total_mass < 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "total_mass"
                ],
                "modes": []
            },
            "component_name": "Satellite_one",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(total_mass < 50.0)",
            "responseTextRange": [
                27,
                51
            ],
            "ft": "(LAST V <b><i>(total_mass < 50.0)</i></b>)",
            "pt": "(H <b><i>(total_mass < 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(total_mass < 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(total_mass < 50.0)</i></b>)",
            "component": "<b><i>Satellite_one</i></b>",
            "CoCoSpecCode": "(H((total_mass < 50.0)))",
            "diagramVariables": "Response = <b><i>(total_mass < 50.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a476f370-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-001",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "While not liquid level 1 is reached, when start button is pressed the liquid mixer components shall open valve 0",
        "fulltext": "when start_button liquid_mixer shall at the next timepoint satisfy if ! liquid_level_1 then valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "start_button",
                    "liquid_level_1",
                    "valve_0"
                ],
                "modes": []
            },
            "regular_condition": "(start_button)",
            "qualifier_word": "when",
            "pre_condition": "(start_button)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                18,
                29
            ],
            "timingTextRange": [
                37,
                57
            ],
            "post_condition": "(! liquid_level_1 => valve_0)",
            "responseTextRange": [
                59,
                98
            ],
            "ft": "((LAST V (((! <b><i>(start_button)</i></b>) & ((! LAST) & (X <b><i>(start_button)</i></b>))) -> (X (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))) & (<b><i>(start_button)</i></b> -> (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))",
            "pt": "(H ((Y (<b><i>(start_button)</i></b> & ((Y (! <b><i>(start_button)</i></b>)) | FTP))) -> (<b><i>(! liquid_level_1 -> valve_0)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(start_button)</i></b>) & ((! LAST) & (X <b><i>(start_button)</i></b>))) -> (X (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))) & (<b><i>(start_button)</i></b> -> (LAST | (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(start_button)</i></b> & ((Y (! <b><i>(start_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! liquid_level_1 -> valve_0)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((start_button) and ((pre ( not (start_button))) or FTP))) => ((not liquid_level_1 => valve_0) or FTP)))",
            "diagramVariables": "TC = <b><i>(start_button)</i></b>, Response = <b><i>(! liquid_level_1 => valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(start_button)</i></b> is true and any point in the interval where <b><i>(start_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a4771a80-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "EVG1-01",
        "parent_reqid": "",
        "project": "test-hackathon",
        "rationale": "",
        "fulltext": "If detected_failure, software shall satisfy send_message & remove_power",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "detected_failure",
                    "send_message",
                    "remove_power"
                ],
                "modes": []
            },
            "regular_condition": "(detected_failure)",
            "qualifier_word": "if",
            "pre_condition": "(detected_failure)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "software",
            "componentTextRange": [
                21,
                28
            ],
            "post_condition": "(send_message & remove_power)",
            "responseTextRange": [
                36,
                70
            ],
            "ft": "((LAST V (((! <b><i>(detected_failure)</i></b>) & ((! LAST) & (X <b><i>(detected_failure)</i></b>))) -> (X ((! LAST) U <b><i>(send_message & remove_power)</i></b>)))) & (<b><i>(detected_failure)</i></b> -> ((! LAST) U <b><i>(send_message & remove_power)</i></b>)))",
            "pt": "((H (! <b><i>(detected_failure)</i></b>)) | (! ((! <b><i>(send_message & remove_power)</i></b>) S ((! <b><i>(send_message & remove_power)</i></b>) & (<b><i>(detected_failure)</i></b> & ((Y (! <b><i>(detected_failure)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(detected_failure)</i></b>) & ((! LAST) & (X <b><i>(detected_failure)</i></b>))) -> (X ((! LAST) U <b><i>(send_message & remove_power)</i></b>)))) & (<b><i>(detected_failure)</i></b> -> ((! LAST) U <b><i>(send_message & remove_power)</i></b>)))",
            "ptExpanded": "((H (! <b><i>(detected_failure)</i></b>)) | (! ((! <b><i>(send_message & remove_power)</i></b>) S ((! <b><i>(send_message & remove_power)</i></b>) & (<b><i>(detected_failure)</i></b> & ((Y (! <b><i>(detected_failure)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>software</i></b>",
            "CoCoSpecCode": "((H( not (detected_failure))) or ( not (SI( ((detected_failure) and ((pre ( not (detected_failure))) or FTP)), ( not (send_message and remove_power)) ))))",
            "diagramVariables": "TC = <b><i>(detected_failure)</i></b>, Response = <b><i>(send_message & remove_power)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(detected_failure)</i></b> is true and any point in the interval where <b><i>(detected_failure)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg"
        },
        "_id": "a4778fb0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-006",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached happens, liquid mixer controller shall start stirring motor until 60 second timer expires or emergency button is pressed.",
        "fulltext": "when liquid_level_2, the liquid_mixer shall until (timer_60sec_expire | emergency_button) satisfy stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "timer_60sec_expire",
                    "emergency_button",
                    "stirring_motor"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_2)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                21,
                36
            ],
            "stop_condition": "(( timer_60sec_expire | emergency_button ))",
            "timingTextRange": [
                44,
                88
            ],
            "post_condition": "(stirring_motor)",
            "responseTextRange": [
                90,
                111
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "pt": "(H ((H (! <b><i>(liquid_level_2)</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP)))) -> <b><i>(stirring_motor)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(liquid_level_2)</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(stirring_motor)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (liquid_level_2))) or ((SI( ((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP)), ( not (( timer_60sec_expire or emergency_button ))) )) => (stirring_motor))))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, SC = <b><i>(( timer_60sec_expire | emergency_button ))</i></b>, Response = <b><i>(stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "a477b6c0-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-003",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "While not liquid level 2 is reached, when liquid level 1 is reached the liquid mixer controller shall open valve 1 until emergency button is pressed.",
        "fulltext": "if liquid_level_1 the liquid_mixer shall until emergency_button satisfy if ! liquid_level_2 then valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1",
                    "emergency_button",
                    "liquid_level_2",
                    "valve_1"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_1)",
            "qualifier_word": "if",
            "pre_condition": "(liquid_level_1)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                18,
                33
            ],
            "stop_condition": "(emergency_button)",
            "timingTextRange": [
                41,
                62
            ],
            "post_condition": "(! liquid_level_2 => valve_1)",
            "responseTextRange": [
                64,
                103
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "pt": "(H ((H (! <b><i>(liquid_level_1)</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | FTP)))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(liquid_level_1)</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (liquid_level_1))) or ((SI( ((liquid_level_1) and ((pre ( not (liquid_level_1))) or FTP)), ( not (emergency_button)) )) => (not liquid_level_2 => valve_1))))",
            "diagramVariables": "TC = <b><i>(liquid_level_1)</i></b>, SC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! liquid_level_2 => valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_1)</i></b> is true and any point in the interval where <b><i>(liquid_level_1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "a4785300-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-004",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached occurs, the liquid mixer controller shall close valve 1.",
        "fulltext": "when liquid_level_2 the liquid_mixer shall at the next timepoint satisfy !valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "valve_1"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_2)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                63
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                65,
                80
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "pt": "(H ((Y (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP))) -> (<b><i>(! valve_1)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X (LAST | (X <b><i>(! valve_1)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> (LAST | (X <b><i>(! valve_1)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_1)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP))) => ((not valve_1) or FTP)))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a4787a10-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-008",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When 60 second timer expires happens, the liquid mixer controller shall open valve 2 until 120 sec timer expires or emergency button is pressed.",
        "fulltext": "when timer_60sec_expire, the liquid_mixer shall until (timer_120sec_expire | emergency_button) satisfy valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "timer_60sec_expire",
                    "timer_120sec_expire",
                    "emergency_button",
                    "valve_2"
                ],
                "modes": []
            },
            "regular_condition": "(timer_60sec_expire)",
            "qualifier_word": "when",
            "pre_condition": "(timer_60sec_expire)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                25,
                40
            ],
            "stop_condition": "(( timer_120sec_expire | emergency_button ))",
            "timingTextRange": [
                48,
                93
            ],
            "post_condition": "(valve_2)",
            "responseTextRange": [
                95,
                109
            ],
            "ft": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "pt": "(H ((H (! <b><i>(timer_60sec_expire)</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | FTP)))) -> <b><i>(valve_2)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(timer_60sec_expire)</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(valve_2)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (timer_60sec_expire))) or ((SI( ((timer_60sec_expire) and ((pre ( not (timer_60sec_expire))) or FTP)), ( not (( timer_120sec_expire or emergency_button ))) )) => (valve_2))))",
            "diagramVariables": "TC = <b><i>(timer_60sec_expire)</i></b>, SC = <b><i>(( timer_120sec_expire | emergency_button ))</i></b>, Response = <b><i>(valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timer_60sec_expire)</i></b> is true and any point in the interval where <b><i>(timer_60sec_expire)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "a478c830-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "PAG1-02",
        "parent_reqid": "",
        "project": "test-hackathon",
        "rationale": "",
        "fulltext": "GUI shall never satisfy changingUnits",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "never",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "changingUnits"
                ],
                "modes": []
            },
            "component_name": "GUI",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                14
            ],
            "post_condition": "(changingUnits)",
            "responseTextRange": [
                16,
                36
            ],
            "ft": "(LAST V (! <b><i>(changingUnits)</i></b>))",
            "pt": "(H (! <b><i>(changingUnits)</i></b>))",
            "ftExpanded": "(LAST V (! <b><i>(changingUnits)</i></b>))",
            "ptExpanded": "(H (! <b><i>(changingUnits)</i></b>))",
            "component": "<b><i>GUI</i></b>",
            "CoCoSpecCode": "(H( not (changingUnits)))",
            "diagramVariables": "Response = <b><i>(changingUnits)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_never_satisfaction.svg"
        },
        "_id": "a478ef40-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "MG1-04",
        "parent_reqid": "",
        "project": "test-hackathon",
        "rationale": "",
        "fulltext": "Satellite_one shall always satisfy mass_three <= 5.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mass_three"
                ],
                "modes": []
            },
            "component_name": "Satellite_one",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(mass_three <= 5.0)",
            "responseTextRange": [
                27,
                51
            ],
            "ft": "(LAST V <b><i>(mass_three <= 5.0)</i></b>)",
            "pt": "(H <b><i>(mass_three <= 5.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mass_three <= 5.0)</i></b>)",
            "ptExpanded": "(H <b><i>(mass_three <= 5.0)</i></b>)",
            "component": "<b><i>Satellite_one</i></b>",
            "CoCoSpecCode": "(H((mass_three <= 5.0)))",
            "diagramVariables": "Response = <b><i>(mass_three <= 5.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "a4793d60-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-assumption1",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "",
        "fulltext": "the liquid_mixer shall immediately satisfy ! liquid_level_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1"
                ],
                "modes": []
            },
            "component_name": "liquid_mixer",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(! liquid_level_1)",
            "responseTextRange": [
                35,
                58
            ],
            "ft": "<b><i>(! liquid_level_1)</i></b>",
            "pt": "(H (FTP -> <b><i>(! liquid_level_1)</i></b>))",
            "ftExpanded": "<b><i>(! liquid_level_1)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(! liquid_level_1)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(FTP => (not liquid_level_1)))",
            "diagramVariables": "Response = <b><i>(! liquid_level_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "a4796470-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-009",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 0.",
        "fulltext": "when emergency_button, the liquid_mixer shall at the next timepoint satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_0"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                23,
                38
            ],
            "timingTextRange": [
                46,
                66
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                68,
                84
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "pt": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP))) -> (<b><i>(! valve_0)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_0)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_0)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_0)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((emergency_button) and ((pre ( not (emergency_button))) or FTP))) => ((not valve_0) or FTP)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a4798b80-1ef2-11eb-989a-73686dd31a0c"
    },
    {
        "reqid": "LM-011",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 2.",
        "fulltext": "when emergency_button the liquid_mixer shall at the next timepoint satisfy ! valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_2"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(! valve_2)",
            "responseTextRange": [
                67,
                83
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_2)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_2)</i></b>))))",
            "pt": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP))) -> (<b><i>(! valve_2)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X (LAST | (X <b><i>(! valve_2)</i></b>))))) & (<b><i>(emergency_button)</i></b> -> (LAST | (X <b><i>(! valve_2)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(! valve_2)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((pre ((emergency_button) and ((pre ( not (emergency_button))) or FTP))) => ((not valve_2) or FTP)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "a479d9a0-1ef2-11eb-989a-73686dd31a0c"
    }
]