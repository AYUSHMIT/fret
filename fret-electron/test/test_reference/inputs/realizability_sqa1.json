[
    {
        "reqid": "AP-003C",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The roll hold reference shall be set to 30 degrees in the same direction as the actual roll angle if the actual roll angle is greater than 30 degrees at the time of roll hold engagement.",
        "fulltext": "in roll_hold  mode RollAutopilot shall immediately satisfy abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign(roll_angle)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle",
                    "roll_hold_reference",
                    "sign",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                17
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                19,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))",
            "responseTextRange": [
                51,
                129
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "pt": "(H (Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "ptExpanded": "(H ((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "47e507d0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-001",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "In the no-fail state, a mis-compare, which shall be characterized by one branch differing with the other two branches by a unique trip level that lasts for more than the persistence limit, shall be reported to failure management as a failure.",
        "fulltext": "TriplexSignalMonitor shall always satisfy ((pre_no_fail & failure_must_be_latched)=> single_fail_reported)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pre_no_fail",
                    "failure_must_be_latched",
                    "single_fail_reported"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))",
            "responseTextRange": [
                34,
                105
            ],
            "ft": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "pt": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( ( pre_no_fail and failure_must_be_latched ) => single_fail_reported ))))",
            "diagramVariables": "Response = <b><i>(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e507d1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G7",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "don't move while lifting or dropping\n\nG (lift != NIL -> stopping);",
        "fulltext": "Forklift shall always satisfy lift != NIL => stopping",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lift",
                    "NIL",
                    "stopping"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(lift != NIL => stopping)",
            "responseTextRange": [
                22,
                52
            ],
            "ft": "(LAST V <b><i>(lift != NIL -> stopping)</i></b>)",
            "pt": "(H <b><i>(lift != NIL -> stopping)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(lift != NIL -> stopping)</i></b>)",
            "ptExpanded": "(H <b><i>(lift != NIL -> stopping)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((lift not= NIL => stopping)))",
            "diagramVariables": "Response = <b><i>(lift != NIL => stopping)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e52ee0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G2_3",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "local var spec_loaded\n\nG (lift = NIL -> next (spec_loaded) = spec_loaded);",
        "fulltext": "Forklift shall always satisfy lift_pre = NIL => spec_loaded = spec_loaded_pre",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lift_pre",
                    "NIL",
                    "spec_loaded",
                    "spec_loaded_pre"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(lift_pre = NIL => spec_loaded = spec_loaded_pre)",
            "responseTextRange": [
                22,
                76
            ],
            "ft": "(LAST V <b><i>(lift_pre = NIL -> spec_loaded = spec_loaded_pre)</i></b>)",
            "pt": "(H <b><i>(lift_pre = NIL -> spec_loaded = spec_loaded_pre)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(lift_pre = NIL -> spec_loaded = spec_loaded_pre)</i></b>)",
            "ptExpanded": "(H <b><i>(lift_pre = NIL -> spec_loaded = spec_loaded_pre)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((lift_pre = NIL => spec_loaded = spec_loaded_pre)))",
            "diagramVariables": "Response = <b><i>(lift_pre = NIL => spec_loaded = spec_loaded_pre)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e555f0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-002",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Pitch Regulator shall not command angular pitch accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_pitch_output_exceeding_50 <= 100 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_pitch_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_pitch_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                68
            ],
            "ft": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_pitch_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e555f1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-003B",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByYt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)",
            "responseTextRange": [
                22,
                83
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByYt <= 10.0 and DeltaZDividedByYt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>200</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>200</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>200</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "47e57d00-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "r2",
        "parent_reqid": "",
        "project": "cruise",
        "rationale": "",
        "comments": "",
        "fulltext": "comp shall satisfy if b then !a",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "b",
                    "a"
                ],
                "modes": []
            },
            "component_name": "comp",
            "componentTextRange": [
                0,
                3
            ],
            "post_condition": "(b => ! a)",
            "responseTextRange": [
                11,
                30
            ],
            "ft": "((! LAST) U <b><i>(b -> ! a)</i></b>)",
            "pt": "(O <b><i>(b -> ! a)</i></b>)",
            "ftExpanded": "((! LAST) U <b><i>(b -> ! a)</i></b>)",
            "ptExpanded": "(O <b><i>(b -> ! a)</i></b>)",
            "component": "<b><i>comp</i></b>",
            "CoCoSpecCode": "(O((b => not a)))",
            "diagramVariables": "Response = <b><i>(b => ! a)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg"
        },
        "_id": "47e57d01-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "A2_1",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "leave station eventually\n\nG ((forwarding) -> F (!station | stopping));",
        "fulltext": "if forwarding_pre Forklift shall eventually satisfy (!station | stopping)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "forwarding_pre",
                    "station",
                    "stopping"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(forwarding_pre)",
            "regular_condition": "(forwarding_pre)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "Forklift",
            "componentTextRange": [
                18,
                25
            ],
            "timingTextRange": [
                33,
                42
            ],
            "post_condition": "(( ! station | stopping ))",
            "responseTextRange": [
                44,
                72
            ],
            "ft": "((LAST V (((! <b><i>(forwarding_pre)</i></b>) & ((! LAST) & (X <b><i>(forwarding_pre)</i></b>))) -> (X ((! LAST) U <b><i>(( ! station | stopping ))</i></b>)))) & (<b><i>(forwarding_pre)</i></b> -> ((! LAST) U <b><i>(( ! station | stopping ))</i></b>)))",
            "pt": "((H (! <b><i>(forwarding_pre)</i></b>)) | (! ((! <b><i>(( ! station | stopping ))</i></b>) S ((! <b><i>(( ! station | stopping ))</i></b>) & (<b><i>(forwarding_pre)</i></b> & ((Y (! <b><i>(forwarding_pre)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(forwarding_pre)</i></b>) & ((! LAST) & (X <b><i>(forwarding_pre)</i></b>))) -> (X ((! LAST) U <b><i>(( ! station | stopping ))</i></b>)))) & (<b><i>(forwarding_pre)</i></b> -> ((! LAST) U <b><i>(( ! station | stopping ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(forwarding_pre)</i></b>)) | (! ((! <b><i>(( ! station | stopping ))</i></b>) S ((! <b><i>(( ! station | stopping ))</i></b>) & (<b><i>(forwarding_pre)</i></b> & ((Y (! <b><i>(forwarding_pre)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "((H( not (forwarding_pre))) or ( not (SI( ((forwarding_pre) and ((pre ( not (forwarding_pre))) or FTP)), ( not (( not station or stopping ))) ))))",
            "diagramVariables": "TC = <b><i>(forwarding_pre)</i></b>, Response = <b><i>(( ! station | stopping ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(forwarding_pre)</i></b> is true and any point in the interval where <b><i>(forwarding_pre)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "47e5a410-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "SWIM-001a",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The SWIM Airspeed algorithm shall output the minimum AGCAS airspeed required to perform a 2g flyup as follows:\n\nAuto GCAS Minimum Vcas (knots) = \nSQRT{[2*Load Factor*Gross Weight]/[Air Density at sea level * \n\t\tCoefficient of Lift Max*Wing Area]} / 1.6891 (ft/s/knots)\nwhere\n\tLoad Factor = 2 gs\n\tGross weight of the aircraft\n\tAir Density at sea level = 0.0023769 slugs/ft^3\n\tCoefficient of Lift Max = 1.24 (CAT I) and 1.10 (CAT III)\n\tWing Area of the F-16 = 300 ft^2\nThus,\nIF CAT I, Auto GCAS Minimum Vcas (knots)  = 1.25921 * SQRT(Gross Weight)  + 10.0\nIF CAT III, Auto GCAS Minimum Vcas (knots)  = 1.33694 * SQRT(Gross Weight) + 10.0",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT1) =>  (CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT1",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                97
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e5a411-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-009",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (state = ap_standby_state & apfail) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "apfail",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                88
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and apfail ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e5cb20-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-007",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & supported & good) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                101
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e5cb21-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001H",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_32 = (- SinPhi * CosPsi) + (CosPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_32",
                    "SinPhi",
                    "CosPsi",
                    "CosPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                88
            ],
            "ft": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e5f230-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "initial state\n\nstopping & lift = NIL & !spec_loaded;",
        "fulltext": "Forklift shall immediately satisfy stopping & lift = NIL & !spec_loaded",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "stopping",
                    "lift",
                    "NIL",
                    "spec_loaded"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                25
            ],
            "post_condition": "(stopping & lift = NIL & ! spec_loaded)",
            "responseTextRange": [
                27,
                70
            ],
            "ft": "<b><i>(stopping & lift = NIL & ! spec_loaded)</i></b>",
            "pt": "(H (FTP -> <b><i>(stopping & lift = NIL & ! spec_loaded)</i></b>))",
            "ftExpanded": "<b><i>(stopping & lift = NIL & ! spec_loaded)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(stopping & lift = NIL & ! spec_loaded)</i></b>))",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H(FTP => (stopping and lift = NIL and not spec_loaded)))",
            "diagramVariables": "Response = <b><i>(stopping & lift = NIL & ! spec_loaded)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "47e61940-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G10",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "liveness of system\n\nG F ((lift = DROP) | emgOff | lowObstacle);",
        "fulltext": "Forklift shall eventually satisfy lift = DROP | emgOff | lowObstacle",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lift",
                    "DROP",
                    "emgOff",
                    "lowObstacle"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                24
            ],
            "post_condition": "(lift = DROP | emgOff | lowObstacle)",
            "responseTextRange": [
                26,
                67
            ],
            "ft": "((! LAST) U <b><i>(lift = DROP | emgOff | lowObstacle)</i></b>)",
            "pt": "(O <b><i>(lift = DROP | emgOff | lowObstacle)</i></b>)",
            "ftExpanded": "((! LAST) U <b><i>(lift = DROP | emgOff | lowObstacle)</i></b>)",
            "ptExpanded": "(O <b><i>(lift = DROP | emgOff | lowObstacle)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(O((lift = DROP or emgOff or lowObstacle)))",
            "diagramVariables": "Response = <b><i>(lift = DROP | emgOff | lowObstacle)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg"
        },
        "_id": "47e61941-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-006",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - pre_yout) <= T * mag(Vt + Vv)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "pre_yout",
                    "T",
                    "Vt",
                    "Vv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))",
            "responseTextRange": [
                24,
                71
            ],
            "ft": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "pt": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))))",
            "diagramVariables": "Response = <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e64050-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-001",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy (Vv * yout) > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Vv",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( Vv * yout ) > 0)",
            "responseTextRange": [
                24,
                46
            ],
            "ft": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "pt": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((( Vv * yout ) > 0)))",
            "diagramVariables": "Response = <b><i>(( Vv * yout ) > 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e64051-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-008A",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy hdg_mode_is_active",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_mode_is_active"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(hdg_mode_is_active)",
            "responseTextRange": [
                44,
                69
            ],
            "ft": "(LAST V (<b><i>hdg_hold</i></b> -> <b><i>(hdg_mode_is_active)</i></b>))",
            "pt": "(H (<b><i>hdg_hold</i></b> -> <b><i>(hdg_mode_is_active)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>hdg_hold</i></b> -> <b><i>(hdg_mode_is_active)</i></b>))",
            "ptExpanded": "(H (<b><i>hdg_hold</i></b> -> <b><i>(hdg_mode_is_active)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H(hdg_hold => (hdg_mode_is_active)))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(hdg_mode_is_active)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>hdg_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47e66760-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "A1_1",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "find cargo if going forward to next station\n\nG ((forwarding & !spec_loaded) -> F ((station & cargo = BLOCKED) | backing | stopping));\n",
        "fulltext": "if (forwarding_pre & !spec_loaded_pre) Forklift shall eventually satisfy ((station & cargo = BLOCKED) | backing | stopping)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "forwarding_pre",
                    "spec_loaded_pre",
                    "station",
                    "cargo",
                    "BLOCKED",
                    "backing",
                    "stopping"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(( forwarding_pre & ! spec_loaded_pre ))",
            "regular_condition": "(( forwarding_pre & ! spec_loaded_pre ))",
            "conditionTextRange": [
                0,
                37
            ],
            "component_name": "Forklift",
            "componentTextRange": [
                39,
                46
            ],
            "timingTextRange": [
                54,
                63
            ],
            "post_condition": "(( ( station & cargo = BLOCKED ) | backing | stopping ))",
            "responseTextRange": [
                65,
                122
            ],
            "ft": "((LAST V (((! <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b>) & ((! LAST) & (X <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b>))) -> (X ((! LAST) U <b><i>(( ( station & cargo = BLOCKED ) | backing | stopping ))</i></b>)))) & (<b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b> -> ((! LAST) U <b><i>(( ( station & cargo = BLOCKED ) | backing | stopping ))</i></b>)))",
            "pt": "((H (! <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b>)) | (! ((! <b><i>(( ( station & cargo = BLOCKED ) | backing | stopping ))</i></b>) S ((! <b><i>(( ( station & cargo = BLOCKED ) | backing | stopping ))</i></b>) & (<b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b> & ((Y (! <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b>) & ((! LAST) & (X <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b>))) -> (X ((! LAST) U <b><i>(( ( station & cargo = BLOCKED ) | backing | stopping ))</i></b>)))) & (<b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b> -> ((! LAST) U <b><i>(( ( station & cargo = BLOCKED ) | backing | stopping ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b>)) | (! ((! <b><i>(( ( station & cargo = BLOCKED ) | backing | stopping ))</i></b>) S ((! <b><i>(( ( station & cargo = BLOCKED ) | backing | stopping ))</i></b>) & (<b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b> & ((Y (! <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "((H( not (( forwarding_pre and not spec_loaded_pre )))) or ( not (SI( ((( forwarding_pre and not spec_loaded_pre )) and ((pre ( not (( forwarding_pre and not spec_loaded_pre )))) or FTP)), ( not (( ( station and cargo = BLOCKED ) or backing or stopping ))) ))))",
            "diagramVariables": "TC = <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b>, Response = <b><i>(( ( station & cargo = BLOCKED ) | backing | stopping ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b> is true and any point in the interval where <b><i>(( forwarding_pre & ! spec_loaded_pre ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "47e68e70-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-004",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (! good & state = ap_nominal_state) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "good",
                    "state",
                    "ap_nominal_state",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                88
            ],
            "ft": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( not good and state = ap_nominal_state ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e68e71-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "A2_2",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "leave station eventually\n\nG ((backing) -> F (!station | stopping));",
        "fulltext": "if backing_pre Forklift shall eventually satisfy (!station | stopping)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "backing_pre",
                    "station",
                    "stopping"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(backing_pre)",
            "regular_condition": "(backing_pre)",
            "conditionTextRange": [
                0,
                13
            ],
            "component_name": "Forklift",
            "componentTextRange": [
                15,
                22
            ],
            "timingTextRange": [
                30,
                39
            ],
            "post_condition": "(( ! station | stopping ))",
            "responseTextRange": [
                41,
                69
            ],
            "ft": "((LAST V (((! <b><i>(backing_pre)</i></b>) & ((! LAST) & (X <b><i>(backing_pre)</i></b>))) -> (X ((! LAST) U <b><i>(( ! station | stopping ))</i></b>)))) & (<b><i>(backing_pre)</i></b> -> ((! LAST) U <b><i>(( ! station | stopping ))</i></b>)))",
            "pt": "((H (! <b><i>(backing_pre)</i></b>)) | (! ((! <b><i>(( ! station | stopping ))</i></b>) S ((! <b><i>(( ! station | stopping ))</i></b>) & (<b><i>(backing_pre)</i></b> & ((Y (! <b><i>(backing_pre)</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(backing_pre)</i></b>) & ((! LAST) & (X <b><i>(backing_pre)</i></b>))) -> (X ((! LAST) U <b><i>(( ! station | stopping ))</i></b>)))) & (<b><i>(backing_pre)</i></b> -> ((! LAST) U <b><i>(( ! station | stopping ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(backing_pre)</i></b>)) | (! ((! <b><i>(( ! station | stopping ))</i></b>) S ((! <b><i>(( ! station | stopping ))</i></b>) & (<b><i>(backing_pre)</i></b> & ((Y (! <b><i>(backing_pre)</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "((H( not (backing_pre))) or ( not (SI( ((backing_pre) and ((pre ( not (backing_pre))) or FTP)), ( not (( not station or stopping ))) ))))",
            "diagramVariables": "TC = <b><i>(backing_pre)</i></b>, Response = <b><i>(( ! station | stopping ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(backing_pre)</i></b> is true and any point in the interval where <b><i>(backing_pre)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "47e6b580-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "R1",
        "parent_reqid": "",
        "project": "Triplet",
        "rationale": "",
        "comments": "",
        "fulltext": "triplet shall after 1 seconds satisfy x > 2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "after",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x"
                ],
                "modes": []
            },
            "component_name": "triplet",
            "componentTextRange": [
                0,
                6
            ],
            "duration": [
                "1"
            ],
            "timingTextRange": [
                14,
                28
            ],
            "post_condition": "(x > 2)",
            "responseTextRange": [
                30,
                42
            ],
            "ft": "(((G[<=<b><i>1</i></b>] (! <b><i>(x > 2)</i></b>)) | (LAST V (! <b><i>(x > 2)</i></b>))) & ((F[<=<b><i>1</i></b>+1] <b><i>(x > 2)</i></b>) | (F[<<b><i>1</i></b>+1] LAST)))",
            "pt": "((H ((O[<=<b><i>1</i></b>] FTP) -> (! <b><i>(x > 2)</i></b>))) & (H ((H (! <b><i>(x > 2)</i></b>)) -> (O[<<b><i>1</i></b>+1] FTP))))",
            "ftExpanded": "(((G[<=<b><i>1</i></b>] (! <b><i>(x > 2)</i></b>)) | (LAST V (! <b><i>(x > 2)</i></b>))) & ((F[<=<b><i>1</i></b>+1] <b><i>(x > 2)</i></b>) | (F[<<b><i>1</i></b>+1] LAST)))",
            "ptExpanded": "((H ((O[<=<b><i>1</i></b>] (! (Y TRUE))) -> (! <b><i>(x > 2)</i></b>))) & (H ((H (! <b><i>(x > 2)</i></b>)) -> (O[<<b><i>1</i></b>+1] (! (Y TRUE))))))",
            "component": "<b><i>triplet</i></b>",
            "CoCoSpecCode": "((H((OT(1,0,FTP)) => ( not (x > 2)))) and (H((H( not (x > 2))) => (OT(1,0,FTP)))))",
            "diagramVariables": " n = <b><i>1</i></b>, Response = <b><i>(x > 2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>1</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>1</i></b>). Moreover, RES must hold at the point that is at distance <b><i>1</i></b>+1 from the trigger, that is, trigger+<b><i>1</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_after_satisfaction.svg"
        },
        "_id": "47e6dc90-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-005",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Height Regulator Shall not command translational height accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_height_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_height_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_height_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                69
            ],
            "ft": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_height_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_height_output_exceeding_32 <= 100)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e6dc91-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001E",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_22 = (CosPhi * CosPsi + SinPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_22",
                    "CosPhi",
                    "CosPsi",
                    "SinPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                84
            ],
            "ft": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e703a0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001G",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_31 = SinPhi * SinPsi + CosTheta *SinTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_31",
                    "SinPhi",
                    "SinPsi",
                    "CosTheta",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)",
            "responseTextRange": [
                19,
                83
            ],
            "ft": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e72ab0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G8",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "do nothing if stopped\n\nG (emgOff -> (stopping & lift=NIL)); ",
        "fulltext": "Forklift shall always satisfy emgOff => (stopping & lift = NIL)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emgOff",
                    "stopping",
                    "lift",
                    "NIL"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(emgOff => ( stopping & lift = NIL ))",
            "responseTextRange": [
                22,
                62
            ],
            "ft": "(LAST V <b><i>(emgOff -> ( stopping & lift = NIL ))</i></b>)",
            "pt": "(H <b><i>(emgOff -> ( stopping & lift = NIL ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(emgOff -> ( stopping & lift = NIL ))</i></b>)",
            "ptExpanded": "(H <b><i>(emgOff -> ( stopping & lift = NIL ))</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((emgOff => ( stopping and lift = NIL ))))",
            "diagramVariables": "Response = <b><i>(emgOff => ( stopping & lift = NIL ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e751c0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-002",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (standby & state = ap_transition_state) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "standby",
                    "state",
                    "ap_transition_state",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( standby & state = ap_transition_state ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                91
            ],
            "ft": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( standby and state = ap_transition_state ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e751c1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EB-001",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on) &  abs(check_1_1  - 1.0)<eps6  &  abs(check_1_2)<eps6  &  abs(check_1_3)<eps6  & abs(check_2_1)<eps6  &  abs(check_2_2  -  1.0)<eps6  &  abs(check_2_3)<eps6  & abs(check_3_1)<eps6 & abs(check_3_2)< eps6 & abs(check_3_3 - 1.0)<eps6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "abs",
                    "check_1_1",
                    "eps6",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ( ridge_on ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)",
            "responseTextRange": [
                19,
                291
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ( ridge_on ) and abs ( check_1_1 - 1.0 ) < eps6 and abs ( check_1_2 ) < eps6 and abs ( check_1_3 ) < eps6 and abs ( check_2_1 ) < eps6 and abs ( check_2_2 - 1.0 ) < eps6 and abs ( check_2_3 ) < eps6 and abs ( check_3_1 ) < eps6 and abs ( check_3_2 ) < eps6 and abs ( check_3_3 - 1.0 ) < eps6)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ( ridge_on ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e778d0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "L1",
        "parent_reqid": "",
        "project": "HelloLive",
        "rationale": "",
        "comments": "",
        "fulltext": "if P sw shall within 5 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P",
                    "R"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(P)",
            "regular_condition": "(P)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "sw",
            "componentTextRange": [
                5,
                6
            ],
            "duration": [
                "5"
            ],
            "timingTextRange": [
                14,
                27
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                29,
                37
            ],
            "ft": "((LAST V (((! <b><i>(P)</i></b>) & ((! LAST) & (X <b><i>(P)</i></b>))) -> (X ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>5</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | FTP)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>5</i></b>] (FTP | <b><i>(R)</i></b>))))",
            "ftExpanded": "((LAST V (((! <b><i>(P)</i></b>) & ((! LAST) & (X <b><i>(P)</i></b>))) -> (X ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))",
            "ptExpanded": "(H ((O[=<b><i>5</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (! (Y TRUE)))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>5</i></b>] ((! (Y TRUE)) | <b><i>(R)</i></b>))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((OT(5,5,( ( (P) and ( ( Y ( not (P) ) ) or FTP ) ) and ( not (R) ) ))) => (OT(5-1,0,( FTP or (R) )))))",
            "diagramVariables": "TC = <b><i>(P)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(P)</i></b> is true and any point in the interval where <b><i>(P)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg"
        },
        "_id": "47e79fe0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-002",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The autopilot shall change states from TRANSITION to STANDBY when the pilot is in control (standby).",
        "fulltext": "FSM shall always satisfy (standby & state = ap_transition_state) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "standby",
                    "state",
                    "ap_transition_state",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( standby & state = ap_transition_state ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                91
            ],
            "ft": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( standby and state = ap_transition_state ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e7c6f0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001d",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_21 = (- CosPhi * SinPsi + SinPhi * SinTheta * CosPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_21",
                    "CosPhi",
                    "SinPsi",
                    "SinPhi",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))",
            "responseTextRange": [
                19,
                86
            ],
            "ft": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e7ee00-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-002&3",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - Xtarg) >= r & dot((yout - Xtarg),(yout - Xv)) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "Xtarg",
                    "r",
                    "dot",
                    "Xv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)",
            "responseTextRange": [
                24,
                91
            ],
            "ft": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "pt": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - Xtarg ) >= r and dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)))",
            "diagramVariables": "Response = <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e7ee01-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-002B",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_21",
                    "VI_1",
                    "R_21",
                    "VI_2",
                    "R_22",
                    "VI_3",
                    "R_23"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "pt": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)))",
            "diagramVariables": "Response = <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e81510-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-004a",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "when in roll_hold mode, when steady_state Autopilot shall always satisfy abs_roller_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "steady_state",
                    "abs_roller_err"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                22
            ],
            "regular_condition": "(steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(steady_state)",
            "conditionTextRange": [
                24,
                40
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                42,
                50
            ],
            "timingTextRange": [
                58,
                63
            ],
            "post_condition": "(abs_roller_err <= 1.0)",
            "responseTextRange": [
                65,
                93
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | <b><i>(abs_roller_err <= 1.0)</i></b>) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | <b><i>(abs_roller_err <= 1.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | <b><i>(abs_roller_err <= 1.0)</i></b>) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | <b><i>(abs_roller_err <= 1.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | <b><i>(abs_roller_err <= 1.0)</i></b>) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | <b><i>(abs_roller_err <= 1.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | <b><i>(abs_roller_err <= 1.0)</i></b>) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | <b><i>(abs_roller_err <= 1.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (abs_roller_err <= 1.0)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (abs_roller_err <= 1.0)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, TC = <b><i>(steady_state)</i></b>, Response = <b><i>(abs_roller_err <= 1.0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(steady_state)</i></b> is true and any point in the interval where <b><i>(steady_state)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "47e83c20-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-008",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Yaw Regulator Shall not command transient changes in angular yaw acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy yaw_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yaw_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(yaw_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                62
            ],
            "ft": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((yaw_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e83c21-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "R2",
        "parent_reqid": "",
        "project": "Triplet",
        "rationale": "",
        "comments": "",
        "fulltext": "triplet shall immediately satisfy x = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x"
                ],
                "modes": []
            },
            "component_name": "triplet",
            "componentTextRange": [
                0,
                6
            ],
            "timingTextRange": [
                14,
                24
            ],
            "post_condition": "(x = 0)",
            "responseTextRange": [
                26,
                38
            ],
            "ft": "<b><i>(x = 0)</i></b>",
            "pt": "(H (FTP -> <b><i>(x = 0)</i></b>))",
            "ftExpanded": "<b><i>(x = 0)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(x = 0)</i></b>))",
            "component": "<b><i>triplet</i></b>",
            "CoCoSpecCode": "(H(FTP => (x = 0)))",
            "diagramVariables": "Response = <b><i>(x = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "47e86330-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-002B",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "in roll_hold mode RollAutopilot shall always satisfy roll_cmd = roll_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "roll_hold_mode_cmd"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                43
            ],
            "post_condition": "(roll_cmd = roll_hold_mode_cmd)",
            "responseTextRange": [
                45,
                81
            ],
            "ft": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>))",
            "pt": "(H (<b><i>roll_hold</i></b> -> <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>))",
            "ptExpanded": "(H (<b><i>roll_hold</i></b> -> <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H(roll_hold => (roll_cmd = roll_hold_mode_cmd)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47e86331-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001v3",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "if htlore3_autopilot & htlore3_notpreprelimits & pre_limits FSM shall immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "htlore3_autopilot",
                    "htlore3_notpreprelimits",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "regular_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "conditionTextRange": [
                0,
                58
            ],
            "component_name": "FSM",
            "componentTextRange": [
                60,
                62
            ],
            "timingTextRange": [
                70,
                80
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                82,
                95
            ],
            "ft": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((htlore3_autopilot and htlore3_notpreprelimits and pre_limits) and ((pre ( not (htlore3_autopilot and htlore3_notpreprelimits and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> is true and any point in the interval where <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47e88a40-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-007v2",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & supported & good & ! standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                113
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e88a41-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-007",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The autopilot shall change states from PULLUP to TRANSITION when the system is supported and sensor data is good",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & supported & good) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                101
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e8b150-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-010a",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "when in hdg mode, when hdg_steady_state Autopilot shall always satisfy abs_hdg_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_steady_state",
                    "abs_hdg_err"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                16
            ],
            "regular_condition": "(hdg_steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(hdg_steady_state)",
            "conditionTextRange": [
                18,
                38
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                40,
                48
            ],
            "timingTextRange": [
                56,
                61
            ],
            "post_condition": "(abs_hdg_err <= 1.0)",
            "responseTextRange": [
                63,
                88
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg</i></b> & (! LAST))) | (X (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>hdg</i></b> & (! FTP)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | <b><i>(abs_hdg_err <= 1.0)</i></b>) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | <b><i>(abs_hdg_err <= 1.0)</i></b>) & Fin_<b><i>hdg</i></b>))))) & (((! Lin_<b><i>hdg</i></b>) S ((! Lin_<b><i>hdg</i></b>) & Fin_<b><i>hdg</i></b>)) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | <b><i>(abs_hdg_err <= 1.0)</i></b>) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | <b><i>(abs_hdg_err <= 1.0)</i></b>) & Fin_<b><i>hdg</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg</i></b>) & (! LAST)) & (X <b><i>hdg</i></b>)) & (! LAST))) | (X (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | <b><i>(abs_hdg_err <= 1.0)</i></b>) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | <b><i>(abs_hdg_err <= 1.0)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) S ((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | <b><i>(abs_hdg_err <= 1.0)</i></b>) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | <b><i>(abs_hdg_err <= 1.0)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg) and (pre (hdg))) and ( not FTP)) => (pre (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (abs_hdg_err <= 1.0)) ))))) and ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (( not hdg) and (pre (hdg)))) )) => (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (abs_hdg_err <= 1.0)) ))))",
            "diagramVariables": "M = <b><i>hdg</i></b>, TC = <b><i>(hdg_steady_state)</i></b>, Response = <b><i>(abs_hdg_err <= 1.0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>hdg</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(hdg_steady_state)</i></b> is true and any point in the interval where <b><i>(hdg_steady_state)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "47e8d860-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TUI-001",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy (BL <= IC & IC <= TL & RESET)  => yout = IC",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "BL",
                    "IC",
                    "TL",
                    "RESET",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(( BL <= IC & IC <= TL & RESET ) => yout = IC)",
            "responseTextRange": [
                31,
                81
            ],
            "ft": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "pt": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ptExpanded": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((( BL <= IC and IC <= TL and RESET ) => yout = IC)))",
            "diagramVariables": "Response = <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e8d861-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G3_2",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "restricting lifting action based on var spec_loaded\n\nG (!spec_loaded -> !dropping);",
        "fulltext": "Forklift shall always satisfy ! spec_loaded => ! dropping",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "spec_loaded",
                    "dropping"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(! spec_loaded => ! dropping)",
            "responseTextRange": [
                22,
                56
            ],
            "ft": "(LAST V <b><i>(! spec_loaded -> ! dropping)</i></b>)",
            "pt": "(H <b><i>(! spec_loaded -> ! dropping)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(! spec_loaded -> ! dropping)</i></b>)",
            "ptExpanded": "(H <b><i>(! spec_loaded -> ! dropping)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((not spec_loaded => not dropping)))",
            "diagramVariables": "Response = <b><i>(! spec_loaded => ! dropping)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e8ff70-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-003",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The autopilot shall change states from TRANSITION to NOMINAL when the system is supported and sensor data is good.",
        "fulltext": "FSM shall always satisfy (state = ap_transition_state & good & supported) => STATE = ap_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_transition_state",
                    "good",
                    "supported",
                    "STATE",
                    "ap_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)",
            "responseTextRange": [
                17,
                100
            ],
            "ft": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_transition_state and good and supported ) => STATE = ap_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e8ff71-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-007v2",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & supported & good & ! standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                113
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e92680-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-010",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Height Regulator Shall not command transient changes in translational height acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy height_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "height_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(height_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                65
            ],
            "ft": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((height_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(height_command_acceleration <= 32.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e92681-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-006",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy abs_roll_angle < 33.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_angle < 33.0)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "pt": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_angle < 33.0)))",
            "diagramVariables": "Response = <b><i>(abs_roll_angle < 33.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e94d90-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-003A",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "3.\tUsing a first order finite backward difference equation, the spatial derivatives of Δz/ Δxt = (z(n,1)-z(n-1))/(xt(n,1)-xt(n-1,1) and Δz/ Δyt = (z(n,1)-z(n-1))/(yt(n,1)-yt(n-1,1) shall never exceed a top bound of +10 or bottom bound of -35 (e.g. -35 <= Δz/ Δ(xt,yt) <= 10), where n denotes an index to the current values and n-1 denotes the prior values in the included truth data for xt and yt.    ",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByXt<= 10.0 & DeltaZDividedByXt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByXt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)",
            "responseTextRange": [
                22,
                82
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByXt <= 10.0 and DeltaZDividedByXt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>200</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>200</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>200</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "47e94d91-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "Live1",
        "parent_reqid": "",
        "project": "Live",
        "rationale": "",
        "comments": "",
        "fulltext": "in M the sw shall within 10 ticks satisfy P",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P"
                ],
                "modes": [
                    "M"
                ]
            },
            "scope_mode": "M",
            "scopeTextRange": [
                0,
                3
            ],
            "component_name": "sw",
            "componentTextRange": [
                5,
                10
            ],
            "duration": [
                "10"
            ],
            "timingTextRange": [
                18,
                32
            ],
            "post_condition": "(P)",
            "responseTextRange": [
                34,
                42
            ],
            "ft": "((LAST V ((! (Fin_<b><i>M</i></b> & (! LAST))) | (X ((F[<=<b><i>10</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>10</i></b>] (Lin_<b><i>M</i></b> | LAST)))))) & (<b><i>M</i></b> -> ((F[<=<b><i>10</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>10</i></b>] (Lin_<b><i>M</i></b> | LAST)))))",
            "pt": "((H ((Lin_<b><i>M</i></b> & (! FTP)) -> (Y ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & Fin_<b><i>M</i></b>)) -> (O[<<b><i>10</i></b>] Fin_<b><i>M</i></b>)) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & Fin_<b><i>M</i></b>)) -> (O[<<b><i>10</i></b>] Fin_<b><i>M</i></b>)) & Fin_<b><i>M</i></b>))))) & (((! Lin_<b><i>M</i></b>) S ((! Lin_<b><i>M</i></b>) & Fin_<b><i>M</i></b>)) -> ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & Fin_<b><i>M</i></b>)) -> (O[<<b><i>10</i></b>] Fin_<b><i>M</i></b>)) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & Fin_<b><i>M</i></b>)) -> (O[<<b><i>10</i></b>] Fin_<b><i>M</i></b>)) & Fin_<b><i>M</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>M</i></b>) & (! LAST)) & (X <b><i>M</i></b>)) & (! LAST))) | (X ((F[<=<b><i>10</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>10</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))))) & (<b><i>M</i></b> -> ((F[<=<b><i>10</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>10</i></b>] (((<b><i>M</i></b> & (! LAST)) & (X (! <b><i>M</i></b>))) | LAST)))))",
            "ptExpanded": "((H ((((! <b><i>M</i></b>) & (Y <b><i>M</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (O[<<b><i>10</i></b>] (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (O[<<b><i>10</i></b>] (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))) & (((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) S ((! ((! <b><i>M</i></b>) & (Y <b><i>M</i></b>))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (O[<<b><i>10</i></b>] (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) S ((((! <b><i>(P)</i></b>) S ((! <b><i>(P)</i></b>) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) -> (O[<<b><i>10</i></b>] (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>)))))) & (<b><i>M</i></b> & ((! (Y TRUE)) | (Y (! <b><i>M</i></b>))))))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "((H(((( not M) and (pre (M))) and ( not FTP)) => (pre (SI( (M and (FTP or (pre ( not M)))), ((SI( (M and (FTP or (pre ( not M)))), ( not (P)) )) => (OT(10-1,0,( M and ( FTP or ( Y not M ) ) )))) ))))) and ((SI( (M and (FTP or (pre ( not M)))), ( not (( not M) and (pre (M)))) )) => (SI( (M and (FTP or (pre ( not M)))), ((SI( (M and (FTP or (pre ( not M)))), ( not (P)) )) => (OT(10-1,0,( M and ( FTP or ( Y not M ) ) )))) ))))",
            "diagramVariables": "M = <b><i>M</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(P)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>M</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_within_satisfaction.svg"
        },
        "_id": "47e974a0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-010",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The sensor shall change states from NOMINAL to FAULT when limits are exceeded",
        "fulltext": "FSM shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "limits",
                    "SENSTATE",
                    "sen_fault_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)",
            "responseTextRange": [
                17,
                93
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and limits ) => SENSTATE = sen_fault_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e99bb0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-001",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Roll Regulator Shall not command angular roll accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_roll_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_roll_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_roll_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_roll_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e99bb1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-003d",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The roll reference shall be set to the cockpit turn knob command, up to a 30 degree limit, if the turn knob is commanding 3 degrees or more in either direction. (we removed the \"up to a 30 degree limit\" part)",
        "fulltext": "RollAutopilot shall always satisfy (TurnKnob >= 3.0 | TurnKnob <= -3.0) & (TurnKnob <= 30.0 | TurnKnob >= -30.0) => roll_hold_reference = TurnKnob",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "TurnKnob",
                    "roll_hold_reference"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)",
            "responseTextRange": [
                27,
                145
            ],
            "ft": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "pt": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ptExpanded": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((( TurnKnob >= 3.0 or TurnKnob <= -3.0 ) and ( TurnKnob <= 30.0 or TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)))",
            "diagramVariables": "Response = <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e9c2c0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-004v2",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (state = ap_nominal_state & ! good & ! standby) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "good",
                    "standby",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                100
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and not good and not standby ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e9c2c1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001A",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Rotation Matrix Output, DCM321, of this Function Shall Equal a 3x3 Matrix Product of a 3x3 Euler 3 (Roll) Rotation Matrix times a 3x3 Euler 2 (Pitch) Rotation Matrix times a 3x3 Euler 1 (Heading) Rotation Matrix.",
        "fulltext": "Euler shall always satisfy DCM321_11 = CosTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_11",
                    "CosTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_11 = CosTheta * CosPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_11 = CosTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e9e9d0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-004",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command translational axial accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_airspeed_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_airspeed_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_airspeed_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                71
            ],
            "ft": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_airspeed_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47e9e9d1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "req2",
        "parent_reqid": "",
        "project": "Hanfor",
        "rationale": "",
        "comments": "Globally, it is always the case that if ‘B’ holds then ‘C’ holds after at most ‘5’ time units.",
        "fulltext": "if B component shall for 5 seconds satisfy C",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "B",
                    "C"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(B)",
            "regular_condition": "(B)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "component",
            "componentTextRange": [
                5,
                13
            ],
            "duration": [
                "5"
            ],
            "timingTextRange": [
                21,
                33
            ],
            "post_condition": "(C)",
            "responseTextRange": [
                35,
                43
            ],
            "ft": "((LAST V (((! <b><i>(B)</i></b>) & ((! LAST) & (X <b><i>(B)</i></b>))) -> (X ((G[<=<b><i>5</i></b>] <b><i>(C)</i></b>) | (LAST V <b><i>(C)</i></b>))))) & (<b><i>(B)</i></b> -> ((G[<=<b><i>5</i></b>] <b><i>(C)</i></b>) | (LAST V <b><i>(C)</i></b>))))",
            "pt": "(H ((O[<=<b><i>5</i></b>] (<b><i>(B)</i></b> & ((Y (! <b><i>(B)</i></b>)) | FTP))) -> ((H (! <b><i>(B)</i></b>)) | <b><i>(C)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(B)</i></b>) & ((! LAST) & (X <b><i>(B)</i></b>))) -> (X ((G[<=<b><i>5</i></b>] <b><i>(C)</i></b>) | (LAST V <b><i>(C)</i></b>))))) & (<b><i>(B)</i></b> -> ((G[<=<b><i>5</i></b>] <b><i>(C)</i></b>) | (LAST V <b><i>(C)</i></b>))))",
            "ptExpanded": "(H ((O[<=<b><i>5</i></b>] (<b><i>(B)</i></b> & ((Y (! <b><i>(B)</i></b>)) | (! (Y TRUE))))) -> ((H (! <b><i>(B)</i></b>)) | <b><i>(C)</i></b>)))",
            "component": "<b><i>component</i></b>",
            "CoCoSpecCode": "(H((OT(5,0,((B) and ((pre ( not (B))) or FTP)))) => ((H( not (B))) or (C))))",
            "diagramVariables": "TC = <b><i>(B)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(C)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(B)</i></b> is true and any point in the interval where <b><i>(B)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>5</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>5</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>5</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg"
        },
        "_id": "47ea10e0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-002C",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_31",
                    "VI_1",
                    "R_31",
                    "VI_2",
                    "R_32",
                    "VI_3",
                    "R_33"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "pt": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)))",
            "diagramVariables": "Response = <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ea10e1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001F",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_23 = SinPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_23",
                    "SinPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_23 = SinPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_23 = SinPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ea37f0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-005",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (state = ap_nominal_state & standby) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "standby",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                88
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and standby ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ea37f1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-005a",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) < mag(r2) NLGuidance shall always satisfy yout = Xap1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap1"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "conditionTextRange": [
                0,
                33
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                35,
                44
            ],
            "timingTextRange": [
                52,
                57
            ],
            "post_condition": "(yout = Xap1)",
            "responseTextRange": [
                59,
                77
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | <b><i>(yout = Xap1)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | <b><i>(yout = Xap1)</i></b>))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or (yout = Xap1)))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> is true and any point in the interval where <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "47ea5f00-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-007",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout(3) - Xtarg(3) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xtarg"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout ( 3 ) - Xtarg ( 3 ) = 0)",
            "responseTextRange": [
                24,
                53
            ],
            "ft": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "pt": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout ( 3 ) - Xtarg ( 3 ) = 0)))",
            "diagramVariables": "Response = <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ea5f01-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G5",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "don't mess with low obstacles\n\nG (cargo=BLOCKED -> !turning);",
        "fulltext": "Forklift shall always satisfy cargo = BLOCKED => ! turning",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "cargo",
                    "BLOCKED",
                    "turning"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(cargo = BLOCKED => ! turning)",
            "responseTextRange": [
                22,
                57
            ],
            "ft": "(LAST V <b><i>(cargo = BLOCKED -> ! turning)</i></b>)",
            "pt": "(H <b><i>(cargo = BLOCKED -> ! turning)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(cargo = BLOCKED -> ! turning)</i></b>)",
            "ptExpanded": "(H <b><i>(cargo = BLOCKED -> ! turning)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((cargo = BLOCKED => not turning)))",
            "diagramVariables": "Response = <b><i>(cargo = BLOCKED => ! turning)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ea8610-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001v2",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "if autopilot & pre_autopilot & pre_limits FSM shall immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot",
                    "pre_autopilot",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(autopilot & pre_autopilot & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(autopilot & pre_autopilot & pre_limits)",
            "conditionTextRange": [
                0,
                40
            ],
            "component_name": "FSM",
            "componentTextRange": [
                42,
                44
            ],
            "timingTextRange": [
                52,
                62
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                64,
                77
            ],
            "ft": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((autopilot and pre_autopilot and pre_limits) and ((pre ( not (autopilot and pre_autopilot and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(autopilot & pre_autopilot & pre_limits)</i></b> is true and any point in the interval where <b><i>(autopilot & pre_autopilot & pre_limits)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47ead430-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-008v1",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The autopilot shall change states from STANDBY to TRANSITION when the pilot is not in control (not standby)",
        "fulltext": " FSM shall always satisfy (state = ap_standby_state & !standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                92
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ead431-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-008B",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy roll_cmd = hdg_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "hdg_hold_mode_cmd"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(roll_cmd = hdg_hold_mode_cmd)",
            "responseTextRange": [
                44,
                79
            ],
            "ft": "(LAST V (<b><i>hdg_hold</i></b> -> <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>))",
            "pt": "(H (<b><i>hdg_hold</i></b> -> <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>hdg_hold</i></b> -> <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>))",
            "ptExpanded": "(H (<b><i>hdg_hold</i></b> -> <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H(hdg_hold => (roll_cmd = hdg_hold_mode_cmd)))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>hdg_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47eafb40-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-003",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Yaw Regulator Shall not command angular yaw accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_yaw_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_yaw_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_yaw_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                66
            ],
            "ft": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_yaw_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eb2250-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-004",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout * Xr > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xr"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout * Xr > 0)",
            "responseTextRange": [
                24,
                44
            ],
            "ft": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "pt": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout * Xr > 0)))",
            "diagramVariables": "Response = <b><i>(yout * Xr > 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eb4960-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-011v2",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (senstate = sen_nominal_state & ! request & ! limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                17,
                112
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eb4961-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-005",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy  abs_roll_rate <= 6.6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_rate"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_rate <= 6.6)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "pt": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_rate <= 6.6)))",
            "diagramVariables": "Response = <b><i>(abs_roll_rate <= 6.6)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eb7070-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "R3",
        "parent_reqid": "",
        "project": "Triplet",
        "rationale": "",
        "comments": "",
        "fulltext": "triplet shall always satisfy !FTP => (x = x_pre + 1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FTP",
                    "x",
                    "x_pre"
                ],
                "modes": []
            },
            "component_name": "triplet",
            "componentTextRange": [
                0,
                6
            ],
            "timingTextRange": [
                14,
                19
            ],
            "post_condition": "(! FTP => ( x = x_pre + 1 ))",
            "responseTextRange": [
                21,
                51
            ],
            "ft": "(LAST V <b><i>(! FTP -> ( x = x_pre + 1 ))</i></b>)",
            "pt": "(H <b><i>(! FTP -> ( x = x_pre + 1 ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(! FTP -> ( x = x_pre + 1 ))</i></b>)",
            "ptExpanded": "(H <b><i>(! FTP -> ( x = x_pre + 1 ))</i></b>)",
            "component": "<b><i>triplet</i></b>",
            "CoCoSpecCode": "(H((not FTP => ( x = x_pre + 1 ))))",
            "diagramVariables": "Response = <b><i>(! FTP => ( x = x_pre + 1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eb9780-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-008v2",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (state = ap_standby_state & ! standby & ! apfail) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "apfail",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                104
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby and not apfail ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eb9781-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-008v2",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "FSM shall always satisfy (state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "apfail",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                105
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby and not apfail ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ebbe90-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "Live2",
        "parent_reqid": "",
        "project": "Live",
        "rationale": "",
        "comments": "",
        "fulltext": "sw2 shall within 10 ticks satisfy P",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P"
                ],
                "modes": []
            },
            "component_name": "sw2",
            "componentTextRange": [
                0,
                2
            ],
            "duration": [
                "10"
            ],
            "timingTextRange": [
                10,
                24
            ],
            "post_condition": "(P)",
            "responseTextRange": [
                26,
                34
            ],
            "ft": "((F[<=<b><i>10</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>10</i></b>] LAST))",
            "pt": "(H ((H (! <b><i>(P)</i></b>)) -> (O[<<b><i>10</i></b>] FTP)))",
            "ftExpanded": "((F[<=<b><i>10</i></b>] <b><i>(P)</i></b>) | (F[<<b><i>10</i></b>] LAST))",
            "ptExpanded": "(H ((H (! <b><i>(P)</i></b>)) -> (O[<<b><i>10</i></b>] (! (Y TRUE)))))",
            "component": "<b><i>sw2</i></b>",
            "CoCoSpecCode": "(H((H( not (P))) => (OT(10-1,0,FTP))))",
            "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(P)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg"
        },
        "_id": "47ebe5a0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G9",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "only turn, go, stop or back\n\nG (forwarding | turning | stopping | backing);",
        "fulltext": "Forklift shall always satisfy forwarding | turning | stopping | backing",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "forwarding",
                    "turning",
                    "stopping",
                    "backing"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(forwarding | turning | stopping | backing)",
            "responseTextRange": [
                22,
                70
            ],
            "ft": "(LAST V <b><i>(forwarding | turning | stopping | backing)</i></b>)",
            "pt": "(H <b><i>(forwarding | turning | stopping | backing)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(forwarding | turning | stopping | backing)</i></b>)",
            "ptExpanded": "(H <b><i>(forwarding | turning | stopping | backing)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((forwarding or turning or stopping or backing)))",
            "diagramVariables": "Response = <b><i>(forwarding | turning | stopping | backing)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ec0cb0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-003",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (state = ap_transition_state & good & supported) => STATE = ap_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_transition_state",
                    "good",
                    "supported",
                    "STATE",
                    "ap_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)",
            "responseTextRange": [
                17,
                100
            ],
            "ft": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_transition_state and good and supported ) => STATE = ap_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ec33c0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001v1",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (limits & !standby & !apfail & supported) => pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "limits",
                    "standby",
                    "apfail",
                    "supported",
                    "pullup"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( limits & ! standby & ! apfail & supported ) => pullup)",
            "responseTextRange": [
                17,
                75
            ],
            "ft": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "pt": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ptExpanded": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( limits and not standby and not apfail and supported ) => pullup)))",
            "diagramVariables": "Response = <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ec33c1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "Req1",
        "parent_reqid": "",
        "project": "SimonRoth",
        "rationale": "",
        "comments": "",
        "fulltext": "When IRTest the sw shall within 10 secs satisfy IR_on",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "IRTest",
                    "IR_on"
                ],
                "modes": []
            },
            "regular_condition": "(IRTest)",
            "qualifier_word": "when",
            "pre_condition": "(IRTest)",
            "conditionTextRange": [
                0,
                10
            ],
            "component_name": "sw",
            "componentTextRange": [
                12,
                17
            ],
            "duration": [
                "10"
            ],
            "timingTextRange": [
                25,
                38
            ],
            "post_condition": "(IR_on)",
            "responseTextRange": [
                40,
                52
            ],
            "ft": "((LAST V (((! <b><i>(IRTest)</i></b>) & ((! LAST) & (X <b><i>(IRTest)</i></b>))) -> (X ((F[<=<b><i>10</i></b>] <b><i>(IR_on)</i></b>) | (F[<<b><i>10</i></b>] LAST))))) & (<b><i>(IRTest)</i></b> -> ((F[<=<b><i>10</i></b>] <b><i>(IR_on)</i></b>) | (F[<<b><i>10</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>10</i></b>] ((<b><i>(IRTest)</i></b> & ((Y (! <b><i>(IRTest)</i></b>)) | FTP)) & (! <b><i>(IR_on)</i></b>))) -> (O[<<b><i>10</i></b>] (FTP | <b><i>(IR_on)</i></b>))))",
            "ftExpanded": "((LAST V (((! <b><i>(IRTest)</i></b>) & ((! LAST) & (X <b><i>(IRTest)</i></b>))) -> (X ((F[<=<b><i>10</i></b>] <b><i>(IR_on)</i></b>) | (F[<<b><i>10</i></b>] LAST))))) & (<b><i>(IRTest)</i></b> -> ((F[<=<b><i>10</i></b>] <b><i>(IR_on)</i></b>) | (F[<<b><i>10</i></b>] LAST))))",
            "ptExpanded": "(H ((O[=<b><i>10</i></b>] ((<b><i>(IRTest)</i></b> & ((Y (! <b><i>(IRTest)</i></b>)) | (! (Y TRUE)))) & (! <b><i>(IR_on)</i></b>))) -> (O[<<b><i>10</i></b>] ((! (Y TRUE)) | <b><i>(IR_on)</i></b>))))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((OT(10,10,( ( (IRTest) and ( ( Y ( not (IRTest) ) ) or FTP ) ) and ( not (IR_on) ) ))) => (OT(10-1,0,( FTP or (IR_on) )))))",
            "diagramVariables": "TC = <b><i>(IRTest)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(IR_on)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(IRTest)</i></b> is true and any point in the interval where <b><i>(IRTest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg"
        },
        "_id": "47ec5ad0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-001",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The maximum value of NN output, z, shall always be less than or equal to 1.1, regardless of the input values",
        "fulltext": "NN shall always satisfy z <=1.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "z"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z <= 1.1)",
            "responseTextRange": [
                16,
                30
            ],
            "ft": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "pt": "(H <b><i>(z <= 1.1)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "ptExpanded": "(H <b><i>(z <= 1.1)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z <= 1.1)))",
            "diagramVariables": "Response = <b><i>(z <= 1.1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ec5ad1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "Live3",
        "parent_reqid": "",
        "project": "Live",
        "rationale": "",
        "comments": "",
        "fulltext": "if P sw3 shall within 5 ticks satisfy R",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "P",
                    "R"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(P)",
            "regular_condition": "(P)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "sw3",
            "componentTextRange": [
                5,
                7
            ],
            "duration": [
                "5"
            ],
            "timingTextRange": [
                15,
                28
            ],
            "post_condition": "(R)",
            "responseTextRange": [
                30,
                38
            ],
            "ft": "((LAST V (((! <b><i>(P)</i></b>) & ((! LAST) & (X <b><i>(P)</i></b>))) -> (X ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>5</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | FTP)) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>5</i></b>] (FTP | <b><i>(R)</i></b>))))",
            "ftExpanded": "((LAST V (((! <b><i>(P)</i></b>) & ((! LAST) & (X <b><i>(P)</i></b>))) -> (X ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))) & (<b><i>(P)</i></b> -> ((F[<=<b><i>5</i></b>] <b><i>(R)</i></b>) | (F[<<b><i>5</i></b>] LAST))))",
            "ptExpanded": "(H ((O[=<b><i>5</i></b>] ((<b><i>(P)</i></b> & ((Y (! <b><i>(P)</i></b>)) | (! (Y TRUE)))) & (! <b><i>(R)</i></b>))) -> (O[<<b><i>5</i></b>] ((! (Y TRUE)) | <b><i>(R)</i></b>))))",
            "component": "<b><i>sw3</i></b>",
            "CoCoSpecCode": "(H((OT(5,5,( ( (P) and ( ( Y ( not (P) ) ) or FTP ) ) and ( not (R) ) ))) => (OT(5-1,0,( FTP or (R) )))))",
            "diagramVariables": "TC = <b><i>(P)</i></b>,  n = <b><i>5</i></b>, Response = <b><i>(R)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(P)</i></b> is true and any point in the interval where <b><i>(P)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>5</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>5</i></b>). If the interval ends sooner than trigger+<b><i>5</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg"
        },
        "_id": "47ec81e0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001I",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_33 = CosPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_33",
                    "CosPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_33 = CosPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_33 = CosPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ec81e1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-002",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The minimum value of the NN output, z, shall always be greater than or equal to -0.2, regardless of the input values",
        "fulltext": "NN shall always satisfy z >= -0.2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "z"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z >= -0.2)",
            "responseTextRange": [
                16,
                32
            ],
            "ft": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "pt": "(H <b><i>(z >= -0.2)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "ptExpanded": "(H <b><i>(z >= -0.2)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z >= -0.2)))",
            "diagramVariables": "Response = <b><i>(z >= -0.2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eca8f0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-003A",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy !(Cb | Cc1 | Cc2 | Cd)  => roll_hold_reference = roll_angle",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Cb",
                    "Cc1",
                    "Cc2",
                    "Cd",
                    "roll_hold_reference",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)",
            "responseTextRange": [
                50,
                116
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "pt": "(H (Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "ptExpanded": "(H ((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((roll_hold and (FTP or (pre ( not roll_hold)))) => (not ( Cb or Cc1 or Cc2 or Cd ) => roll_hold_reference = roll_angle)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "47eca8f1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001B",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_12 = CosTheta * SinPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_12",
                    "CosTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_12 = CosTheta * SinPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_12 = CosTheta * SinPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ecd000-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001C",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_13 = - SinTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_13",
                    "SinTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_13 = - SinTheta)",
            "responseTextRange": [
                19,
                48
            ],
            "ft": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_13 = - SinTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_13 = - SinTheta)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ecd001-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-002",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor  shall  always  satisfy  (no_fail => (set_val = mid_value))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "no_fail",
                    "set_val",
                    "mid_value"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                29,
                34
            ],
            "post_condition": "(( no_fail => ( set_val = mid_value ) ))",
            "responseTextRange": [
                37,
                79
            ],
            "ft": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "pt": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( no_fail => ( set_val = mid_value ) ))))",
            "diagramVariables": "Response = <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ecf710-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G2_1",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "local var spec_loaded\n\nG (lifting -> next (spec_loaded));",
        "fulltext": "Forklift shall always satisfy lifting_pre => spec_loaded",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lifting_pre",
                    "spec_loaded"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(lifting_pre => spec_loaded)",
            "responseTextRange": [
                22,
                55
            ],
            "ft": "(LAST V <b><i>(lifting_pre -> spec_loaded)</i></b>)",
            "pt": "(H <b><i>(lifting_pre -> spec_loaded)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(lifting_pre -> spec_loaded)</i></b>)",
            "ptExpanded": "(H <b><i>(lifting_pre -> spec_loaded)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((lifting_pre => spec_loaded)))",
            "diagramVariables": "Response = <b><i>(lifting_pre => spec_loaded)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ecf711-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-009",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command transient changes in translational axial acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy airspeed_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "airspeed_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(airspeed_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((airspeed_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ed1e20-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "A3",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "unblock path if backing or turning\n\nG ((backing | turning) -> F ((sense = CLEAR & cargo = CLEAR) | forwarding | stopping));",
        "fulltext": "if (backing_pre | turning_pre) Forklift shall eventually satisfy ((sense = CLEAR & cargo = CLEAR) | forwarding | stopping))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "backing_pre",
                    "turning_pre",
                    "sense",
                    "CLEAR",
                    "cargo",
                    "forwarding",
                    "stopping"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(( backing_pre | turning_pre ))",
            "regular_condition": "(( backing_pre | turning_pre ))",
            "conditionTextRange": [
                0,
                29
            ],
            "component_name": "Forklift",
            "componentTextRange": [
                31,
                38
            ],
            "timingTextRange": [
                46,
                55
            ],
            "post_condition": "(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))",
            "responseTextRange": [
                57,
                121
            ],
            "ft": "((LAST V (((! <b><i>(( backing_pre | turning_pre ))</i></b>) & ((! LAST) & (X <b><i>(( backing_pre | turning_pre ))</i></b>))) -> (X ((! LAST) U <b><i>(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))</i></b>)))) & (<b><i>(( backing_pre | turning_pre ))</i></b> -> ((! LAST) U <b><i>(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))</i></b>)))",
            "pt": "((H (! <b><i>(( backing_pre | turning_pre ))</i></b>)) | (! ((! <b><i>(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))</i></b>) S ((! <b><i>(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))</i></b>) & (<b><i>(( backing_pre | turning_pre ))</i></b> & ((Y (! <b><i>(( backing_pre | turning_pre ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( backing_pre | turning_pre ))</i></b>) & ((! LAST) & (X <b><i>(( backing_pre | turning_pre ))</i></b>))) -> (X ((! LAST) U <b><i>(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))</i></b>)))) & (<b><i>(( backing_pre | turning_pre ))</i></b> -> ((! LAST) U <b><i>(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( backing_pre | turning_pre ))</i></b>)) | (! ((! <b><i>(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))</i></b>) S ((! <b><i>(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))</i></b>) & (<b><i>(( backing_pre | turning_pre ))</i></b> & ((Y (! <b><i>(( backing_pre | turning_pre ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "((H( not (( backing_pre or turning_pre )))) or ( not (SI( ((( backing_pre or turning_pre )) and ((pre ( not (( backing_pre or turning_pre )))) or FTP)), ( not (( ( sense = CLEAR and cargo = CLEAR ) or forwarding or stopping ))) ))))",
            "diagramVariables": "TC = <b><i>(( backing_pre | turning_pre ))</i></b>, Response = <b><i>(( ( sense = CLEAR & cargo = CLEAR ) | forwarding | stopping ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( backing_pre | turning_pre ))</i></b> is true and any point in the interval where <b><i>(( backing_pre | turning_pre ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "47ed4530-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-002",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from TRANSITION to STANDBY when the pilot is in control (standby).",
        "fulltext": "FSM shall always satisfy (standby & state = ap_transition_state) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "standby",
                "state",
                "ap_transition_state",
                "STATE",
                "ap_standby_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( standby & state = ap_transition_state ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                91
            ],
            "ft": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( standby and state = ap_transition_state ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ed4531-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-005",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBYwhen the pilot is in control (standby).",
        "fulltext": "FSM shall always satisfy (state=ap_nominal_state & standby)  => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "state",
                "ap_nominal_state",
                "standby",
                "STATE",
                "ap_standby_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                87
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and standby ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ed6c40-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-003",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from TRANSITION to NOMINAL when the system is supported and sensor data is good.",
        "fulltext": "FSM shall always satisfy (state = ap_transition_state & good & supported) => STATE = ap_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "state",
                "ap_transition_state",
                "good",
                "supported",
                "STATE",
                "ap_nominal_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)",
            "responseTextRange": [
                17,
                100
            ],
            "ft": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_transition_state and good and supported ) => STATE = ap_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ed6c41-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-008",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from STANDBY to TRANSITION when the pilot is not in control (not standby)",
        "fulltext": " FSM shall always satisfy (state = ap_standby_state & !standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "state",
                "ap_standby_state",
                "standby",
                "STATE",
                "ap_transition_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                92
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ed9350-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-011",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The sensor shall change states from NOMINAL to TRANSITION when the autopilot is not requesting support (not request)",
        "fulltext": "FSM shall always  satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "senstate",
                "sen_nominal_state",
                "request",
                "SENSTATE",
                "sen_transition_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                18,
                101
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ed9351-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-009",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from STANDBY to MANEUVER when a failure occurs (apfail)",
        "fulltext": "FSM shall always satisfy (state = ap_standby_state & apfail )=> STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "state",
                "ap_standby_state",
                "apfail",
                "STATE",
                "ap_maneuver_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                88
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and apfail ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47edba60-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-012",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The sensor shall change states from FAULT to TRANSITION when the autopilot is not requesting support (not request) and limits are not exceeded (not limits)",
        "fulltext": "FSM shall  always  satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "senstate",
                "sen_fault_state",
                "request",
                "limits",
                "SENSTATE",
                "sen_transition_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                19,
                110
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_fault_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47edba61-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-010",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The sensor shall change states from NOMINAL to FAULT when limits are exceeded",
        "fulltext": "FSM shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "senstate",
                "sen_nominal_state",
                "limits",
                "SENSTATE",
                "sen_fault_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)",
            "responseTextRange": [
                17,
                93
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and limits ) => SENSTATE = sen_fault_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ede170-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-013",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The sensor shall change states from TRANSITION to NOMINAL when the autopilot is requesting support (request) and the autopilot reports the correct active mode (mode)",
        "fulltext": "FSM shall always satisfy (senstate = sen_transition_state & request) => SENSTATE = sen_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "senstate",
                "sen_transition_state",
                "request",
                "SENSTATE",
                "sen_nominal_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_transition_state & request ) => SENSTATE = sen_nominal_state)",
            "responseTextRange": [
                17,
                99
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_transition_state & request ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_transition_state and request ) => SENSTATE = sen_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_transition_state & request ) => SENSTATE = sen_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ede171-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-007",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from PULLUP to TRANSITION when the system is supported and sensor data is good",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & supported & good) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "state",
                "ap_maneuver_state",
                "supported",
                "good",
                "STATE",
                "ap_transition_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                101
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ee0880-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-004",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "",
        "fulltext": "FSM shall always satisfy (! good & state = ap_nominal_state) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "good",
                "state",
                "ap_nominal_state",
                "STATE",
                "ap_maneuver_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                88
            ],
            "ft": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( not good and state = ap_nominal_state ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ee0881-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).",
        "fulltext": "FSM  shall  always  satisfy (limits & !standby & !apfail & supported) => pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "limits",
                "standby",
                "apfail",
                "supported",
                "pullup"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( limits & ! standby & ! apfail & supported ) => pullup)",
            "responseTextRange": [
                20,
                78
            ],
            "ft": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "pt": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ptExpanded": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( limits and not standby and not apfail and supported ) => pullup)))",
            "diagramVariables": "Response = <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ee2f90-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-006",
        "parent_reqid": "",
        "project": "Demo-FSM",
        "rationale": "The autopilot shall change states from MANEUVER to STANDBY when the pilot is in control (standby) and sensor data is good",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & standby & good) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "state",
                "ap_maneuver_state",
                "standby",
                "good",
                "STATE",
                "ap_standby_state"
            ],
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                96
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and standby and good ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ee2f91-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-008v1",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (state = ap_standby_state & !standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                17,
                92
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ee56a0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-006",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & standby & good) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "standby",
                    "good",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                96
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and standby and good ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ee7db0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-003a",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "In the single fail state, a good channel average of the remaining two good branches shall be used to determine the selected value (1)",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =1 => set_val = 0.5 * (ia +ib)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ib"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 1 => set_val = 0.5 * ( ia + ib ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "pt": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 1 => set_val = 0.5 * ( ia + ib ))))",
            "diagramVariables": "Response = <b><i>(FC = 1 => set_val = 0.5 * ( ia + ib ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ee7db1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-013",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The sensor shall change states from TRANSITION to NOMINAL when the autopilot is requesting support (request) and the autopilot reports the correct active mode (mode)",
        "fulltext": "FSM shall always satisfy (senstate = sen_transition_state & request & MD) => SENSTATE = sen_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_transition_state",
                    "request",
                    "MD",
                    "SENSTATE",
                    "sen_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_transition_state & request & MD ) => SENSTATE = sen_nominal_state)",
            "responseTextRange": [
                17,
                104
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_transition_state & request & MD ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_transition_state & request & MD ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_transition_state & request & MD ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_transition_state & request & MD ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_transition_state and request and MD ) => SENSTATE = sen_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_transition_state & request & MD ) => SENSTATE = sen_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eea4c0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "Req2",
        "parent_reqid": "",
        "project": "SimonRoth",
        "rationale": "",
        "comments": "",
        "fulltext": "When IRTest the sw shall for 6 secs satisfy ! IR_on",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "IRTest",
                    "IR_on"
                ],
                "modes": []
            },
            "regular_condition": "(IRTest)",
            "qualifier_word": "when",
            "pre_condition": "(IRTest)",
            "conditionTextRange": [
                0,
                10
            ],
            "component_name": "sw",
            "componentTextRange": [
                12,
                17
            ],
            "duration": [
                "6"
            ],
            "timingTextRange": [
                25,
                34
            ],
            "post_condition": "(! IR_on)",
            "responseTextRange": [
                36,
                50
            ],
            "ft": "((LAST V (((! <b><i>(IRTest)</i></b>) & ((! LAST) & (X <b><i>(IRTest)</i></b>))) -> (X ((G[<=<b><i>6</i></b>] <b><i>(! IR_on)</i></b>) | (LAST V <b><i>(! IR_on)</i></b>))))) & (<b><i>(IRTest)</i></b> -> ((G[<=<b><i>6</i></b>] <b><i>(! IR_on)</i></b>) | (LAST V <b><i>(! IR_on)</i></b>))))",
            "pt": "(H ((O[<=<b><i>6</i></b>] (<b><i>(IRTest)</i></b> & ((Y (! <b><i>(IRTest)</i></b>)) | FTP))) -> ((H (! <b><i>(IRTest)</i></b>)) | <b><i>(! IR_on)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(IRTest)</i></b>) & ((! LAST) & (X <b><i>(IRTest)</i></b>))) -> (X ((G[<=<b><i>6</i></b>] <b><i>(! IR_on)</i></b>) | (LAST V <b><i>(! IR_on)</i></b>))))) & (<b><i>(IRTest)</i></b> -> ((G[<=<b><i>6</i></b>] <b><i>(! IR_on)</i></b>) | (LAST V <b><i>(! IR_on)</i></b>))))",
            "ptExpanded": "(H ((O[<=<b><i>6</i></b>] (<b><i>(IRTest)</i></b> & ((Y (! <b><i>(IRTest)</i></b>)) | (! (Y TRUE))))) -> ((H (! <b><i>(IRTest)</i></b>)) | <b><i>(! IR_on)</i></b>)))",
            "component": "<b><i>sw</i></b>",
            "CoCoSpecCode": "(H((OT(6,0,( (IRTest) and ( ( Y ( not (IRTest) ) ) or FTP ) ))) => ((H( not (IRTest))) or (not IR_on))))",
            "diagramVariables": "TC = <b><i>(IRTest)</i></b>,  n = <b><i>6</i></b>, Response = <b><i>(! IR_on)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(IRTest)</i></b> is true and any point in the interval where <b><i>(IRTest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>6</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>6</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>6</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg"
        },
        "_id": "47eecbd0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-012",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_fault_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                17,
                108
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_fault_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eecbd1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "SWIM-001b",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT3) => (CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0)) ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT3",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                96
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eef2e0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-009",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The autopilot shall change states from STANDBY to MANEUVER when a failure occurs (apfail)",
        "fulltext": "FSM shall always satisfy (state = ap_standby_state & apfail )=> STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "apfail",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                88
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and apfail ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47eef2e1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G6",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "don't lift if no cargo found\n\nG (cargo = CLEAR -> !lifting);",
        "fulltext": "Forklift shall always satisfy cargo = CLEAR => ! lifting",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "cargo",
                    "CLEAR",
                    "lifting"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(cargo = CLEAR => ! lifting)",
            "responseTextRange": [
                22,
                55
            ],
            "ft": "(LAST V <b><i>(cargo = CLEAR -> ! lifting)</i></b>)",
            "pt": "(H <b><i>(cargo = CLEAR -> ! lifting)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(cargo = CLEAR -> ! lifting)</i></b>)",
            "ptExpanded": "(H <b><i>(cargo = CLEAR -> ! lifting)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((cargo = CLEAR => not lifting)))",
            "diagramVariables": "Response = <b><i>(cargo = CLEAR => ! lifting)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ef19f0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-004",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "FSM shall always satisfy (! good & state = ap_nominal_state) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "good",
                    "state",
                    "ap_nominal_state",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                88
            ],
            "ft": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( not good and state = ap_nominal_state ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ef19f1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-011v2",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "FSM shall always satisfy (senstate = sen_nominal_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                17,
                110
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ef4100-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-004v2",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBY when the pilot is in contronl (standby)",
        "fulltext": "FSM shall always satisfy (state = ap_nominal_state & ! good & ! standby) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "good",
                    "standby",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                17,
                100
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and not good and not standby ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ef4101-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-005",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBYwhen the pilot is in control (standby).",
        "fulltext": "FSM shall always satisfy (state=ap_nominal_state & standby)  => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "standby",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                87
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and standby ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47ef6810-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-005b",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) >= mag(r2) NLGuidance shall always satisfy yout = Xap2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap2"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "conditionTextRange": [
                0,
                34
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                36,
                45
            ],
            "timingTextRange": [
                53,
                58
            ],
            "post_condition": "(yout = Xap2)",
            "responseTextRange": [
                60,
                78
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | <b><i>(yout = Xap2)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | <b><i>(yout = Xap2)</i></b>))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or (yout = Xap2)))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> is true and any point in the interval where <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "47ef6811-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_13",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_7 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_7",
                "Current_System_Mode_0",
                "Current_System_Mode_1",
                "Current_System_Mode_2",
                "Current_System_Mode_3",
                "Current_System_Mode_4",
                "Current_System_Mode_6",
                "Current_System_Mode_8"
            ],
            "scope_mode": "Current_System_Mode_7",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_7</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_7</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_7</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_7</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_7 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_7</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_7</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47ef8f20-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_9",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_2 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_2",
                "Current_System_Mode_0",
                "Current_System_Mode_1",
                "Current_System_Mode_3",
                "Current_System_Mode_4",
                "Current_System_Mode_6",
                "Current_System_Mode_7",
                "Current_System_Mode_8"
            ],
            "scope_mode": "Current_System_Mode_2",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_2</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_2</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_2</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_2</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_2 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_2</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_2</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47ef8f21-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G5_2",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_1 Infusion_Manager shall always satisfy (! System_On) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_1",
                "System_On",
                "Commanded_Flow_Rate"
            ],
            "scope_mode": "Current_System_Mode_1",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(( ! System_On ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                102
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_1 => (( not System_On ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_1</i></b>, Response = <b><i>(( ! System_On ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_1</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47efb630-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_14",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_8 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_8",
                "Current_System_Mode_0",
                "Current_System_Mode_1",
                "Current_System_Mode_2",
                "Current_System_Mode_3",
                "Current_System_Mode_4",
                "Current_System_Mode_6",
                "Current_System_Mode_7"
            ],
            "scope_mode": "Current_System_Mode_8",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_8 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_8</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_8</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47efb631-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_10",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_3 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_3",
                "Current_System_Mode_0",
                "Current_System_Mode_1",
                "Current_System_Mode_2",
                "Current_System_Mode_4",
                "Current_System_Mode_6",
                "Current_System_Mode_7",
                "Current_System_Mode_8"
            ],
            "scope_mode": "Current_System_Mode_3",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_3</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_3</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_3</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_3</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_3 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_3</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_3</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47efdd40-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_2",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_0 Infusion_Manager shall always satisfy Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_0",
                "Commanded_Flow_Rate"
            ],
            "scope_mode": "Current_System_Mode_0",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                85
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_0 => (Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_0</i></b>, Response = <b><i>(Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_0</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47efdd41-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_7",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_0 Infusion_Manager shall always satisfy !( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_0",
                "Current_System_Mode_1",
                "Current_System_Mode_2",
                "Current_System_Mode_3",
                "Current_System_Mode_4",
                "Current_System_Mode_6",
                "Current_System_Mode_7",
                "Current_System_Mode_8"
            ],
            "scope_mode": "Current_System_Mode_0",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                231
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_0 => (not ( Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_0</i></b>, Response = <b><i>(! ( Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_0</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f00450-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_3",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_1 Infusion_Manager shall always satisfy Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_1",
                "Commanded_Flow_Rate"
            ],
            "scope_mode": "Current_System_Mode_1",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                85
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_1 => (Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_1</i></b>, Response = <b><i>(Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_1</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f00451-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_11",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_4 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_4",
                "Current_System_Mode_0",
                "Current_System_Mode_1",
                "Current_System_Mode_2",
                "Current_System_Mode_3",
                "Current_System_Mode_6",
                "Current_System_Mode_7",
                "Current_System_Mode_8"
            ],
            "scope_mode": "Current_System_Mode_4",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_4</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_4</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_4</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_4</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_4 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_4</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_4</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f02b60-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_4",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_6 Infusion_Manager shall always satisfy Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_6",
                "Commanded_Flow_Rate"
            ],
            "scope_mode": "Current_System_Mode_6",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                85
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_6</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_6</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_6</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_6</i></b> -> <b><i>(Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_6 => (Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_6</i></b>, Response = <b><i>(Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_6</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f02b61-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_5",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_7 Infusion_Manager shall always satisfy Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_7",
                "Commanded_Flow_Rate",
                "Flow_Rate_KVO"
            ],
            "scope_mode": "Current_System_Mode_7",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                55,
                97
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_7</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_7</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_7</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_7</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_7 => (Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_7</i></b>, Response = <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_7</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f05270-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_8",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_1 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_1",
                "Current_System_Mode_0",
                "Current_System_Mode_2",
                "Current_System_Mode_3",
                "Current_System_Mode_4",
                "Current_System_Mode_6",
                "Current_System_Mode_7",
                "Current_System_Mode_8"
            ],
            "scope_mode": "Current_System_Mode_1",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_1</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_1</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_1 => (not ( Current_System_Mode_0 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_1</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_1</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f05271-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_12",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_6 Infusion_Manager shall always satisfy ! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_6",
                "Current_System_Mode_0",
                "Current_System_Mode_1",
                "Current_System_Mode_2",
                "Current_System_Mode_3",
                "Current_System_Mode_4",
                "Current_System_Mode_7",
                "Current_System_Mode_8"
            ],
            "scope_mode": "Current_System_Mode_6",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                55,
                233
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_6</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_6</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_6</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_6</i></b> -> <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_6 => (not ( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "M = <b><i>Current_System_Mode_6</i></b>, Response = <b><i>(! ( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_6</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f07980-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_6",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_8 Infusion_Manager shall always satisfy Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_8",
                "Commanded_Flow_Rate",
                "Flow_Rate_KVO"
            ],
            "scope_mode": "Current_System_Mode_8",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                55,
                97
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_8</i></b> -> <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_8 => (Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_8</i></b>, Response = <b><i>(Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_8</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f07981-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g7",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 2) => (!(Current_System_Mode = 3) | !(Current_System_Mode =4))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 2 ) => ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))",
            "responseTextRange": [
                30,
                134
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 2 ) => ( not ( Current_System_Mode = 3 ) or not ( Current_System_Mode = 4 ) ))))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 2 ) => ( ! ( Current_System_Mode = 3 ) | ! ( Current_System_Mode = 4 ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f0a090-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g3",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy !System_On => Current_System_Mode = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(! System_On => Current_System_Mode = 0)",
            "responseTextRange": [
                30,
                74
            ],
            "ft": "(LAST V <b><i>(! System_On -> Current_System_Mode = 0)</i></b>)",
            "pt": "(H <b><i>(! System_On -> Current_System_Mode = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(! System_On -> Current_System_Mode = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(! System_On -> Current_System_Mode = 0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((not System_On => Current_System_Mode = 0)))",
            "diagramVariables": "Response = <b><i>(! System_On => Current_System_Mode = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f0a091-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g11",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "if !Current_System_Mode = 4 Infusion_Manager shall at the next timepoint satisfy (System_On & !Patient_Bolus_Request) => !Current_System_Mode = 4",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode",
                    "System_On",
                    "Patient_Bolus_Request"
                ],
                "modes": []
            },
            "regular_condition": "(! Current_System_Mode = 4)",
            "qualifier_word": "if",
            "pre_condition": "(! Current_System_Mode = 4)",
            "conditionTextRange": [
                0,
                26
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                28,
                43
            ],
            "timingTextRange": [
                51,
                71
            ],
            "post_condition": "(( System_On & ! Patient_Bolus_Request ) => ! Current_System_Mode = 4)",
            "responseTextRange": [
                73,
                144
            ],
            "ft": "((LAST V (((! <b><i>(! Current_System_Mode = 4)</i></b>) & ((! LAST) & (X <b><i>(! Current_System_Mode = 4)</i></b>))) -> (X (LAST | (X <b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b>))))) & (<b><i>(! Current_System_Mode = 4)</i></b> -> (LAST | (X <b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b>))))",
            "pt": "(H ((Y (<b><i>(! Current_System_Mode = 4)</i></b> & ((Y (! <b><i>(! Current_System_Mode = 4)</i></b>)) | FTP))) -> (<b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b> | FTP)))",
            "ftExpanded": "((LAST V (((! <b><i>(! Current_System_Mode = 4)</i></b>) & ((! LAST) & (X <b><i>(! Current_System_Mode = 4)</i></b>))) -> (X (LAST | (X <b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b>))))) & (<b><i>(! Current_System_Mode = 4)</i></b> -> (LAST | (X <b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b>))))",
            "ptExpanded": "(H ((Y (<b><i>(! Current_System_Mode = 4)</i></b> & ((Y (! <b><i>(! Current_System_Mode = 4)</i></b>)) | (! (Y TRUE))))) -> (<b><i>(( System_On & ! Patient_Bolus_Request ) -> ! Current_System_Mode = 4)</i></b> | (! (Y TRUE)))))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((pre ((not Current_System_Mode = 4) and ((pre ( not (not Current_System_Mode = 4))) or FTP))) => ((( System_On and not Patient_Bolus_Request ) => not Current_System_Mode = 4) or FTP)))",
            "diagramVariables": "TC = <b><i>(! Current_System_Mode = 4)</i></b>, Response = <b><i>(( System_On & ! Patient_Bolus_Request ) => ! Current_System_Mode = 4)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! Current_System_Mode = 4)</i></b> is true and any point in the interval where <b><i>(! Current_System_Mode = 4)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg"
        },
        "_id": "47f0c7a0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g4",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (!System_On & Current_System_Mode < 2) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( ! System_On & Current_System_Mode < 2 ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                30,
                102
            ],
            "ft": "(LAST V <b><i>(( ! System_On & Current_System_Mode < 2 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "pt": "(H <b><i>(( ! System_On & Current_System_Mode < 2 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! System_On & Current_System_Mode < 2 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! System_On & Current_System_Mode < 2 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( not System_On and Current_System_Mode < 2 ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "Response = <b><i>(( ! System_On & Current_System_Mode < 2 ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f0c7a1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g0",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ((Current_System_Mode = 0 & Commanded_Flow_Rate = 0) | (Current_System_Mode = 1 & Commanded_Flow_Rate = 0) | (Current_System_Mode = 2) | (Current_System_Mode = 3) | (Current_System_Mode = 4) | (Current_System_Mode = 6 & Commanded_Flow_Rate = 0) | (Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO) | (Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))",
            "responseTextRange": [
                30,
                414
            ],
            "ft": "(LAST V <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>)",
            "pt": "(H <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( ( Current_System_Mode = 0 and Commanded_Flow_Rate = 0 ) or ( Current_System_Mode = 1 and Commanded_Flow_Rate = 0 ) or ( Current_System_Mode = 2 ) or ( Current_System_Mode = 3 ) or ( Current_System_Mode = 4 ) or ( Current_System_Mode = 6 and Commanded_Flow_Rate = 0 ) or ( Current_System_Mode = 7 and Commanded_Flow_Rate = Flow_Rate_KVO ) or ( Current_System_Mode = 8 and Commanded_Flow_Rate = Flow_Rate_KVO ) ))))",
            "diagramVariables": "Response = <b><i>(( ( Current_System_Mode = 0 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 2 ) | ( Current_System_Mode = 3 ) | ( Current_System_Mode = 4 ) | ( Current_System_Mode = 6 & Commanded_Flow_Rate = 0 ) | ( Current_System_Mode = 7 & Commanded_Flow_Rate = Flow_Rate_KVO ) | ( Current_System_Mode = 8 & Commanded_Flow_Rate = Flow_Rate_KVO ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f0eeb0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g1",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall immediately satisfy System_On => (Current_System_Mode = 1)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(System_On => ( Current_System_Mode = 1 ))",
            "responseTextRange": [
                35,
                80
            ],
            "ft": "<b><i>(System_On -> ( Current_System_Mode = 1 ))</i></b>",
            "pt": "(H (FTP -> <b><i>(System_On -> ( Current_System_Mode = 1 ))</i></b>))",
            "ftExpanded": "<b><i>(System_On -> ( Current_System_Mode = 1 ))</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(System_On -> ( Current_System_Mode = 1 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(FTP => (System_On => ( Current_System_Mode = 1 ))))",
            "diagramVariables": "Response = <b><i>(System_On => ( Current_System_Mode = 1 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "47f115c0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g8",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall at the next timepoint satisfy (System_On & Infusion_Cancel) => Current_System_Mode = 1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Infusion_Cancel",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                43
            ],
            "post_condition": "(( System_On & Infusion_Cancel ) => Current_System_Mode = 1)",
            "responseTextRange": [
                45,
                108
            ],
            "ft": "(LAST | (X <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode = 1)</i></b>))",
            "pt": "(H ((Y FTP) -> <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode = 1)</i></b>))",
            "ftExpanded": "(LAST | (X <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode = 1)</i></b>))",
            "ptExpanded": "(H ((Y (! (Y TRUE))) -> <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode = 1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((pre (FTP)) => (( System_On and Infusion_Cancel ) => Current_System_Mode = 1)))",
            "diagramVariables": "Response = <b><i>(( System_On & Infusion_Cancel ) => Current_System_Mode = 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg"
        },
        "_id": "47f13cd0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g5",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 4) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                30,
                101
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f13cd1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g6",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 3) => Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Highest_Level_Alarm",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                30,
                113
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f163e0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g2",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall at the next timepoint satisfy if (Current_System_Mode_pre = 0 & System_On) then (Current_System_Mode = 1 & Commanded_Flow_Rate = 0)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Current_System_Mode_pre",
                    "System_On",
                    "Current_System_Mode",
                    "Commanded_Flow_Rate"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                43
            ],
            "post_condition": "(( Current_System_Mode_pre = 0 & System_On ) => ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))",
            "responseTextRange": [
                45,
                153
            ],
            "ft": "(LAST | (X <b><i>(( Current_System_Mode_pre = 0 & System_On ) -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))",
            "pt": "(H ((Y FTP) -> <b><i>(( Current_System_Mode_pre = 0 & System_On ) -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))",
            "ftExpanded": "(LAST | (X <b><i>(( Current_System_Mode_pre = 0 & System_On ) -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))",
            "ptExpanded": "(H ((Y (! (Y TRUE))) -> <b><i>(( Current_System_Mode_pre = 0 & System_On ) -> ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((pre (FTP)) => (( Current_System_Mode_pre = 0 and System_On ) => ( Current_System_Mode = 1 and Commanded_Flow_Rate = 0 ))))",
            "diagramVariables": "Response = <b><i>(( Current_System_Mode_pre = 0 & System_On ) => ( Current_System_Mode = 1 & Commanded_Flow_Rate = 0 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg"
        },
        "_id": "47f163e1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g10",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall immediately satisfy (System_On & Configured < 1) => Current_System_Mode = 1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Configured",
                    "Current_System_Mode"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(( System_On & Configured < 1 ) => Current_System_Mode = 1)",
            "responseTextRange": [
                35,
                97
            ],
            "ft": "<b><i>(( System_On & Configured < 1 ) -> Current_System_Mode = 1)</i></b>",
            "pt": "(H (FTP -> <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode = 1)</i></b>))",
            "ftExpanded": "<b><i>(( System_On & Configured < 1 ) -> Current_System_Mode = 1)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode = 1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(FTP => (( System_On and Configured < 1 ) => Current_System_Mode = 1)))",
            "diagramVariables": "Response = <b><i>(( System_On & Configured < 1 ) => Current_System_Mode = 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "47f18af0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "g9",
        "parent_reqid": "",
        "project": "GPCA",
        "rationale": "",
        "fulltext": "Infusion_Manager shall at the next timepoint satisfy (System_On & Infusion_Inhibit) => Commanded_Flow_Rate <= Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "System_On",
                    "Infusion_Inhibit",
                    "Commanded_Flow_Rate",
                    "Flow_Rate_KVO"
                ],
                "modes": []
            },
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                43
            ],
            "post_condition": "(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)",
            "responseTextRange": [
                45,
                122
            ],
            "ft": "(LAST | (X <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "pt": "(H ((Y FTP) -> <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "(LAST | (X <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "ptExpanded": "(H ((Y (! (Y TRUE))) -> <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((pre (FTP)) => (( System_On and Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)))",
            "diagramVariables": "Response = <b><i>(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg"
        },
        "_id": "47f18af1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G8",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ( System_On & Highest_Level_Alarm = 2 ) => ( (!Current_System_Mode_3) | (!Current_System_Mode_4) )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "System_On",
                "Highest_Level_Alarm",
                "Current_System_Mode_3",
                "Current_System_Mode_4"
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 2 ) => ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))",
            "responseTextRange": [
                30,
                135
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 2 ) -> ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 2 ) => ( ( not Current_System_Mode_3 ) or ( not Current_System_Mode_4 ) ))))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 2 ) => ( ( ! Current_System_Mode_3 ) | ( ! Current_System_Mode_4 ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f1b200-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G3",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (!FTP & Current_System_Mode_0_pre & System_On) => ( Current_System_Mode_1 & Commanded_Flow_Rate = 0)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "FTP",
                "Current_System_Mode_0_pre",
                "System_On",
                "Current_System_Mode_1",
                "Commanded_Flow_Rate"
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( ! FTP & Current_System_Mode_0_pre & System_On ) => ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))",
            "responseTextRange": [
                30,
                137
            ],
            "ft": "(LAST V <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>)",
            "pt": "(H <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) -> ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( not FTP and Current_System_Mode_0_pre and System_On ) => ( Current_System_Mode_1 and Commanded_Flow_Rate = 0 ))))",
            "diagramVariables": "Response = <b><i>(( ! FTP & Current_System_Mode_0_pre & System_On ) => ( Current_System_Mode_1 & Commanded_Flow_Rate = 0 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f1b201-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G4",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ( ! System_On ) => Current_System_Mode_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "System_On",
                "Current_System_Mode_0"
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( ! System_On ) => Current_System_Mode_0)",
            "responseTextRange": [
                30,
                77
            ],
            "ft": "(LAST V <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "pt": "(H <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! System_On ) -> Current_System_Mode_0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( not System_On ) => Current_System_Mode_0)))",
            "diagramVariables": "Response = <b><i>(( ! System_On ) => Current_System_Mode_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f1d910-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G9",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "if !FTP Infusion_Manager shall always satisfy (System_On & Infusion_Cancel) => Current_System_Mode_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "FTP",
                "System_On",
                "Infusion_Cancel",
                "Current_System_Mode_1"
            ],
            "qualifier_word": "if",
            "pre_condition": "(! FTP)",
            "regular_condition": "(! FTP)",
            "conditionTextRange": [
                0,
                6
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                8,
                23
            ],
            "timingTextRange": [
                31,
                36
            ],
            "post_condition": "(( System_On & Infusion_Cancel ) => Current_System_Mode_1)",
            "responseTextRange": [
                38,
                99
            ],
            "ft": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))",
            "pt": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Cancel ) -> Current_System_Mode_1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((H( not (not FTP))) or (( System_On and Infusion_Cancel ) => Current_System_Mode_1)))",
            "diagramVariables": "TC = <b><i>(! FTP)</i></b>, Response = <b><i>(( System_On & Infusion_Cancel ) => Current_System_Mode_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! FTP)</i></b> is true and any point in the interval where <b><i>(! FTP)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "47f1d911-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G10",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "if ! FTP Infusion_Manager shall always satisfy (System_On & Infusion_Inhibit) => Commanded_Flow_Rate <= Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "FTP",
                "System_On",
                "Infusion_Inhibit",
                "Commanded_Flow_Rate",
                "Flow_Rate_KVO"
            ],
            "qualifier_word": "if",
            "pre_condition": "(! FTP)",
            "regular_condition": "(! FTP)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                9,
                24
            ],
            "timingTextRange": [
                32,
                37
            ],
            "post_condition": "(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)",
            "responseTextRange": [
                39,
                116
            ],
            "ft": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))",
            "pt": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(! FTP)</i></b>) & ((! LAST) & (X <b><i>(! FTP)</i></b>))) -> (X (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))) & (<b><i>(! FTP)</i></b> -> (LAST V <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(! FTP)</i></b>)) | <b><i>(( System_On & Infusion_Inhibit ) -> Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((H( not (not FTP))) or (( System_On and Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)))",
            "diagramVariables": "TC = <b><i>(! FTP)</i></b>, Response = <b><i>(( System_On & Infusion_Inhibit ) => Commanded_Flow_Rate <= Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! FTP)</i></b> is true and any point in the interval where <b><i>(! FTP)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "47f20020-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G5_1",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "in Current_System_Mode_0 Infusion_Manager shall always satisfy ( ! System_On ) => Commanded_Flow_Rate =0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_0",
                "System_On",
                "Commanded_Flow_Rate"
            ],
            "scope_mode": "Current_System_Mode_0",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                25,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(( ! System_On ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                55,
                103
            ],
            "ft": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "pt": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "ptExpanded": "(H (<b><i>Current_System_Mode_0</i></b> -> <b><i>(( ! System_On ) -> Commanded_Flow_Rate = 0)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(Current_System_Mode_0 => (( not System_On ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "M = <b><i>Current_System_Mode_0</i></b>, Response = <b><i>(( ! System_On ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Current_System_Mode_0</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f24e40-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G11",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Configured < 1) => Current_System_Mode_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "System_On",
                "Configured",
                "Current_System_Mode_1"
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Configured < 1 ) => Current_System_Mode_1)",
            "responseTextRange": [
                30,
                90
            ],
            "ft": "(LAST V <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "pt": "(H <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Configured < 1 ) -> Current_System_Mode_1)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Configured < 1 ) => Current_System_Mode_1)))",
            "diagramVariables": "Response = <b><i>(( System_On & Configured < 1 ) => Current_System_Mode_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f24e41-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G1_1",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Current_System_Mode_0",
                "Current_System_Mode_1",
                "Current_System_Mode_2",
                "Current_System_Mode_3",
                "Current_System_Mode_4",
                "Current_System_Mode_6",
                "Current_System_Mode_7",
                "Current_System_Mode_8"
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))",
            "responseTextRange": [
                30,
                228
            ],
            "ft": "(LAST V <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>)",
            "pt": "(H <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>)",
            "ptExpanded": "(H <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( Current_System_Mode_0 or Current_System_Mode_1 or Current_System_Mode_2 or Current_System_Mode_3 or Current_System_Mode_4 or Current_System_Mode_6 or Current_System_Mode_7 or Current_System_Mode_8 ))))",
            "diagramVariables": "Response = <b><i>(( Current_System_Mode_0 | Current_System_Mode_1 | Current_System_Mode_2 | Current_System_Mode_3 | Current_System_Mode_4 | Current_System_Mode_6 | Current_System_Mode_7 | Current_System_Mode_8 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f27550-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G6",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 4) => Commanded_Flow_Rate = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "System_On",
                "Highest_Level_Alarm",
                "Commanded_Flow_Rate"
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)",
            "responseTextRange": [
                30,
                101
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 4 ) -> Commanded_Flow_Rate = 0)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 4 ) => Commanded_Flow_Rate = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f27551-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G12",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy ( System_On & !Patient_Bolus_Request & (! Current_System_Mode_4_pre)) => !Current_System_Mode_4",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "System_On",
                "Patient_Bolus_Request",
                "Current_System_Mode_4_pre",
                "Current_System_Mode_4"
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) => ! Current_System_Mode_4)",
            "responseTextRange": [
                30,
                132
            ],
            "ft": "(LAST V <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "pt": "(H <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) -> ! Current_System_Mode_4)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and not Patient_Bolus_Request and ( not Current_System_Mode_4_pre ) ) => not Current_System_Mode_4)))",
            "diagramVariables": "Response = <b><i>(( System_On & ! Patient_Bolus_Request & ( ! Current_System_Mode_4_pre ) ) => ! Current_System_Mode_4)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f29c60-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G2",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall immediately satisfy System_On => Current_System_Mode_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "System_On",
                "Current_System_Mode_1"
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(System_On => Current_System_Mode_1)",
            "responseTextRange": [
                35,
                76
            ],
            "ft": "<b><i>(System_On -> Current_System_Mode_1)</i></b>",
            "pt": "(H (FTP -> <b><i>(System_On -> Current_System_Mode_1)</i></b>))",
            "ftExpanded": "<b><i>(System_On -> Current_System_Mode_1)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(System_On -> Current_System_Mode_1)</i></b>))",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H(FTP => (System_On => Current_System_Mode_1)))",
            "diagramVariables": "Response = <b><i>(System_On => Current_System_Mode_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "47f29c61-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G7",
        "parent_reqid": "",
        "project": "GPCA_with_modes",
        "rationale": "",
        "fulltext": "Infusion_Manager shall always satisfy (System_On & Highest_Level_Alarm = 3) => Commanded_Flow_Rate = Flow_Rate_KVO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "System_On",
                "Highest_Level_Alarm",
                "Commanded_Flow_Rate",
                "Flow_Rate_KVO"
            ],
            "component_name": "Infusion_Manager",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                28
            ],
            "post_condition": "(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)",
            "responseTextRange": [
                30,
                113
            ],
            "ft": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "pt": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "ptExpanded": "(H <b><i>(( System_On & Highest_Level_Alarm = 3 ) -> Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>)",
            "component": "<b><i>Infusion_Manager</i></b>",
            "CoCoSpecCode": "(H((( System_On and Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)))",
            "diagramVariables": "Response = <b><i>(( System_On & Highest_Level_Alarm = 3 ) => Commanded_Flow_Rate = Flow_Rate_KVO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f2c370-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "req4",
        "parent_reqid": "",
        "project": "Hanfor",
        "rationale": "",
        "comments": "Globally, it is always the case that if ‘A’ holds then ‘!C’ holds for at least ‘2’ time units.",
        "fulltext": "if A component shall within 3 seconds satisfy !C",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "within",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "A",
                    "C"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(A)",
            "regular_condition": "(A)",
            "conditionTextRange": [
                0,
                3
            ],
            "component_name": "component",
            "componentTextRange": [
                5,
                13
            ],
            "duration": [
                "3"
            ],
            "timingTextRange": [
                21,
                36
            ],
            "post_condition": "(! C)",
            "responseTextRange": [
                38,
                47
            ],
            "ft": "((LAST V (((! <b><i>(A)</i></b>) & ((! LAST) & (X <b><i>(A)</i></b>))) -> (X ((F[<=<b><i>3</i></b>] <b><i>(! C)</i></b>) | (F[<<b><i>3</i></b>] LAST))))) & (<b><i>(A)</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(! C)</i></b>) | (F[<<b><i>3</i></b>] LAST))))",
            "pt": "(H ((O[=<b><i>3</i></b>] ((<b><i>(A)</i></b> & ((Y (! <b><i>(A)</i></b>)) | FTP)) & (! <b><i>(! C)</i></b>))) -> (O[<<b><i>3</i></b>] (FTP | <b><i>(! C)</i></b>))))",
            "ftExpanded": "((LAST V (((! <b><i>(A)</i></b>) & ((! LAST) & (X <b><i>(A)</i></b>))) -> (X ((F[<=<b><i>3</i></b>] <b><i>(! C)</i></b>) | (F[<<b><i>3</i></b>] LAST))))) & (<b><i>(A)</i></b> -> ((F[<=<b><i>3</i></b>] <b><i>(! C)</i></b>) | (F[<<b><i>3</i></b>] LAST))))",
            "ptExpanded": "(H ((O[=<b><i>3</i></b>] ((<b><i>(A)</i></b> & ((Y (! <b><i>(A)</i></b>)) | (! (Y TRUE)))) & (! <b><i>(! C)</i></b>))) -> (O[<<b><i>3</i></b>] ((! (Y TRUE)) | <b><i>(! C)</i></b>))))",
            "component": "<b><i>component</i></b>",
            "CoCoSpecCode": "(H((OT(3,3,(((A) and ((pre ( not (A))) or FTP)) and ( not (not C))))) => (OT(3-1,0,(FTP or (not C))))))",
            "diagramVariables": "TC = <b><i>(A)</i></b>,  n = <b><i>3</i></b>, Response = <b><i>(! C)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(A)</i></b> is true and any point in the interval where <b><i>(A)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>3</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>3</i></b>). If the interval ends sooner than trigger+<b><i>3</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_within_satisfaction.svg"
        },
        "_id": "47f2c371-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TUI-002",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy yout <= TL &  yout >= BL",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "TL",
                    "BL"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(yout <= TL & yout >= BL)",
            "responseTextRange": [
                31,
                62
            ],
            "ft": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "pt": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ptExpanded": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((yout <= TL and yout >= BL)))",
            "diagramVariables": "Response = <b><i>(yout <= TL & yout >= BL)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f2ea80-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-011v1",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                17,
                100
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f2ea81-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G2_2",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "local var spec_loaded\n\nG (dropping -> ! next (spec_loaded));",
        "fulltext": "Forklift shall always satisfy (dropping_pre => ! spec_loaded)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "dropping_pre",
                    "spec_loaded"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(( dropping_pre => ! spec_loaded ))",
            "responseTextRange": [
                22,
                60
            ],
            "ft": "(LAST V <b><i>(( dropping_pre -> ! spec_loaded ))</i></b>)",
            "pt": "(H <b><i>(( dropping_pre -> ! spec_loaded ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( dropping_pre -> ! spec_loaded ))</i></b>)",
            "ptExpanded": "(H <b><i>(( dropping_pre -> ! spec_loaded ))</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((( dropping_pre => not spec_loaded ))))",
            "diagramVariables": "Response = <b><i>(( dropping_pre => ! spec_loaded ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f31190-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-003c",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =4 => set_val = 0.5 * (ib +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ib",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 4 => set_val = 0.5 * ( ib + ic ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 4 => set_val = 0.5 * ( ib + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 4 => set_val = 0.5 * ( ib + ic ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f31191-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "A1_2",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "find cargo if going forward to next station\n\nG ((forwarding & spec_loaded) -> F ((station & cargo = CLEAR) | backing | stopping));  ",
        "fulltext": "if (forwarding_pre & spec_loaded_pre) Forklift shall eventually satisfy ((station & cargo = CLEAR) | backing | stopping))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "forwarding_pre",
                    "spec_loaded_pre",
                    "station",
                    "cargo",
                    "CLEAR",
                    "backing",
                    "stopping"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(( forwarding_pre & spec_loaded_pre ))",
            "regular_condition": "(( forwarding_pre & spec_loaded_pre ))",
            "conditionTextRange": [
                0,
                36
            ],
            "component_name": "Forklift",
            "componentTextRange": [
                38,
                45
            ],
            "timingTextRange": [
                53,
                62
            ],
            "post_condition": "(( ( station & cargo = CLEAR ) | backing | stopping ))",
            "responseTextRange": [
                64,
                119
            ],
            "ft": "((LAST V (((! <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b>) & ((! LAST) & (X <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b>))) -> (X ((! LAST) U <b><i>(( ( station & cargo = CLEAR ) | backing | stopping ))</i></b>)))) & (<b><i>(( forwarding_pre & spec_loaded_pre ))</i></b> -> ((! LAST) U <b><i>(( ( station & cargo = CLEAR ) | backing | stopping ))</i></b>)))",
            "pt": "((H (! <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b>)) | (! ((! <b><i>(( ( station & cargo = CLEAR ) | backing | stopping ))</i></b>) S ((! <b><i>(( ( station & cargo = CLEAR ) | backing | stopping ))</i></b>) & (<b><i>(( forwarding_pre & spec_loaded_pre ))</i></b> & ((Y (! <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b>) & ((! LAST) & (X <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b>))) -> (X ((! LAST) U <b><i>(( ( station & cargo = CLEAR ) | backing | stopping ))</i></b>)))) & (<b><i>(( forwarding_pre & spec_loaded_pre ))</i></b> -> ((! LAST) U <b><i>(( ( station & cargo = CLEAR ) | backing | stopping ))</i></b>)))",
            "ptExpanded": "((H (! <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b>)) | (! ((! <b><i>(( ( station & cargo = CLEAR ) | backing | stopping ))</i></b>) S ((! <b><i>(( ( station & cargo = CLEAR ) | backing | stopping ))</i></b>) & (<b><i>(( forwarding_pre & spec_loaded_pre ))</i></b> & ((Y (! <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "((H( not (( forwarding_pre and spec_loaded_pre )))) or ( not (SI( ((( forwarding_pre and spec_loaded_pre )) and ((pre ( not (( forwarding_pre and spec_loaded_pre )))) or FTP)), ( not (( ( station and cargo = CLEAR ) or backing or stopping ))) ))))",
            "diagramVariables": "TC = <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b>, Response = <b><i>(( ( station & cargo = CLEAR ) | backing | stopping ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b> is true and any point in the interval where <b><i>(( forwarding_pre & spec_loaded_pre ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg"
        },
        "_id": "47f338a0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-003B",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy (roll_angle < 6.0 & roll_angle > -6.0) => roll_hold_reference =0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                123
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "(H (Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "(H ((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "47f338a1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TUI-003",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy normal => yout = normal_yout",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "normal",
                    "yout",
                    "normal_yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(normal => yout = normal_yout)",
            "responseTextRange": [
                31,
                66
            ],
            "ft": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "pt": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ptExpanded": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((normal => yout = normal_yout)))",
            "diagramVariables": "Response = <b><i>(normal => yout = normal_yout)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f35fb0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "SWIM-002",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "2.\tWhen a low speed warning is allowed, as computed by the SWIM Airspeed algorithm, a low speed warning shall be true when the vehicle air data impact pressure is less than the warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished where:\n\nThe warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished is computed as\n\nSWIM_Qcmin_lbspft2 = [(-2.0906 + 0.020306*Auto GCAS Minimum Vcas) + 0.1] * (70.7184 (lbspft2/in Hg))",
        "fulltext": "SWIM shall always satisfy ((lowSpeedWarningAllowed  & vehAirPress < warningTrigForMinPress) => lowSpeedWarningTrue)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lowSpeedWarningAllowed",
                    "vehAirPress",
                    "warningTrigForMinPress",
                    "lowSpeedWarningTrue"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))",
            "responseTextRange": [
                18,
                114
            ],
            "ft": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "pt": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( lowSpeedWarningAllowed and vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))))",
            "diagramVariables": "Response = <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f386c0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EB-004",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "EB shall always satisfy Buminusd_norm<0.0001",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Buminusd_norm"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(Buminusd_norm < 0.0001)",
            "responseTextRange": [
                16,
                43
            ],
            "ft": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "pt": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ptExpanded": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((Buminusd_norm < 0.0001)))",
            "diagramVariables": "Response = <b><i>(Buminusd_norm < 0.0001)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f386c1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-010",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "limits",
                    "SENSTATE",
                    "sen_fault_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)",
            "responseTextRange": [
                17,
                93
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and limits ) => SENSTATE = sen_fault_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f3add0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-000",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The altitude hold autopilot shall maintain altitude within 35 feet of the initial condition. ",
        "fulltext": "Autopilot shall always satisfy altitude_hold => absOf_alt_minus_altIC <= 35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "altitude_hold",
                    "absOf_alt_minus_altIC"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(altitude_hold => absOf_alt_minus_altIC <= 35.0)",
            "responseTextRange": [
                23,
                76
            ],
            "ft": "(LAST V <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "pt": "(H <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "ptExpanded": "(H <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((altitude_hold => absOf_alt_minus_altIC <= 35.0)))",
            "diagramVariables": "Response = <b><i>(altitude_hold => absOf_alt_minus_altIC <= 35.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f3d4e0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001v1",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).",
        "fulltext": "FSM  shall  always  satisfy (limits & !standby & !apfail & supported) => pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "limits",
                    "standby",
                    "apfail",
                    "supported",
                    "pullup"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( limits & ! standby & ! apfail & supported ) => pullup)",
            "responseTextRange": [
                20,
                78
            ],
            "ft": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "pt": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ptExpanded": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( limits and not standby and not apfail and supported ) => pullup)))",
            "diagramVariables": "Response = <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f3fbf0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "A4",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "station does not change when stopping\n\nG (stopping -> station = next(station));",
        "fulltext": "Forklift shall always satisfy stopping_pre => (station = station_pre)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "stopping_pre",
                    "station",
                    "station_pre"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(stopping_pre => ( station = station_pre ))",
            "responseTextRange": [
                22,
                68
            ],
            "ft": "(LAST V <b><i>(stopping_pre -> ( station = station_pre ))</i></b>)",
            "pt": "(H <b><i>(stopping_pre -> ( station = station_pre ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(stopping_pre -> ( station = station_pre ))</i></b>)",
            "ptExpanded": "(H <b><i>(stopping_pre -> ( station = station_pre ))</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((stopping_pre => ( station = station_pre ))))",
            "diagramVariables": "Response = <b><i>(stopping_pre => ( station = station_pre ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f42300-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-004",
        "parent_reqid": "NN.R1",
        "project": "Lockheed_Martin_whole",
        "rationale": "The absolute error between the zt truth data and the output z shall never exceed a tolerance of 0.01, for the equivalent input of (xt, yt).",
        "fulltext": "NN shall for 200 secs satisfy ( x = xt & y = yt  => AbsoluteErrorZtMinusZ <= 0.01)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "xt",
                    "y",
                    "yt",
                    "AbsoluteErrorZtMinusZ"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))",
            "responseTextRange": [
                22,
                81
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (( x = xt and y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>200</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>200</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>200</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "47f42301-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-004b",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "when in roll_hold mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                23,
                31
            ],
            "timingTextRange": [
                39,
                44
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                46,
                69
            ],
            "ft": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(overshoot <= 0.1)</i></b>))",
            "pt": "(H (<b><i>roll_hold</i></b> -> <b><i>(overshoot <= 0.1)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(overshoot <= 0.1)</i></b>))",
            "ptExpanded": "(H (<b><i>roll_hold</i></b> -> <b><i>(overshoot <= 0.1)</i></b>))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H(roll_hold => (overshoot <= 0.1)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f44a10-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-006",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The autopilot shall change states from MANEUVER to STANDBY when the pilot is in control (standby) and sensor data is good",
        "fulltext": "FSM shall always satisfy (state = ap_maneuver_state & standby & good) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "standby",
                    "good",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)",
            "responseTextRange": [
                17,
                96
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and standby and good ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f47120-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-007",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Pitch Regulator Shall not command transient changes in angular pitch acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy pitch_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pitch_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(pitch_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                64
            ],
            "ft": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((pitch_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f47121-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-004",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy (single_fail_reported & failure_in_progress => set_val = pre_set_val)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "single_fail_reported",
                    "failure_in_progress",
                    "set_val",
                    "pre_set_val"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))",
            "responseTextRange": [
                34,
                110
            ],
            "ft": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "pt": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ptExpanded": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( single_fail_reported and failure_in_progress => set_val = pre_set_val ))))",
            "diagramVariables": "Response = <b><i>(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f49830-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-006",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Inner Loop Roll Regulator Shall not command transient changes in angular roll acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy roll_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(roll_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                63
            ],
            "ft": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((roll_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f49831-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-011v1",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The sensor shall change states from NOMINAL to TRANSITION when the autopilot is not requesting support (not request)",
        "fulltext": "FSM shall always  satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                18,
                101
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f4bf40-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001v3",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "if  htlore3_autopilot  &  htlore3_notpreprelimits  &  pre_limits  FSM  shall  immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "htlore3_autopilot",
                    "htlore3_notpreprelimits",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "conditionTextRange": [
                0,
                63
            ],
            "component_name": "FSM",
            "componentTextRange": [
                66,
                68
            ],
            "timingTextRange": [
                78,
                88
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                90,
                103
            ],
            "ft": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((htlore3_autopilot and htlore3_notpreprelimits and pre_limits) and ((pre ( not (htlore3_autopilot and htlore3_notpreprelimits and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> is true and any point in the interval where <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47f4e650-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-012",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The sensor shall change states from FAULT to TRANSITION when the autopilot is not requesting support (not request) and limits are not exceeded (not limits)",
        "fulltext": "FSM shall  always  satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_fault_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                19,
                110
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_fault_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f4e651-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G3_1",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "restricting lifting action based on var spec_loaded\n\nG (spec_loaded -> !lifting);",
        "fulltext": "Forklift shall always satisfy spec_loaded => ! lifting",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "spec_loaded",
                    "lifting"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(spec_loaded => ! lifting)",
            "responseTextRange": [
                22,
                53
            ],
            "ft": "(LAST V <b><i>(spec_loaded -> ! lifting)</i></b>)",
            "pt": "(H <b><i>(spec_loaded -> ! lifting)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(spec_loaded -> ! lifting)</i></b>)",
            "ptExpanded": "(H <b><i>(spec_loaded -> ! lifting)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((spec_loaded => not lifting)))",
            "diagramVariables": "Response = <b><i>(spec_loaded => ! lifting)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f50d60-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-002a",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "Roll hold mode shall be the active mode whenever the autopilot is engaged and no other lateral mode is active.",
        "fulltext": "when in roll_hold mode RollAutopilot shall always satisfy autopilot_engaged & no_other_lateral_mode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "no_other_lateral_mode"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                23,
                35
            ],
            "timingTextRange": [
                43,
                48
            ],
            "post_condition": "(autopilot_engaged & no_other_lateral_mode)",
            "responseTextRange": [
                50,
                98
            ],
            "ft": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>))",
            "pt": "(H (<b><i>roll_hold</i></b> -> <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>roll_hold</i></b> -> <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>))",
            "ptExpanded": "(H (<b><i>roll_hold</i></b> -> <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H(roll_hold => (autopilot_engaged and no_other_lateral_mode)))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>roll_hold</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f53470-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001v2",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "if autopilot & pre_autopilot & pre_limits FSM shall immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot",
                    "pre_autopilot",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "qualifier_word": "if",
            "pre_condition": "(autopilot & pre_autopilot & pre_limits)",
            "regular_condition": "(autopilot & pre_autopilot & pre_limits)",
            "conditionTextRange": [
                0,
                40
            ],
            "component_name": "FSM",
            "componentTextRange": [
                42,
                44
            ],
            "timingTextRange": [
                52,
                62
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                64,
                77
            ],
            "ft": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((autopilot and pre_autopilot and pre_limits) and ((pre ( not (autopilot and pre_autopilot and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(autopilot & pre_autopilot & pre_limits)</i></b> is true and any point in the interval where <b><i>(autopilot & pre_autopilot & pre_limits)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47f55b80-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "G4",
        "parent_reqid": "",
        "project": "V1Delay",
        "rationale": "",
        "comments": "dont run into obstacles\n\nG ((sense = BLOCKED | lowObstacle) -> ! forwarding);",
        "fulltext": "Forklift shall always satisfy (sense = BLOCKED | lowObstacle) => ! forwarding",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "sense",
                    "BLOCKED",
                    "lowObstacle",
                    "forwarding"
                ],
                "modes": []
            },
            "component_name": "Forklift",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(( sense = BLOCKED | lowObstacle ) => ! forwarding)",
            "responseTextRange": [
                22,
                76
            ],
            "ft": "(LAST V <b><i>(( sense = BLOCKED | lowObstacle ) -> ! forwarding)</i></b>)",
            "pt": "(H <b><i>(( sense = BLOCKED | lowObstacle ) -> ! forwarding)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( sense = BLOCKED | lowObstacle ) -> ! forwarding)</i></b>)",
            "ptExpanded": "(H <b><i>(( sense = BLOCKED | lowObstacle ) -> ! forwarding)</i></b>)",
            "component": "<b><i>Forklift</i></b>",
            "CoCoSpecCode": "(H((( sense = BLOCKED or lowObstacle ) => not forwarding)))",
            "diagramVariables": "Response = <b><i>(( sense = BLOCKED | lowObstacle ) => ! forwarding)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f55b81-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-003d",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The roll reference shall be set to the cockpit turn knob command, up to a 30 degree limit, if the turn knob is commanding 3 degrees or more in either direction. (we removed the \"up to a 30 degree limit\" part)",
        "fulltext": "RollAutopilot shall always satisfy (TurnKnob >= 3.0 | TurnKnob <= -3.0) & (TurnKnob <= 30.0 | TurnKnob >= -30.0) => roll_hold_reference = TurnKnob",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "TurnKnob",
                    "roll_hold_reference"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)",
            "responseTextRange": [
                27,
                145
            ],
            "ft": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "pt": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ptExpanded": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((( TurnKnob >= 3.0 or TurnKnob <= -3.0 ) and ( TurnKnob <= 30.0 or TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)))",
            "diagramVariables": "Response = <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f58290-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-004",
        "parent_reqid": "NN.R1",
        "project": "LM_requirements",
        "rationale": "The absolute error between the zt truth data and the output z shall never exceed a tolerance of 0.01, for the equivalent input of (xt, yt).",
        "fulltext": "NN shall for 200 secs satisfy ( x = xt & y = yt  => AbsoluteErrorZtMinusZ <= 0.01)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "xt",
                    "y",
                    "yt",
                    "AbsoluteErrorZtMinusZ"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))",
            "responseTextRange": [
                22,
                81
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (( x = xt and y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "47f58291-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from TRANSITION to STANDBY when the pilot is in control (standby).",
        "fulltext": "FSM_Autopilot shall always satisfy (standby & state = ap_transition_state) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "standby",
                    "state",
                    "ap_transition_state",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( standby & state = ap_transition_state ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                101
            ],
            "ft": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( standby and state = ap_transition_state ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f5a9a0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_13 = - SinTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_13",
                    "SinTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_13 = - SinTheta)",
            "responseTextRange": [
                19,
                48
            ],
            "ft": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_13 = - SinTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_13 = - SinTheta)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_13 = - SinTheta)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f5d0b0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy (single_fail_reported & failure_in_progress => set_val = pre_set_val)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "single_fail_reported",
                    "failure_in_progress",
                    "set_val",
                    "pre_set_val"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))",
            "responseTextRange": [
                34,
                110
            ],
            "ft": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "pt": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ptExpanded": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( single_fail_reported and failure_in_progress => set_val = pre_set_val ))))",
            "diagramVariables": "Response = <b><i>(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f5f7c0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-002B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "in roll_hold mode RollAutopilot shall always satisfy roll_cmd = roll_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "roll_hold_mode_cmd"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                43
            ],
            "post_condition": "(roll_cmd = roll_hold_mode_cmd)",
            "responseTextRange": [
                45,
                81
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (roll_cmd = roll_hold_mode_cmd) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (roll_cmd = roll_hold_mode_cmd) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f5f7c1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001I",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_33 = CosPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_33",
                    "CosPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_33 = CosPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_33 = CosPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f61ed0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EB-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on  =  TRUE) &  abs(check_1_1  - 1.0)<eps6  &  abs(check_1_2)<eps6  &  abs(check_1_3)<eps6  & abs(check_2_1)<eps6  &  abs(check_2_2  -  1.0)<eps6  &  abs(check_2_3)<eps6  & abs(check_3_1)<eps6 & abs(check_3_2)< eps6 & abs(check_3_3 - 1.0)<eps6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "TRUE",
                    "abs",
                    "check_1_1",
                    "eps6",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)",
            "responseTextRange": [
                19,
                300
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) and abs ( check_1_1 - 1.0 ) < eps6 and abs ( check_1_2 ) < eps6 and abs ( check_1_3 ) < eps6 and abs ( check_2_1 ) < eps6 and abs ( check_2_2 - 1.0 ) < eps6 and abs ( check_2_3 ) < eps6 and abs ( check_3_1 ) < eps6 and abs ( check_3_2 ) < eps6 and abs ( check_3_3 - 1.0 ) < eps6)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f645e0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-010a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in hdg mode, when hdg_steady_state Autopilot shall always satisfy abs_hdg_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_steady_state",
                    "abs_hdg_err"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                16
            ],
            "regular_condition": "(hdg_steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(hdg_steady_state)",
            "conditionTextRange": [
                18,
                38
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                40,
                48
            ],
            "timingTextRange": [
                56,
                61
            ],
            "post_condition": "(abs_hdg_err <= 1.0)",
            "responseTextRange": [
                63,
                88
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg</i></b> & (! LAST))) | (X (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>hdg</i></b> & (! FTP)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) & Fin_<b><i>hdg</i></b>))))) & (((! Lin_<b><i>hdg</i></b>) S ((! Lin_<b><i>hdg</i></b>) & Fin_<b><i>hdg</i></b>)) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) & Fin_<b><i>hdg</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg</i></b>) & (! LAST)) & (X <b><i>hdg</i></b>)) & (! LAST))) | (X (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) S ((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg) and (pre (hdg))) and ( not FTP)) => (pre (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (SI( ((hdg_steady_state) and ((pre ( not (hdg_steady_state))) or (hdg and (FTP or (pre ( not hdg)))))), (abs_hdg_err <= 1.0) ))) ))))) and ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (( not hdg) and (pre (hdg)))) )) => (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (SI( ((hdg_steady_state) and ((pre ( not (hdg_steady_state))) or (hdg and (FTP or (pre ( not hdg)))))), (abs_hdg_err <= 1.0) ))) ))))",
            "diagramVariables": "M = <b><i>hdg</i></b>, TC = <b><i>(hdg_steady_state)</i></b>, Response = <b><i>(abs_hdg_err <= 1.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_hdg_err <= 1.0)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>hdg</i></b> and <b><i>(hdg_steady_state)</i></b> is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "47f66cf0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy (Vv * yout) > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Vv",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( Vv * yout ) > 0)",
            "responseTextRange": [
                24,
                46
            ],
            "ft": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "pt": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((( Vv * yout ) > 0)))",
            "diagramVariables": "Response = <b><i>(( Vv * yout ) > 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(( Vv * yout ) > 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f69400-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-002&3",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - Xtarg) >= r & dot((yout - Xtarg),(yout - Xv)) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "Xtarg",
                    "r",
                    "dot",
                    "Xv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)",
            "responseTextRange": [
                24,
                91
            ],
            "ft": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "pt": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - Xtarg ) >= r and dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)))",
            "diagramVariables": "Response = <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f69401-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TUI-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy yout <= TL &  yout >= BL",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "TL",
                    "BL"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(yout <= TL & yout >= BL)",
            "responseTextRange": [
                31,
                62
            ],
            "ft": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "pt": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ptExpanded": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((yout <= TL and yout >= BL)))",
            "diagramVariables": "Response = <b><i>(yout <= TL & yout >= BL)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(yout <= TL & yout >= BL)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f6bb10-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Rotation Matrix Output, DCM321, of this Function Shall Equal a 3x3 Matrix Product of a 3x3 Euler 3 (Roll) Rotation Matrix times a 3x3 Euler 2 (Pitch) Rotation Matrix times a 3x3 Euler 1 (Heading) Rotation Matrix.",
        "fulltext": "Euler shall always satisfy DCM321_11 = CosTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_11",
                    "CosTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_11 = CosTheta * CosPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_11 = CosTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f6e220-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EB-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on  =  TRUE) &  abs(check_1_1  - 1.0)<eps12  &  abs(check_1_2)<eps12  &  abs(check_1_3)<eps12  & abs(check_2_1)<eps12  &  abs(check_2_2  -  1.0)<eps12  &  abs(check_2_3)<eps12  & abs(check_3_1)<eps12 & abs(check_3_2)< eps12 & abs(check_3_3 - 1.0)<eps12",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "TRUE",
                    "abs",
                    "check_1_1",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)",
            "responseTextRange": [
                19,
                309
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) and abs ( check_1_1 - 1.0 ) < eps12 and abs ( check_1_2 ) < eps12 and abs ( check_1_3 ) < eps12 and abs ( check_2_1 ) < eps12 and abs ( check_2_2 - 1.0 ) < eps12 and abs ( check_2_3 ) < eps12 and abs ( check_3_1 ) < eps12 and abs ( check_3_2 ) < eps12 and abs ( check_3_3 - 1.0 ) < eps12)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f6e221-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-003A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy !(Cb | Cc1 | Cc2 | Cd)  => roll_hold_reference = roll_angle",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Cb",
                    "Cc1",
                    "Cc2",
                    "Cd",
                    "roll_hold_reference",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)",
            "responseTextRange": [
                50,
                116
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (not ( Cb or Cc1 or Cc2 or Cd ) => roll_hold_reference = roll_angle)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (not ( Cb or Cc1 or Cc2 or Cd ) => roll_hold_reference = roll_angle)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "47f70930-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBYwhen the pilot is in control (standby).",
        "fulltext": "FSM_Autopilot shall always satisfy (state=ap_nominal_state & standby)  => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "standby",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                97
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and standby ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f70931-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "SWIM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "2.\tWhen a low speed warning is allowed, as computed by the SWIM Airspeed algorithm, a low speed warning shall be true when the vehicle air data impact pressure is less than the warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished where:\n\nThe warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished is computed as\n\nSWIM_Qcmin_lbspft2 = [(-2.0906 + 0.020306*Auto GCAS Minimum Vcas) + 0.1] * (70.7184 (lbspft2/in Hg))",
        "fulltext": "SWIM shall always satisfy ((lowSpeedWarningAllowed  & vehAirPress < warningTrigForMinPress) => lowSpeedWarningTrue)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lowSpeedWarningAllowed",
                    "vehAirPress",
                    "warningTrigForMinPress",
                    "lowSpeedWarningTrue"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))",
            "responseTextRange": [
                18,
                114
            ],
            "ft": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "pt": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( lowSpeedWarningAllowed and vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))))",
            "diagramVariables": "Response = <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f73040-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "In the no-fail state, a mis-compare, which shall be characterized by one branch differing with the other two branches by a unique trip level that lasts for more than the persistence limit, shall be reported to failure management as a failure.",
        "fulltext": "TriplexSignalMonitor shall always satisfy ((pre_no_fail & failure_must_be_latched)=> single_fail_reported)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pre_no_fail",
                    "failure_must_be_latched",
                    "single_fail_reported"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))",
            "responseTextRange": [
                34,
                105
            ],
            "ft": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "pt": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( ( pre_no_fail and failure_must_be_latched ) => single_fail_reported ))))",
            "diagramVariables": "Response = <b><i>(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f73041-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TUI-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy (BL <= IC & IC <= TL & RESET)  => yout = IC",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "BL",
                    "IC",
                    "TL",
                    "RESET",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(( BL <= IC & IC <= TL & RESET ) => yout = IC)",
            "responseTextRange": [
                31,
                81
            ],
            "ft": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "pt": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ptExpanded": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((( BL <= IC and IC <= TL and RESET ) => yout = IC)))",
            "diagramVariables": "Response = <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f75750-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EB-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB shall always satisfy Buminusd_norm<0.0001",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Buminusd_norm"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(Buminusd_norm < 0.0001)",
            "responseTextRange": [
                16,
                43
            ],
            "ft": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "pt": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ptExpanded": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((Buminusd_norm < 0.0001)))",
            "diagramVariables": "Response = <b><i>(Buminusd_norm < 0.0001)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(Buminusd_norm < 0.0001)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f75751-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-003B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByYt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)",
            "responseTextRange": [
                22,
                83
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByYt <= 10.0 and DeltaZDividedByYt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "47f77e60-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from TRANSITION to NOMINAL when the system is supported and sensor data is good.",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_transition_state & good & supported) => STATE = ap_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_transition_state",
                    "good",
                    "supported",
                    "STATE",
                    "ap_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)",
            "responseTextRange": [
                27,
                110
            ],
            "ft": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_transition_state and good and supported ) => STATE = ap_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f77e61-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-008v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from STANDBY to TRANSITION when the pilot is not in control (not standby)",
        "fulltext": " FSM_Autopilot shall always satisfy (state = ap_standby_state & !standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                102
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f7a570-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-011v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from NOMINAL to TRANSITION when the autopilot is not requesting support (not request)",
        "fulltext": "FSM_Sensor shall always  satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                25,
                108
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f7a571-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-010b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in hdg mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                40,
                63
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>hdg</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg</i></b> & (! FTP)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>hdg</i></b>))))) & (((! Lin_<b><i>hdg</i></b>) S ((! Lin_<b><i>hdg</i></b>) & Fin_<b><i>hdg</i></b>)) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>hdg</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg</i></b>) & (! LAST)) & (X <b><i>hdg</i></b>)) & (! LAST))) | (X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>hdg</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>)) & (Y TRUE)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) S ((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg) and (pre (hdg))) and ( not FTP)) => (pre (SI( (hdg and (FTP or (pre ( not hdg)))), (overshoot <= 0.1) ))))) and ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (( not hdg) and (pre (hdg)))) )) => (SI( (hdg and (FTP or (pre ( not hdg)))), (overshoot <= 0.1) ))))",
            "diagramVariables": "M = <b><i>hdg</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(overshoot <= 0.1)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>hdg</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f7cc80-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-002C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_31",
                    "VI_1",
                    "R_31",
                    "VI_2",
                    "R_32",
                    "VI_3",
                    "R_33"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "pt": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)))",
            "diagramVariables": "Response = <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f7cc81-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command translational axial accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_airspeed_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_airspeed_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_airspeed_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                71
            ],
            "ft": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_airspeed_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f7f390-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-002a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll hold mode shall be the active mode whenever the autopilot is engaged and no other lateral mode is active.",
        "fulltext": "when in roll_hold mode RollAutopilot shall always satisfy autopilot_engaged & no_other_lateral_mode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "no_other_lateral_mode"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                23,
                35
            ],
            "timingTextRange": [
                43,
                48
            ],
            "post_condition": "(autopilot_engaged & no_other_lateral_mode)",
            "responseTextRange": [
                50,
                98
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (autopilot_engaged and no_other_lateral_mode) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (autopilot_engaged and no_other_lateral_mode) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f7f391-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Roll Regulator Shall not command angular roll accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_roll_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_roll_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_roll_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_roll_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f81aa0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001d",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_21 = (- CosPhi * SinPsi + SinPhi * SinTheta * CosPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_21",
                    "CosPhi",
                    "SinPsi",
                    "SinPhi",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))",
            "responseTextRange": [
                19,
                86
            ],
            "ft": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f81aa1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if autopilot & pre_autopilot & pre_limits FSM shall immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot",
                    "pre_autopilot",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(autopilot & pre_autopilot & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(autopilot & pre_autopilot & pre_limits)",
            "conditionTextRange": [
                0,
                40
            ],
            "component_name": "FSM",
            "componentTextRange": [
                42,
                44
            ],
            "timingTextRange": [
                52,
                62
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                64,
                77
            ],
            "ft": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((autopilot and pre_autopilot and pre_limits) and ((pre ( not (autopilot and pre_autopilot and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "Upon <b><i>(autopilot & pre_autopilot & pre_limits)</i></b> becoming true, immediately, the component \"<b><i>FSM</i></b>\" shall satisfy <b><i>(pullup)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47f841b0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-003b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =2 =>  set_val = 0.5 * (ia +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 2 => set_val = 0.5 * ( ia + ic ))",
            "responseTextRange": [
                34,
                75
            ],
            "ft": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 2 => set_val = 0.5 * ( ia + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 2 => set_val = 0.5 * ( ia + ic ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(FC = 2 => set_val = 0.5 * ( ia + ic ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f841b1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Roll Regulator Shall not command transient changes in angular roll acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy roll_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(roll_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                63
            ],
            "ft": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((roll_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f868c0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-009",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from STANDBY to MANEUVER when a failure occurs (apfail)",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & apfail )=> STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "apfail",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                98
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and apfail ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f868c1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001v3",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if  htlore3_autopilot  &  htlore3_notpreprelimits  &  pre_limits  FSM  shall  immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "htlore3_autopilot",
                    "htlore3_notpreprelimits",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "conditionTextRange": [
                0,
                63
            ],
            "component_name": "FSM",
            "componentTextRange": [
                66,
                68
            ],
            "timingTextRange": [
                78,
                88
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                90,
                103
            ],
            "ft": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((htlore3_autopilot and htlore3_notpreprelimits and pre_limits) and ((pre ( not (htlore3_autopilot and htlore3_notpreprelimits and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "Upon <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> becoming true, immediately, the component \"<b><i>FSM</i></b>\" shall satisfy <b><i>(pullup)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47f88fd0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Height Regulator Shall not command translational height accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_height_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_height_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_height_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                69
            ],
            "ft": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_height_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_height_output_exceeding_32 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_height_output_exceeding_32 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f8b6e0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-004v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBY when the pilot is in contronl (standby)",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_nominal_state & ! good & ! standby) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "good",
                    "standby",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                110
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and not good and not standby ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f8b6e1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-004a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in roll_hold mode, when steady_state Autopilot shall always satisfy abs_roller_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "steady_state",
                    "abs_roller_err"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                22
            ],
            "regular_condition": "(steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(steady_state)",
            "conditionTextRange": [
                24,
                40
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                42,
                50
            ],
            "timingTextRange": [
                58,
                63
            ],
            "post_condition": "(abs_roller_err <= 1.0)",
            "responseTextRange": [
                65,
                93
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (SI( ((steady_state) and ((pre ( not (steady_state))) or (roll_hold and (FTP or (pre ( not roll_hold)))))), (abs_roller_err <= 1.0) ))) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (SI( ((steady_state) and ((pre ( not (steady_state))) or (roll_hold and (FTP or (pre ( not roll_hold)))))), (abs_roller_err <= 1.0) ))) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, TC = <b><i>(steady_state)</i></b>, Response = <b><i>(abs_roller_err <= 1.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roller_err <= 1.0)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b> and <b><i>(steady_state)</i></b> is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "47f8ddf0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-008v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "apfail",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                115
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby and not apfail ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f8ddf1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-005a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) < mag(r2) NLGuidance shall always satisfy yout = Xap1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap1"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "conditionTextRange": [
                0,
                33
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                35,
                44
            ],
            "timingTextRange": [
                52,
                57
            ],
            "post_condition": "(yout = Xap1)",
            "responseTextRange": [
                59,
                77
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or FTP)), (yout = Xap1) ))))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap1)</i></b>.",
            "description": "Upon <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> becoming true, always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout = Xap1)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "47f90500-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Pitch Regulator Shall not command transient changes in angular pitch acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy pitch_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pitch_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(pitch_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                64
            ],
            "ft": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((pitch_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f90501-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-003c",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =4 => set_val = 0.5 * (ib +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ib",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 4 => set_val = 0.5 * ( ib + ic ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 4 => set_val = 0.5 * ( ib + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 4 => set_val = 0.5 * ( ib + ic ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(FC = 4 => set_val = 0.5 * ( ib + ic ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f92c10-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-000",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The altitude hold autopilot shall maintain altitude within 35 feet of the initial condition. ",
        "fulltext": "Autopilot shall always satisfy altitude_hold => absOf_alt_minus_altIC <= 35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "altitude_hold",
                    "absOf_alt_minus_altIC"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(altitude_hold => absOf_alt_minus_altIC <= 35.0)",
            "responseTextRange": [
                23,
                76
            ],
            "ft": "(LAST V <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "pt": "(H <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "ptExpanded": "(H <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((altitude_hold => absOf_alt_minus_altIC <= 35.0)))",
            "diagramVariables": "Response = <b><i>(altitude_hold => absOf_alt_minus_altIC <= 35.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f92c11-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-005b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) >= mag(r2) NLGuidance shall always satisfy yout = Xap2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap2"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "conditionTextRange": [
                0,
                34
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                36,
                45
            ],
            "timingTextRange": [
                53,
                58
            ],
            "post_condition": "(yout = Xap2)",
            "responseTextRange": [
                60,
                78
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or FTP)), (yout = Xap2) ))))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap2)</i></b>.",
            "description": "Upon <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> becoming true, always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout = Xap2)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "47f95320-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-002A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Body Vector Output, Vb, of this Function Shall Equal a 3x1 Vector Product of the 3x3 Rotation Matrix Output, DCM321, times the Input Inertial Vector, Vi.",
        "fulltext": "Euler shall always satisfy R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_11",
                    "VI_1",
                    "R_11",
                    "VI_2",
                    "R_12",
                    "VI_3",
                    "R_13"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "pt": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)))",
            "diagramVariables": "Response = <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f95321-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-004b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in roll_hold mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                23,
                31
            ],
            "timingTextRange": [
                39,
                44
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                46,
                69
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(overshoot <= 0.1)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47f97a30-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-008",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Yaw Regulator Shall not command transient changes in angular yaw acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy yaw_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yaw_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(yaw_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                62
            ],
            "ft": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((yaw_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f97a31-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-003A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "3.\tUsing a first order finite backward difference equation, the spatial derivatives of Δz/ Δxt = (z(n,1)-z(n-1))/(xt(n,1)-xt(n-1,1) and Δz/ Δyt = (z(n,1)-z(n-1))/(yt(n,1)-yt(n-1,1) shall never exceed a top bound of +10 or bottom bound of -35 (e.g. -35 <= Δz/ Δ(xt,yt) <= 10), where n denotes an index to the current values and n-1 denotes the prior values in the included truth data for xt and yt.    ",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByXt<= 10.0 & DeltaZDividedByXt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByXt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)",
            "responseTextRange": [
                22,
                82
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByXt <= 10.0 and DeltaZDividedByXt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "47f9a140-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TUI-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy normal => yout = normal_yout",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "normal",
                    "yout",
                    "normal_yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(normal => yout = normal_yout)",
            "responseTextRange": [
                31,
                66
            ],
            "ft": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "pt": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ptExpanded": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((normal => yout = normal_yout)))",
            "diagramVariables": "Response = <b><i>(normal => yout = normal_yout)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(normal => yout = normal_yout)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f9a141-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy  abs_roll_rate <= 6.6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_rate"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_rate <= 6.6)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "pt": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_rate <= 6.6)))",
            "diagramVariables": "Response = <b><i>(abs_roll_rate <= 6.6)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roll_rate <= 6.6)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f9c850-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001F",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_23 = SinPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_23",
                    "SinPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_23 = SinPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_23 = SinPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f9c851-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-012",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from FAULT to TRANSITION when the autopilot is not requesting support (not request) and limits are not exceeded (not limits)",
        "fulltext": "FSM_Sensor shall  always  satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_fault_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                18,
                23
            ],
            "post_condition": "(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                26,
                117
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_fault_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f9ef60-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-009",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command transient changes in translational axial acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy airspeed_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "airspeed_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(airspeed_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((airspeed_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47f9ef61-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-010",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from NOMINAL to FAULT when limits are exceeded",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "limits",
                    "SENSTATE",
                    "sen_fault_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)",
            "responseTextRange": [
                24,
                100
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and limits ) => SENSTATE = sen_fault_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fa1670-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "RollAutopilot shall always satisfy ! autopilot_engaged => roll_actuator_command = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "roll_actuator_command"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(! autopilot_engaged => roll_actuator_command = 0.0)",
            "responseTextRange": [
                27,
                84
            ],
            "ft": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "pt": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ptExpanded": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((not autopilot_engaged => roll_actuator_command = 0.0)))",
            "diagramVariables": "Response = <b><i>(! autopilot_engaged => roll_actuator_command = 0.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fa1671-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-003B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy (roll_angle < 6.0 & roll_angle > -6.0) => roll_hold_reference =0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                123
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "47fa3d80-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The minimum value of the NN output, z, shall always be greater than or equal to -0.2, regardless of the input values",
        "fulltext": "NN shall always satisfy z >= -0.2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "z"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z >= -0.2)",
            "responseTextRange": [
                16,
                32
            ],
            "ft": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "pt": "(H <b><i>(z >= -0.2)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "ptExpanded": "(H <b><i>(z >= -0.2)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z >= -0.2)))",
            "diagramVariables": "Response = <b><i>(z >= -0.2)</i></b>.",
            "description": "Always, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(z >= -0.2)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fa3d81-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy abs_roll_angle < 33.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_angle < 33.0)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "pt": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_angle < 33.0)))",
            "diagramVariables": "Response = <b><i>(abs_roll_angle < 33.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roll_angle < 33.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fa6490-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-013",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from TRANSITION to NOMINAL when the autopilot is requesting support (request) and the autopilot reports the correct active mode (mode)",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_transition_state & request & MODE) => SENSTATE = sen_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_transition_state",
                    "request",
                    "MODE",
                    "SENSTATE",
                    "sen_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_transition_state & request & MODE ) => SENSTATE = sen_nominal_state)",
            "responseTextRange": [
                24,
                113
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_transition_state and request and MODE ) => SENSTATE = sen_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_transition_state & request & MODE ) => SENSTATE = sen_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fa6491-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "SWIM-001a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The SWIM Airspeed algorithm shall output the minimum AGCAS airspeed required to perform a 2g flyup as follows:\n\nAuto GCAS Minimum Vcas (knots) = \nSQRT{[2*Load Factor*Gross Weight]/[Air Density at sea level * \n\t\tCoefficient of Lift Max*Wing Area]} / 1.6891 (ft/s/knots)\nwhere\n\tLoad Factor = 2 gs\n\tGross weight of the aircraft\n\tAir Density at sea level = 0.0023769 slugs/ft^3\n\tCoefficient of Lift Max = 1.24 (CAT I) and 1.10 (CAT III)\n\tWing Area of the F-16 = 300 ft^2\nThus,\nIF CAT I, Auto GCAS Minimum Vcas (knots)  = 1.25921 * SQRT(Gross Weight)  + 10.0\nIF CAT III, Auto GCAS Minimum Vcas (knots)  = 1.33694 * SQRT(Gross Weight) + 10.0",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT1) =>  (CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT1",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                97
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fa8ba0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - pre_yout) <= T * mag(Vt + Vv)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "pre_yout",
                    "T",
                    "Vt",
                    "Vv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))",
            "responseTextRange": [
                24,
                71
            ],
            "ft": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "pt": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))))",
            "diagramVariables": "Response = <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fa8ba1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from PULLUP to TRANSITION when the system is supported and sensor data is good",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                111
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fab2b0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout * Xr > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xr"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout * Xr > 0)",
            "responseTextRange": [
                24,
                44
            ],
            "ft": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "pt": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout * Xr > 0)))",
            "diagramVariables": "Response = <b><i>(yout * Xr > 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout * Xr > 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fab2b1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "RollAutopilot shall always satisfy abs_aileron_cmd <= 15.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_aileron_cmd"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(abs_aileron_cmd <= 15.0)",
            "responseTextRange": [
                27,
                57
            ],
            "ft": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "pt": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((abs_aileron_cmd <= 15.0)))",
            "diagramVariables": "Response = <b><i>(abs_aileron_cmd <= 15.0)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs_aileron_cmd <= 15.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fad9c0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (! good & state = ap_nominal_state) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "good",
                    "state",
                    "ap_nominal_state",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                98
            ],
            "ft": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( not good and state = ap_nominal_state ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fad9c1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-007v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good & ! standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                123
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fb00d0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor  shall  always  satisfy  (no_fail => (set_val = mid_value))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "no_fail",
                    "set_val",
                    "mid_value"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                29,
                34
            ],
            "post_condition": "(( no_fail => ( set_val = mid_value ) ))",
            "responseTextRange": [
                37,
                79
            ],
            "ft": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "pt": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( no_fail => ( set_val = mid_value ) ))))",
            "diagramVariables": "Response = <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fb4ef0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "SWIM-001b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT3) => (CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0)) ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT3",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                96
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fb4ef1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-010",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Height Regulator Shall not command transient changes in translational height acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy height_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "height_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(height_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                65
            ],
            "ft": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((height_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(height_command_acceleration <= 32.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(height_command_acceleration <= 32.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fb7600-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001G",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_31 = SinPhi * SinPsi + CosTheta *SinTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_31",
                    "SinPhi",
                    "SinPsi",
                    "CosTheta",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)",
            "responseTextRange": [
                19,
                83
            ],
            "ft": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fb9d10-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NN-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The maximum value of NN output, z, shall always be less than or equal to 1.1, regardless of the input values",
        "fulltext": "NN shall always satisfy z <=1.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "z"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z <= 1.1)",
            "responseTextRange": [
                16,
                30
            ],
            "ft": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "pt": "(H <b><i>(z <= 1.1)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "ptExpanded": "(H <b><i>(z <= 1.1)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z <= 1.1)))",
            "diagramVariables": "Response = <b><i>(z <= 1.1)</i></b>.",
            "description": "Always, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(z <= 1.1)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fb9d11-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-011v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                24,
                117
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Sensor</i></b>\" shall satisfy <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fbc420-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Pitch Regulator shall not command angular pitch accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_pitch_output_exceeding_50 <= 100 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_pitch_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_pitch_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                68
            ],
            "ft": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_pitch_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fbeb30-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "NLG-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout(3) - Xtarg(3) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xtarg"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout ( 3 ) - Xtarg ( 3 ) = 0)",
            "responseTextRange": [
                24,
                53
            ],
            "ft": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "pt": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout ( 3 ) - Xtarg ( 3 ) = 0)))",
            "diagramVariables": "Response = <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fbeb31-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-001v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).",
        "fulltext": "FSM  shall  always  satisfy (limits & !standby & !apfail & supported) => pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "limits",
                    "standby",
                    "apfail",
                    "supported",
                    "pullup"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( limits & ! standby & ! apfail & supported ) => pullup)",
            "responseTextRange": [
                20,
                78
            ],
            "ft": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "pt": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ptExpanded": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( limits and not standby and not apfail and supported ) => pullup)))",
            "diagramVariables": "Response = <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fc1240-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-008A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy hdg_mode_is_active",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_mode_is_active"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(hdg_mode_is_active)",
            "responseTextRange": [
                44,
                69
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg_hold</i></b> & (! FTP)) -> (Y (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & Fin_<b><i>hdg_hold</i></b>))))) & (((! Lin_<b><i>hdg_hold</i></b>) S ((! Lin_<b><i>hdg_hold</i></b>) & Fin_<b><i>hdg_hold</i></b>)) -> (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & Fin_<b><i>hdg_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg_hold</i></b>) & (! LAST)) & (X <b><i>hdg_hold</i></b>)) & (! LAST))) | (X ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))) & (((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) S ((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>)))))) -> (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg_hold) and (pre (hdg_hold))) and ( not FTP)) => (pre (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (hdg_mode_is_active) ))))) and ((SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), ( not (( not hdg_hold) and (pre (hdg_hold)))) )) => (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (hdg_mode_is_active) ))))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(hdg_mode_is_active)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(hdg_mode_is_active)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>hdg_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47fc1241-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001E",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_22 = (CosPhi * CosPsi + SinPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_22",
                    "CosPhi",
                    "CosPsi",
                    "SinPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                84
            ],
            "ft": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fc3950-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-003a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "In the single fail state, a good channel average of the remaining two good branches shall be used to determine the selected value (1)",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =1 => set_val = 0.5 * (ia +ib)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ib"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 1 => set_val = 0.5 * ( ia + ib ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "pt": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 1 => set_val = 0.5 * ( ia + ib ))))",
            "diagramVariables": "Response = <b><i>(FC = 1 => set_val = 0.5 * ( ia + ib ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(FC = 1 => set_val = 0.5 * ( ia + ib ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fc3951-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "REG-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Yaw Regulator Shall not command angular yaw accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_yaw_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_yaw_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_yaw_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                66
            ],
            "ft": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_yaw_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fc6060-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-002B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_21",
                    "VI_1",
                    "R_21",
                    "VI_2",
                    "R_22",
                    "VI_3",
                    "R_23"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "pt": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)))",
            "diagramVariables": "Response = <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fc6061-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-008B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy roll_cmd = hdg_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "hdg_hold_mode_cmd"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(roll_cmd = hdg_hold_mode_cmd)",
            "responseTextRange": [
                44,
                79
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg_hold</i></b> & (! FTP)) -> (Y (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & Fin_<b><i>hdg_hold</i></b>))))) & (((! Lin_<b><i>hdg_hold</i></b>) S ((! Lin_<b><i>hdg_hold</i></b>) & Fin_<b><i>hdg_hold</i></b>)) -> (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & Fin_<b><i>hdg_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg_hold</i></b>) & (! LAST)) & (X <b><i>hdg_hold</i></b>)) & (! LAST))) | (X ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))) & (((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) S ((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>)))))) -> (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg_hold) and (pre (hdg_hold))) and ( not FTP)) => (pre (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (roll_cmd = hdg_hold_mode_cmd) ))))) and ((SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), ( not (( not hdg_hold) and (pre (hdg_hold)))) )) => (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (roll_cmd = hdg_hold_mode_cmd) ))))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>hdg_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47fc8770-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-003C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The roll hold reference shall be set to 30 degrees in the same direction as the actual roll angle if the actual roll angle is greater than 30 degrees at the time of roll hold engagement.",
        "fulltext": "in roll_hold  mode RollAutopilot shall immediately satisfy abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign(roll_angle)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle",
                    "roll_hold_reference",
                    "sign",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                17
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                19,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))",
            "responseTextRange": [
                51,
                129
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "47fc8771-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_12 = CosTheta * SinPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_12",
                    "CosTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_12 = CosTheta * SinPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_12 = CosTheta * SinPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fcae80-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-001H",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_32 = (- SinPhi * CosPsi) + (CosPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_32",
                    "SinPhi",
                    "CosPsi",
                    "CosPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                88
            ],
            "ft": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fcae81-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from MANEUVER to STANDBY when the pilot is in control (standby) and sensor data is good",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & standby & good) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "standby",
                    "good",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                106
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and standby and good ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fcd590-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-assumption1",
        "parent_reqid": "",
        "project": "",
        "rationale": "",
        "fulltext": "the liquid_mixer shall immediately satisfy ! liquid_level_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1"
                ],
                "modes": []
            },
            "component_name": "liquid_mixer",
            "componentTextRange": [
                0,
                15
            ],
            "timingTextRange": [
                23,
                33
            ],
            "post_condition": "(! liquid_level_1)",
            "responseTextRange": [
                35,
                58
            ],
            "ft": "<b><i>(! liquid_level_1)</i></b>",
            "pt": "(H (FTP -> <b><i>(! liquid_level_1)</i></b>))",
            "ftExpanded": "<b><i>(! liquid_level_1)</i></b>",
            "ptExpanded": "(H ((! (Y TRUE)) -> <b><i>(! liquid_level_1)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(FTP => (not liquid_level_1)))",
            "diagramVariables": "Response = <b><i>(! liquid_level_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg"
        },
        "_id": "47fcd591-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "r1",
        "parent_reqid": "",
        "project": "cruise",
        "rationale": "",
        "comments": "",
        "fulltext": "before cruising comp shall satisfy a",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "a"
                ],
                "modes": [
                    "cruising"
                ]
            },
            "scope_mode": "cruising",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "comp",
            "componentTextRange": [
                16,
                19
            ],
            "post_condition": "(a)",
            "responseTextRange": [
                27,
                35
            ],
            "ft": "(((! (FFin_<b><i>cruising</i></b> | LAST)) U <b><i>(a)</i></b>) | <b><i>cruising</i></b>)",
            "pt": "((H ((FFin_<b><i>cruising</i></b> & (! FTP)) -> (Y (O <b><i>(a)</i></b>)))) & ((H (! FFin_<b><i>cruising</i></b>)) -> (O <b><i>(a)</i></b>)))",
            "ftExpanded": "(((! ((((! <b><i>cruising</i></b>) & (! LAST)) & (X <b><i>cruising</i></b>)) | LAST)) U <b><i>(a)</i></b>) | <b><i>cruising</i></b>)",
            "ptExpanded": "((H ((((<b><i>cruising</i></b> & ((! (Y TRUE)) | (Y (! <b><i>cruising</i></b>)))) & ((Y (H (! <b><i>cruising</i></b>))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O <b><i>(a)</i></b>)))) & ((H (! ((<b><i>cruising</i></b> & ((! (Y TRUE)) | (Y (! <b><i>cruising</i></b>)))) & ((Y (H (! <b><i>cruising</i></b>))) | (! (Y TRUE)))))) -> (O <b><i>(a)</i></b>)))",
            "component": "<b><i>comp</i></b>",
            "CoCoSpecCode": "((H((((cruising and (FTP or (pre ( not cruising)))) and ((pre (H( not cruising))) or FTP)) and ( not FTP)) => (pre (O((a)))))) and ((H( not ((cruising and (FTP or (pre ( not cruising)))) and ((pre (H( not cruising))) or FTP)))) => (O((a)))))",
            "diagramVariables": "M = <b><i>cruising</i></b>, Response = <b><i>(a)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and exclusive of) the first point where <b><i>cruising</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/before_null_null_satisfaction.svg"
        },
        "_id": "47fcfca0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-012",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "",
        "fulltext": "when emergency_button the liquid_mixer shall immediately satisfy ! stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "emergency_button",
                "stirring_motor"
            ],
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "regular_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                55
            ],
            "post_condition": "(! stirring_motor)",
            "responseTextRange": [
                57,
                80
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! stirring_motor)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! stirring_motor)</i></b>))",
            "pt": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP)) -> <b><i>(! stirring_motor)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! stirring_motor)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! stirring_motor)</i></b>))",
            "ptExpanded": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! stirring_motor)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((emergency_button) and ((pre ( not (emergency_button))) or FTP)) => (not stirring_motor)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47fcfca1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-001",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "RollAutopilot shall always satisfy ! autopilot_engaged => roll_actuator_command = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "roll_actuator_command"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(! autopilot_engaged => roll_actuator_command = 0.0)",
            "responseTextRange": [
                27,
                84
            ],
            "ft": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "pt": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ptExpanded": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((not autopilot_engaged => roll_actuator_command = 0.0)))",
            "diagramVariables": "Response = <b><i>(! autopilot_engaged => roll_actuator_command = 0.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fd23b0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-005",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached occurs, the 60 sec timer shall start.",
        "fulltext": "when liquid_level_2 the liquid_mixer shall immediately satisfy timer_60sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "liquid_level_2",
                "timer_60sec_start"
            ],
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "regular_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                53
            ],
            "post_condition": "(timer_60sec_start)",
            "responseTextRange": [
                55,
                79
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X <b><i>(timer_60sec_start)</i></b>))) & (<b><i>(liquid_level_2)</i></b> -> <b><i>(timer_60sec_start)</i></b>))",
            "pt": "(H ((<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP)) -> <b><i>(timer_60sec_start)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X <b><i>(timer_60sec_start)</i></b>))) & (<b><i>(liquid_level_2)</i></b> -> <b><i>(timer_60sec_start)</i></b>))",
            "ptExpanded": "(H ((<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE)))) -> <b><i>(timer_60sec_start)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP)) => (timer_60sec_start)))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, Response = <b><i>(timer_60sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47fd23b1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-002",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": " When liquid level 1 is reached occurs, the liquid mixer controller shall close valve 0",
        "fulltext": "when liquid_level_1 liquid_mixer shall immediately satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "liquid_level_1",
                "valve_0"
            ],
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_1)",
            "regular_condition": "(liquid_level_1)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                51,
                67
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X <b><i>(! valve_0)</i></b>))) & (<b><i>(liquid_level_1)</i></b> -> <b><i>(! valve_0)</i></b>))",
            "pt": "(H ((<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | FTP)) -> <b><i>(! valve_0)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X <b><i>(! valve_0)</i></b>))) & (<b><i>(liquid_level_1)</i></b> -> <b><i>(! valve_0)</i></b>))",
            "ptExpanded": "(H ((<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_0)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((liquid_level_1) and ((pre ( not (liquid_level_1))) or FTP)) => (not valve_0)))",
            "diagramVariables": "TC = <b><i>(liquid_level_1)</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_1)</i></b> is true and any point in the interval where <b><i>(liquid_level_1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47fd4ac0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-010",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 1.",
        "fulltext": "when emergency_button the liquid_mixer shall immediately satisfy ! valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "emergency_button",
                "valve_1"
            ],
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "regular_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                55
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                57,
                73
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_1)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_1)</i></b>))",
            "pt": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP)) -> <b><i>(! valve_1)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_1)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_1)</i></b>))",
            "ptExpanded": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_1)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((emergency_button) and ((pre ( not (emergency_button))) or FTP)) => (not valve_1)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47fd4ac1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-007",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When 60 second timer expires occurs, the 120 sec timer shall start.",
        "fulltext": "when timer_60sec_expire the liquid_mixer shall immediately satisfy timer_120sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "timer_60sec_expire",
                "timer_120sec_start"
            ],
            "qualifier_word": "when",
            "pre_condition": "(timer_60sec_expire)",
            "regular_condition": "(timer_60sec_expire)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                24,
                39
            ],
            "timingTextRange": [
                47,
                57
            ],
            "post_condition": "(timer_120sec_start)",
            "responseTextRange": [
                59,
                84
            ],
            "ft": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X <b><i>(timer_120sec_start)</i></b>))) & (<b><i>(timer_60sec_expire)</i></b> -> <b><i>(timer_120sec_start)</i></b>))",
            "pt": "(H ((<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | FTP)) -> <b><i>(timer_120sec_start)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X <b><i>(timer_120sec_start)</i></b>))) & (<b><i>(timer_60sec_expire)</i></b> -> <b><i>(timer_120sec_start)</i></b>))",
            "ptExpanded": "(H ((<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | (! (Y TRUE)))) -> <b><i>(timer_120sec_start)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((timer_60sec_expire) and ((pre ( not (timer_60sec_expire))) or FTP)) => (timer_120sec_start)))",
            "diagramVariables": "TC = <b><i>(timer_60sec_expire)</i></b>, Response = <b><i>(timer_120sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timer_60sec_expire)</i></b> is true and any point in the interval where <b><i>(timer_60sec_expire)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47fd71d0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-001",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "While not liquid level 1 is reached, when start button is pressed the liquid mixer components shall open valve 0",
        "fulltext": "when start_button liquid_mixer shall immediately satisfy if ! liquid_level_1 then valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "start_button",
                "liquid_level_1",
                "valve_0"
            ],
            "qualifier_word": "when",
            "pre_condition": "(start_button)",
            "regular_condition": "(start_button)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                18,
                29
            ],
            "timingTextRange": [
                37,
                47
            ],
            "post_condition": "(! liquid_level_1 => valve_0)",
            "responseTextRange": [
                49,
                88
            ],
            "ft": "((LAST V (((! <b><i>(start_button)</i></b>) & ((! LAST) & (X <b><i>(start_button)</i></b>))) -> (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))) & (<b><i>(start_button)</i></b> -> <b><i>(! liquid_level_1 -> valve_0)</i></b>))",
            "pt": "(H ((<b><i>(start_button)</i></b> & ((Y (! <b><i>(start_button)</i></b>)) | FTP)) -> <b><i>(! liquid_level_1 -> valve_0)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(start_button)</i></b>) & ((! LAST) & (X <b><i>(start_button)</i></b>))) -> (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))) & (<b><i>(start_button)</i></b> -> <b><i>(! liquid_level_1 -> valve_0)</i></b>))",
            "ptExpanded": "(H ((<b><i>(start_button)</i></b> & ((Y (! <b><i>(start_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! liquid_level_1 -> valve_0)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((start_button) and ((pre ( not (start_button))) or FTP)) => (not liquid_level_1 => valve_0)))",
            "diagramVariables": "TC = <b><i>(start_button)</i></b>, Response = <b><i>(! liquid_level_1 => valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(start_button)</i></b> is true and any point in the interval where <b><i>(start_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47fd71d1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-006",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached happens, liquid mixer controller shall start stirring motor until 60 second timer expires or emergency button is pressed.",
        "fulltext": "when liquid_level_2, the liquid_mixer shall until (timer_60sec_expire | emergency_button) satisfy stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "liquid_level_2",
                "timer_60sec_expire",
                "emergency_button",
                "stirring_motor"
            ],
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "regular_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                21,
                36
            ],
            "stop_condition": "(( timer_60sec_expire | emergency_button ))",
            "timingTextRange": [
                44,
                88
            ],
            "post_condition": "(stirring_motor)",
            "responseTextRange": [
                90,
                111
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "pt": "(H ((H (! <b><i>(liquid_level_2)</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP)))) -> <b><i>(stirring_motor)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(liquid_level_2)</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(stirring_motor)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (liquid_level_2))) or ((SI( ((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP)), ( not (( timer_60sec_expire or emergency_button ))) )) => (stirring_motor))))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, SC = <b><i>(( timer_60sec_expire | emergency_button ))</i></b>, Response = <b><i>(stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "47fd98e0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-003",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "While not liquid level 2 is reached, when liquid level 1 is reached the liquid mixer controller shall open valve 1 until emergency button is pressed.",
        "fulltext": "when liquid_level_1 the liquid_mixer shall until emergency_button satisfy if ! liquid_level_2 then valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "liquid_level_1",
                "emergency_button",
                "liquid_level_2",
                "valve_1"
            ],
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_1)",
            "regular_condition": "(liquid_level_1)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "stop_condition": "(emergency_button)",
            "timingTextRange": [
                43,
                64
            ],
            "post_condition": "(! liquid_level_2 => valve_1)",
            "responseTextRange": [
                66,
                105
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "pt": "(H ((H (! <b><i>(liquid_level_1)</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | FTP)))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(liquid_level_1)</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (liquid_level_1))) or ((SI( ((liquid_level_1) and ((pre ( not (liquid_level_1))) or FTP)), ( not (emergency_button)) )) => (not liquid_level_2 => valve_1))))",
            "diagramVariables": "TC = <b><i>(liquid_level_1)</i></b>, SC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! liquid_level_2 => valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_1)</i></b> is true and any point in the interval where <b><i>(liquid_level_1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "47fd98e1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-004",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached occurs, the liquid mixer controller shall close valve 1.",
        "fulltext": "when liquid_level_2 the liquid_mixer shall immediately satisfy !valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "liquid_level_2",
                "valve_1"
            ],
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "regular_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                53
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                55,
                70
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X <b><i>(! valve_1)</i></b>))) & (<b><i>(liquid_level_2)</i></b> -> <b><i>(! valve_1)</i></b>))",
            "pt": "(H ((<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP)) -> <b><i>(! valve_1)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X <b><i>(! valve_1)</i></b>))) & (<b><i>(liquid_level_2)</i></b> -> <b><i>(! valve_1)</i></b>))",
            "ptExpanded": "(H ((<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_1)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP)) => (not valve_1)))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47fdbff0-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-008",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When 60 second timer expires happens, the liquid mixer controller shall open valve 2 until 120 sec timer expires or emergency button is pressed.",
        "fulltext": "when timer_60sec_expire, the liquid_mixer shall until (timer_120sec_expire | emergency_button) satisfy valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "timer_60sec_expire",
                "timer_120sec_expire",
                "emergency_button",
                "valve_2"
            ],
            "qualifier_word": "when",
            "pre_condition": "(timer_60sec_expire)",
            "regular_condition": "(timer_60sec_expire)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                25,
                40
            ],
            "stop_condition": "(( timer_120sec_expire | emergency_button ))",
            "timingTextRange": [
                48,
                93
            ],
            "post_condition": "(valve_2)",
            "responseTextRange": [
                95,
                109
            ],
            "ft": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "pt": "(H ((H (! <b><i>(timer_60sec_expire)</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | FTP)))) -> <b><i>(valve_2)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(timer_60sec_expire)</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(valve_2)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (timer_60sec_expire))) or ((SI( ((timer_60sec_expire) and ((pre ( not (timer_60sec_expire))) or FTP)), ( not (( timer_120sec_expire or emergency_button ))) )) => (valve_2))))",
            "diagramVariables": "TC = <b><i>(timer_60sec_expire)</i></b>, SC = <b><i>(( timer_120sec_expire | emergency_button ))</i></b>, Response = <b><i>(valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timer_60sec_expire)</i></b> is true and any point in the interval where <b><i>(timer_60sec_expire)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "47fdbff1-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-009",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 0.",
        "fulltext": "when emergency_button, the liquid_mixer shall immediately satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "emergency_button",
                "valve_0"
            ],
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "regular_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                23,
                38
            ],
            "timingTextRange": [
                46,
                56
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                58,
                74
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_0)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_0)</i></b>))",
            "pt": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP)) -> <b><i>(! valve_0)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_0)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_0)</i></b>))",
            "ptExpanded": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_0)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((emergency_button) and ((pre ( not (emergency_button))) or FTP)) => (not valve_0)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47fde700-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "LM-011",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 2.",
        "fulltext": "when emergency_button the liquid_mixer shall immediately satisfy ! valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "emergency_button",
                "valve_2"
            ],
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "regular_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                55
            ],
            "post_condition": "(! valve_2)",
            "responseTextRange": [
                57,
                73
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_2)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_2)</i></b>))",
            "pt": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP)) -> <b><i>(! valve_2)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_2)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_2)</i></b>))",
            "ptExpanded": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_2)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((emergency_button) and ((pre ( not (emergency_button))) or FTP)) => (not valve_2)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "47fde701-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-007",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "RollAutopilot shall always satisfy abs_aileron_cmd <= 15.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_aileron_cmd"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(abs_aileron_cmd <= 15.0)",
            "responseTextRange": [
                27,
                57
            ],
            "ft": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "pt": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((abs_aileron_cmd <= 15.0)))",
            "diagramVariables": "Response = <b><i>(abs_aileron_cmd <= 15.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fe0e10-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EB-002",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => ridge_on &  abs(check_1_1  - 1.0) < eps12 &  abs(check_1_2) < eps12  &  abs(check_1_3) < eps12  & abs(check_2_1) < eps12  &  abs(check_2_2 - 1.0) < eps12 & abs(check_2_3) < eps12 & abs(check_3_1 ) < eps12 & abs(check_3_2) < eps12 & abs(check_3_3 - 1.0) < eps12",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "abs",
                    "check_1_1",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ridge_on & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)",
            "responseTextRange": [
                19,
                310
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ridge_on & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ridge_on & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ridge_on & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ridge_on & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ridge_on and abs ( check_1_1 - 1.0 ) < eps12 and abs ( check_1_2 ) < eps12 and abs ( check_1_3 ) < eps12 and abs ( check_2_1 ) < eps12 and abs ( check_2_2 - 1.0 ) < eps12 and abs ( check_2_3 ) < eps12 and abs ( check_3_1 ) < eps12 and abs ( check_3_2 ) < eps12 and abs ( check_3_3 - 1.0 ) < eps12)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ridge_on & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fe0e11-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "AP-010b",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "when in hdg mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                40,
                63
            ],
            "ft": "(LAST V (<b><i>hdg</i></b> -> <b><i>(overshoot <= 0.1)</i></b>))",
            "pt": "(H (<b><i>hdg</i></b> -> <b><i>(overshoot <= 0.1)</i></b>))",
            "ftExpanded": "(LAST V (<b><i>hdg</i></b> -> <b><i>(overshoot <= 0.1)</i></b>))",
            "ptExpanded": "(H (<b><i>hdg</i></b> -> <b><i>(overshoot <= 0.1)</i></b>))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H(hdg => (overshoot <= 0.1)))",
            "diagramVariables": "M = <b><i>hdg</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>hdg</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "47fe3520-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "FSM-013",
        "parent_reqid": "",
        "project": "FSM",
        "rationale": "",
        "comments": "",
        "fulltext": "FSM shall always satisfy (senstate = sen_transition_state & request & MDE) => SENSTATE = sen_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_transition_state",
                    "request",
                    "MDE",
                    "SENSTATE",
                    "sen_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(( senstate = sen_transition_state & request & MDE ) => SENSTATE = sen_nominal_state)",
            "responseTextRange": [
                17,
                105
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_transition_state & request & MDE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_transition_state & request & MDE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_transition_state & request & MDE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_transition_state & request & MDE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_transition_state and request and MDE ) => SENSTATE = sen_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_transition_state & request & MDE ) => SENSTATE = sen_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fe8340-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "TSM-003b",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =2 =>  set_val = 0.5 * (ia +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 2 => set_val = 0.5 * ( ia + ic ))",
            "responseTextRange": [
                34,
                75
            ],
            "ft": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 2 => set_val = 0.5 * ( ia + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 2 => set_val = 0.5 * ( ia + ic ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47fe8341-6e94-11ec-bf86-e513c51b1592"
    },
    {
        "reqid": "EUL-002A",
        "parent_reqid": "",
        "project": "Lockheed_Martin_whole",
        "rationale": "The Body Vector Output, Vb, of this Function Shall Equal a 3x1 Vector Product of the 3x3 Rotation Matrix Output, DCM321, times the Input Inertial Vector, Vi.",
        "fulltext": "Euler shall always satisfy R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_11",
                    "VI_1",
                    "R_11",
                    "VI_2",
                    "R_12",
                    "VI_3",
                    "R_13"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "pt": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)))",
            "diagramVariables": "Response = <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "47feaa50-6e94-11ec-bf86-e513c51b1592"
    }
]